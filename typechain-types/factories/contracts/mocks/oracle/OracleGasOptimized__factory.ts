/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  OracleGasOptimized,
  OracleGasOptimizedInterface,
} from "../../../../contracts/mocks/oracle/OracleGasOptimized";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ECDSAInvalidSignature",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "length",
        type: "uint256",
      },
    ],
    name: "ECDSAInvalidSignatureLength",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "ECDSAInvalidSignatureS",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newUpdater",
        type: "address",
      },
    ],
    name: "ReporterUpdate",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "value",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "updatedAt",
        type: "uint128",
      },
    ],
    name: "ValueUpdate",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    name: "getLatestValue",
    outputs: [
      {
        internalType: "uint128",
        name: "value",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "updatedAt",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "isReporter",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newReporter",
        type: "address",
      },
    ],
    name: "updateReporter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
      {
        internalType: "uint128",
        name: "value",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "timestamp",
        type: "uint128",
      },
    ],
    name: "updateValue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "extraData",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "signedFor",
        type: "address",
      },
    ],
    name: "updateValueWithProof",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611429806100616000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063044ad7be1461005c57806334d972bd1461008c578063423d0f2e146100a857806373fc67dd146100c4578063b391c7d3146100f5575b600080fd5b61007660048036038101906100719190610969565b610111565b60405161008391906109b1565b60405180910390f35b6100a660048036038101906100a19190610a31565b61016b565b005b6100c260048036038101906100bd9190610969565b6102d3565b005b6100de60048036038101906100d99190610afc565b6103a8565b6040516100ec929190610b54565b60405180910390f35b61010f600480360381019061010a9190610ba9565b6103fa565b005b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b60008061017b8386868a8a610464565b9150915061018882610111565b6101c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101be90610c59565b60405180910390fd5b6000806000838060200190518101906101e09190610ca3565b92509250925060006101f1826103a8565b915050806fffffffffffffffffffffffffffffffff16836fffffffffffffffffffffffffffffffff161161025a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025190610d42565b60405180910390fd5b610708426102689190610d9b565b836fffffffffffffffffffffffffffffffff16106102bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b290610e41565b60405180910390fd5b6102c6828585610546565b5050505050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461032d57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f908f7895b4f549bfdadf6ed095ecdd9f61cf3363de57abdd4c4f5ed424fd6e948160405161039d9190610e70565b60405180910390a150565b600080700100000000000000000000000000000000600080858152602001908152602001600020546103da9190610eba565b9050608060008085815260200190815260200160002054901c9150915091565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461045457600080fd5b61045f838383610546565b505050565b600060606000806000868681019061047c919061106c565b92509250925060006104d48b848c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050876105d0565b905060006104e28284610617565b9050428467ffffffffffffffff161015610531576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052890611169565b60405180910390fd5b80859650965050505050509550959350505050565b806fffffffffffffffffffffffffffffffff166080836fffffffffffffffffffffffffffffffff16901b61057a9190610d9b565b600080858152602001908152602001600020819055507fefc8f4041c0ba4d097e54bce7e5bc47ec5b45c0270c42379c4b691c85943edf08383836040516105c393929190611198565b60405180910390a1505050565b60008484848051906020012084805190602001206040516020016105f794939291906112c5565b604051602081830303815290604052805190602001209050949350505050565b6000806000806106278686610643565b925092509250610637828261069f565b82935050505092915050565b600080600060418451036106885760008060006020870151925060408701519150606087015160001a905061067a88828585610803565b955095509550505050610698565b60006002855160001b9250925092505b9250925092565b600060038111156106b3576106b261131e565b5b8260038111156106c6576106c561131e565b5b03156107ff57600160038111156106e0576106df61131e565b5b8260038111156106f3576106f261131e565b5b0361072a576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600381111561073e5761073d61131e565b5b8260038111156107515761075061131e565b5b03610796578060001c6040517ffce698f700000000000000000000000000000000000000000000000000000000815260040161078d919061135c565b60405180910390fd5b6003808111156107a9576107a861131e565b5b8260038111156107bc576107bb61131e565b5b036107fe57806040517fd78bce0c0000000000000000000000000000000000000000000000000000000081526004016107f59190611377565b60405180910390fd5b5b5050565b60008060007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08460001c11156108435760006003859250925092506108ed565b60006001888888886040516000815260200160405260405161086894939291906113ae565b6020604051602081039080840390855afa15801561088a573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108de57600060016000801b935093509350506108ed565b8060008060001b935093509350505b9450945094915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109368261090b565b9050919050565b6109468161092b565b811461095157600080fd5b50565b6000813590506109638161093d565b92915050565b60006020828403121561097f5761097e610901565b5b600061098d84828501610954565b91505092915050565b60008115159050919050565b6109ab81610996565b82525050565b60006020820190506109c660008301846109a2565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126109f1576109f06109cc565b5b8235905067ffffffffffffffff811115610a0e57610a0d6109d1565b5b602083019150836001820283011115610a2a57610a296109d6565b5b9250929050565b600080600080600060608688031215610a4d57610a4c610901565b5b600086013567ffffffffffffffff811115610a6b57610a6a610906565b5b610a77888289016109db565b9550955050602086013567ffffffffffffffff811115610a9a57610a99610906565b5b610aa6888289016109db565b93509350506040610ab988828901610954565b9150509295509295909350565b6000819050919050565b610ad981610ac6565b8114610ae457600080fd5b50565b600081359050610af681610ad0565b92915050565b600060208284031215610b1257610b11610901565b5b6000610b2084828501610ae7565b91505092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b610b4e81610b29565b82525050565b6000604082019050610b696000830185610b45565b610b766020830184610b45565b9392505050565b610b8681610b29565b8114610b9157600080fd5b50565b600081359050610ba381610b7d565b92915050565b600080600060608486031215610bc257610bc1610901565b5b6000610bd086828701610ae7565b9350506020610be186828701610b94565b9250506040610bf286828701610b94565b9150509250925092565b600082825260208201905092915050565b7f4f7261636c653a20496e76616c6964207369676e617475726500000000000000600082015250565b6000610c43601983610bfc565b9150610c4e82610c0d565b602082019050919050565b60006020820190508181036000830152610c7281610c36565b9050919050565b600081519050610c8881610b7d565b92915050565b600081519050610c9d81610ad0565b92915050565b600080600060608486031215610cbc57610cbb610901565b5b6000610cca86828701610c79565b9350506020610cdb86828701610c79565b9250506040610cec86828701610c8e565b9150509250925092565b7f4f7261636c653a2044617461206d757374206265206e65776572000000000000600082015250565b6000610d2c601a83610bfc565b9150610d3782610cf6565b602082019050919050565b60006020820190508181036000830152610d5b81610d1f565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610da682610d62565b9150610db183610d62565b9250828201905080821115610dc957610dc8610d6c565b5b92915050565b7f4f7261636c653a20446174612063616e206e6f7420626520696e20667574757260008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b6000610e2b602183610bfc565b9150610e3682610dcf565b604082019050919050565b60006020820190508181036000830152610e5a81610e1e565b9050919050565b610e6a8161092b565b82525050565b6000602082019050610e856000830184610e61565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ec582610d62565b9150610ed083610d62565b925082610ee057610edf610e8b565b5b828206905092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610f3982610ef0565b810181811067ffffffffffffffff82111715610f5857610f57610f01565b5b80604052505050565b6000610f6b6108f7565b9050610f778282610f30565b919050565b600067ffffffffffffffff821115610f9757610f96610f01565b5b610fa082610ef0565b9050602081019050919050565b82818337600083830152505050565b6000610fcf610fca84610f7c565b610f61565b905082815260208101848484011115610feb57610fea610eeb565b5b610ff6848285610fad565b509392505050565b600082601f830112611013576110126109cc565b5b8135611023848260208601610fbc565b91505092915050565b600067ffffffffffffffff82169050919050565b6110498161102c565b811461105457600080fd5b50565b60008135905061106681611040565b92915050565b60008060006060848603121561108557611084610901565b5b600084013567ffffffffffffffff8111156110a3576110a2610906565b5b6110af86828701610ffe565b93505060206110c086828701611057565b925050604084013567ffffffffffffffff8111156110e1576110e0610906565b5b6110ed86828701610ffe565b9150509250925092565b7f5369676e617475726556657269666965723a205369676e61747572652065787060008201527f6972656400000000000000000000000000000000000000000000000000000000602082015250565b6000611153602483610bfc565b915061115e826110f7565b604082019050919050565b6000602082019050818103600083015261118281611146565b9050919050565b61119281610ac6565b82525050565b60006060820190506111ad6000830186611189565b6111ba6020830185610b45565b6111c76040830184610b45565b949350505050565b600081905092915050565b7f1900000000000000000000000000000000000000000000000000000000000000600082015250565b60006112106002836111cf565b915061121b826111da565b600282019050919050565b60008160601b9050919050565b600061123e82611226565b9050919050565b600061125082611233565b9050919050565b6112686112638261092b565b611245565b82525050565b60008160c01b9050919050565b60006112868261126e565b9050919050565b61129e6112998261102c565b61127b565b82525050565b6000819050919050565b6112bf6112ba82610ac6565b6112a4565b82525050565b60006112d082611203565b91506112dc8287611257565b6014820191506112ec828661128d565b6008820191506112fc82856112ae565b60208201915061130c82846112ae565b60208201915081905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b61135681610d62565b82525050565b6000602082019050611371600083018461134d565b92915050565b600060208201905061138c6000830184611189565b92915050565b600060ff82169050919050565b6113a881611392565b82525050565b60006080820190506113c36000830187611189565b6113d0602083018661139f565b6113dd6040830185611189565b6113ea6060830184611189565b9594505050505056fea264697066735822122094ddbe6b511b0031ee0ba05a60a28362c62fdfa7ca93a1e6ea8abc268621065b64736f6c63430008140033";

type OracleGasOptimizedConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OracleGasOptimizedConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OracleGasOptimized__factory extends ContractFactory {
  constructor(...args: OracleGasOptimizedConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      OracleGasOptimized & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): OracleGasOptimized__factory {
    return super.connect(runner) as OracleGasOptimized__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OracleGasOptimizedInterface {
    return new Interface(_abi) as OracleGasOptimizedInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): OracleGasOptimized {
    return new Contract(address, _abi, runner) as unknown as OracleGasOptimized;
  }
}
