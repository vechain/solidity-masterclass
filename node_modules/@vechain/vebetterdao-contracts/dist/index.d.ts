import { DeferredTopicFilter, EventFragment, EventLog, ContractTransactionResponse, FunctionFragment, ContractTransaction, LogDescription, Typed, TransactionRequest, Interface, AddressLike, BytesLike, BigNumberish, Result, BaseContract, ContractRunner, Listener, ContractMethod } from 'ethers';

interface TypedDeferredTopicFilter<_TCEvent extends TypedContractEvent> extends DeferredTopicFilter {
}
interface TypedContractEvent<InputTuple extends Array<any> = any, OutputTuple extends Array<any> = any, OutputObject = any> {
    (...args: Partial<InputTuple>): TypedDeferredTopicFilter<TypedContractEvent<InputTuple, OutputTuple, OutputObject>>;
    name: string;
    fragment: EventFragment;
    getFragment(...args: Partial<InputTuple>): EventFragment;
}
type __TypechainAOutputTuple<T> = T extends TypedContractEvent<infer _U, infer W> ? W : never;
type __TypechainOutputObject<T> = T extends TypedContractEvent<infer _U, infer _W, infer V> ? V : never;
interface TypedEventLog<TCEvent extends TypedContractEvent> extends Omit<EventLog, "args"> {
    args: __TypechainAOutputTuple<TCEvent> & __TypechainOutputObject<TCEvent>;
}
interface TypedLogDescription<TCEvent extends TypedContractEvent> extends Omit<LogDescription, "args"> {
    args: __TypechainAOutputTuple<TCEvent> & __TypechainOutputObject<TCEvent>;
}
type TypedListener<TCEvent extends TypedContractEvent> = (...listenerArg: [
    ...__TypechainAOutputTuple<TCEvent>,
    TypedEventLog<TCEvent>,
    ...undefined[]
]) => void;
type StateMutability = "nonpayable" | "payable" | "view";
type BaseOverrides = Omit<TransactionRequest, "to" | "data">;
type NonPayableOverrides = Omit<BaseOverrides, "value" | "blockTag" | "enableCcipRead">;
type PayableOverrides = Omit<BaseOverrides, "blockTag" | "enableCcipRead">;
type ViewOverrides = Omit<TransactionRequest, "to" | "data">;
type Overrides<S extends StateMutability> = S extends "nonpayable" ? NonPayableOverrides : S extends "payable" ? PayableOverrides : ViewOverrides;
type PostfixOverrides<A extends Array<any>, S extends StateMutability> = A | [...A, Overrides<S>];
type ContractMethodArgs<A extends Array<any>, S extends StateMutability> = PostfixOverrides<{
    [I in keyof A]-?: A[I] | Typed;
}, S>;
type DefaultReturnType<R> = R extends Array<any> ? R[0] : R;
interface TypedContractMethod<A extends Array<any> = Array<any>, R = any, S extends StateMutability = "payable"> {
    (...args: ContractMethodArgs<A, S>): S extends "view" ? Promise<DefaultReturnType<R>> : Promise<ContractTransactionResponse>;
    name: string;
    fragment: FunctionFragment;
    getFragment(...args: ContractMethodArgs<A, S>): FunctionFragment;
    populateTransaction(...args: ContractMethodArgs<A, S>): Promise<ContractTransaction>;
    staticCall(...args: ContractMethodArgs<A, S>): Promise<DefaultReturnType<R>>;
    send(...args: ContractMethodArgs<A, S>): Promise<ContractTransactionResponse>;
    estimateGas(...args: ContractMethodArgs<A, S>): Promise<bigint>;
    staticCallResult(...args: ContractMethodArgs<A, S>): Promise<R>;
}

declare namespace PassportTypes {
    type InitializationDataStruct = {
        xAllocationVoting: AddressLike;
        x2EarnApps: AddressLike;
        galaxyMember: AddressLike;
        signalingThreshold: BigNumberish;
        roundsForCumulativeScore: BigNumberish;
        minimumGalaxyMemberLevel: BigNumberish;
        blacklistThreshold: BigNumberish;
        whitelistThreshold: BigNumberish;
        maxEntitiesPerPassport: BigNumberish;
        decayRate: BigNumberish;
    };
    type InitializationDataStructOutput = [
        xAllocationVoting: string,
        x2EarnApps: string,
        galaxyMember: string,
        signalingThreshold: bigint,
        roundsForCumulativeScore: bigint,
        minimumGalaxyMemberLevel: bigint,
        blacklistThreshold: bigint,
        whitelistThreshold: bigint,
        maxEntitiesPerPassport: bigint,
        decayRate: bigint
    ] & {
        xAllocationVoting: string;
        x2EarnApps: string;
        galaxyMember: string;
        signalingThreshold: bigint;
        roundsForCumulativeScore: bigint;
        minimumGalaxyMemberLevel: bigint;
        blacklistThreshold: bigint;
        whitelistThreshold: bigint;
        maxEntitiesPerPassport: bigint;
        decayRate: bigint;
    };
    type InitializationRoleDataStruct = {
        admin: AddressLike;
        botSignaler: AddressLike;
        upgrader: AddressLike;
        settingsManager: AddressLike;
        roleGranter: AddressLike;
        blacklister: AddressLike;
        whitelister: AddressLike;
        actionRegistrar: AddressLike;
        actionScoreManager: AddressLike;
    };
    type InitializationRoleDataStructOutput = [
        admin: string,
        botSignaler: string,
        upgrader: string,
        settingsManager: string,
        roleGranter: string,
        blacklister: string,
        whitelister: string,
        actionRegistrar: string,
        actionScoreManager: string
    ] & {
        admin: string;
        botSignaler: string;
        upgrader: string;
        settingsManager: string;
        roleGranter: string;
        blacklister: string;
        whitelister: string;
        actionRegistrar: string;
        actionScoreManager: string;
    };
}
interface VeBetterPassportInterface extends Interface {
    getFunction(nameOrSignature: "ACTION_REGISTRAR_ROLE" | "ACTION_SCORE_MANAGER_ROLE" | "CLOCK_MODE" | "DEFAULT_ADMIN_ROLE" | "ROLE_GRANTER" | "SETTINGS_MANAGER_ROLE" | "SIGNALER_ROLE" | "UPGRADER_ROLE" | "UPGRADE_INTERFACE_VERSION" | "WHITELISTER_ROLE" | "acceptDelegation" | "acceptEntityLink" | "appOfSignaler" | "appSecurity" | "appSignalsCounter" | "appTotalSignalsCounter" | "assignSignalerToApp" | "assignSignalerToAppByAppAdmin" | "blacklist" | "blacklistThreshold" | "cancelOutgoingPendingDelegation" | "cancelOutgoingPendingEntityLink" | "clock" | "decayRate" | "delegatePassport" | "delegateWithSignature" | "denyIncomingPendingDelegation" | "denyIncomingPendingEntityLink" | "eip712Domain" | "getCumulativeScoreWithDecay" | "getDelegatee" | "getDelegateeInTimepoint" | "getDelegator" | "getDelegatorInTimepoint" | "getEntitiesLinkedToPassport" | "getGalaxyMember" | "getMinimumGalaxyMemberLevel" | "getPassportForEntity" | "getPassportForEntityAtTimepoint" | "getPendingDelegations" | "getPendingLinkings" | "getRoleAdmin" | "getX2EarnApps" | "getXAllocationVoting" | "grantRole" | "hasRole" | "initialize" | "isBlacklisted" | "isCheckEnabled" | "isDelegatee" | "isDelegateeInTimepoint" | "isDelegator" | "isDelegatorInTimepoint" | "isEntity" | "isEntityInTimepoint" | "isPassport" | "isPassportBlacklisted" | "isPassportInTimepoint" | "isPassportWhitelisted" | "isPerson" | "isPersonAtTimepoint" | "isWhitelisted" | "linkEntityToPassport" | "linkEntityToPassportWithSignature" | "maxEntitiesPerPassport" | "minimumGalaxyMemberLevel" | "proxiableUUID" | "registerAction" | "registerActionForRound" | "registerAggregatedActionsForRound" | "removeEntityLink" | "removeFromBlacklist" | "removeFromWhitelist" | "removeSignalerFromApp" | "removeSignalerFromAppByAppAdmin" | "renounceRole" | "resetUserSignalsByAppAdminWithReason" | "resetUserSignalsWithReason" | "revokeDelegation" | "revokeRole" | "roundsForCumulativeScore" | "securityMultiplier" | "setAppSecurity" | "setBlacklistThreshold" | "setDecayRate" | "setGalaxyMember" | "setMaxEntitiesPerPassport" | "setMinimumGalaxyMemberLevel" | "setRoundsForCumulativeScore" | "setSecurityMultiplier" | "setSignalingThreshold" | "setThresholdPoPScore" | "setWhitelistThreshold" | "setX2EarnApps" | "setXAllocationVoting" | "signalUser" | "signalUserWithReason" | "signaledCounter" | "signalingThreshold" | "supportsInterface" | "thresholdPoPScore" | "thresholdPoPScoreAtTimepoint" | "toggleCheck" | "upgradeToAndCall" | "userAppTotalScore" | "userRoundScore" | "userRoundScoreApp" | "userTotalScore" | "version" | "whitelist" | "whitelistThreshold"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "CheckToggled" | "DelegationCreated" | "DelegationPending" | "DelegationRevoked" | "Initialized" | "LinkCreated" | "LinkPending" | "LinkRemoved" | "MinimumGalaxyMemberLevelSet" | "RegisteredAction" | "RemovedUserFromBlacklist" | "RemovedUserFromWhitelist" | "RoleAdminChanged" | "RoleGranted" | "RoleRevoked" | "SignalerAssignedToApp" | "SignalerRemovedFromApp" | "Upgraded" | "UserBlacklisted" | "UserSignaled" | "UserSignalsReset" | "UserSignalsResetForApp" | "UserWhitelisted"): EventFragment;
    encodeFunctionData(functionFragment: "ACTION_REGISTRAR_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "ACTION_SCORE_MANAGER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "CLOCK_MODE", values?: undefined): string;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "ROLE_GRANTER", values?: undefined): string;
    encodeFunctionData(functionFragment: "SETTINGS_MANAGER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "SIGNALER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "UPGRADER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "UPGRADE_INTERFACE_VERSION", values?: undefined): string;
    encodeFunctionData(functionFragment: "WHITELISTER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "acceptDelegation", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "acceptEntityLink", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "appOfSignaler", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "appSecurity", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "appSignalsCounter", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "appTotalSignalsCounter", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "assignSignalerToApp", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "assignSignalerToAppByAppAdmin", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "blacklist", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "blacklistThreshold", values?: undefined): string;
    encodeFunctionData(functionFragment: "cancelOutgoingPendingDelegation", values?: undefined): string;
    encodeFunctionData(functionFragment: "cancelOutgoingPendingEntityLink", values?: undefined): string;
    encodeFunctionData(functionFragment: "clock", values?: undefined): string;
    encodeFunctionData(functionFragment: "decayRate", values?: undefined): string;
    encodeFunctionData(functionFragment: "delegatePassport", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "delegateWithSignature", values: [AddressLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "denyIncomingPendingDelegation", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "denyIncomingPendingEntityLink", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "eip712Domain", values?: undefined): string;
    encodeFunctionData(functionFragment: "getCumulativeScoreWithDecay", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getDelegatee", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "getDelegateeInTimepoint", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getDelegator", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "getDelegatorInTimepoint", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getEntitiesLinkedToPassport", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "getGalaxyMember", values?: undefined): string;
    encodeFunctionData(functionFragment: "getMinimumGalaxyMemberLevel", values?: undefined): string;
    encodeFunctionData(functionFragment: "getPassportForEntity", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "getPassportForEntityAtTimepoint", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getPendingDelegations", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "getPendingLinkings", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getX2EarnApps", values?: undefined): string;
    encodeFunctionData(functionFragment: "getXAllocationVoting", values?: undefined): string;
    encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "initialize", values: [
        PassportTypes.InitializationDataStruct,
        PassportTypes.InitializationRoleDataStruct
    ]): string;
    encodeFunctionData(functionFragment: "isBlacklisted", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "isCheckEnabled", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "isDelegatee", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "isDelegateeInTimepoint", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "isDelegator", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "isDelegatorInTimepoint", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "isEntity", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "isEntityInTimepoint", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "isPassport", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "isPassportBlacklisted", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "isPassportInTimepoint", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "isPassportWhitelisted", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "isPerson", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "isPersonAtTimepoint", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "isWhitelisted", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "linkEntityToPassport", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "linkEntityToPassportWithSignature", values: [AddressLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "maxEntitiesPerPassport", values?: undefined): string;
    encodeFunctionData(functionFragment: "minimumGalaxyMemberLevel", values?: undefined): string;
    encodeFunctionData(functionFragment: "proxiableUUID", values?: undefined): string;
    encodeFunctionData(functionFragment: "registerAction", values: [AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "registerActionForRound", values: [AddressLike, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "registerAggregatedActionsForRound", values: [AddressLike, BytesLike, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "removeEntityLink", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "removeFromBlacklist", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "removeFromWhitelist", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "removeSignalerFromApp", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "removeSignalerFromAppByAppAdmin", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "resetUserSignalsByAppAdminWithReason", values: [AddressLike, string]): string;
    encodeFunctionData(functionFragment: "resetUserSignalsWithReason", values: [AddressLike, string]): string;
    encodeFunctionData(functionFragment: "revokeDelegation", values?: undefined): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "roundsForCumulativeScore", values?: undefined): string;
    encodeFunctionData(functionFragment: "securityMultiplier", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setAppSecurity", values: [BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setBlacklistThreshold", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setDecayRate", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setGalaxyMember", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setMaxEntitiesPerPassport", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setMinimumGalaxyMemberLevel", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setRoundsForCumulativeScore", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setSecurityMultiplier", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setSignalingThreshold", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setThresholdPoPScore", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setWhitelistThreshold", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setX2EarnApps", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setXAllocationVoting", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "signalUser", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "signalUserWithReason", values: [AddressLike, string]): string;
    encodeFunctionData(functionFragment: "signaledCounter", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "signalingThreshold", values?: undefined): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "thresholdPoPScore", values?: undefined): string;
    encodeFunctionData(functionFragment: "thresholdPoPScoreAtTimepoint", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "toggleCheck", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "upgradeToAndCall", values: [AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "userAppTotalScore", values: [AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "userRoundScore", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "userRoundScoreApp", values: [AddressLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "userTotalScore", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    encodeFunctionData(functionFragment: "whitelist", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "whitelistThreshold", values?: undefined): string;
    decodeFunctionResult(functionFragment: "ACTION_REGISTRAR_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ACTION_SCORE_MANAGER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "CLOCK_MODE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ROLE_GRANTER", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "SETTINGS_MANAGER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "SIGNALER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UPGRADER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UPGRADE_INTERFACE_VERSION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "WHITELISTER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "acceptDelegation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "acceptEntityLink", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "appOfSignaler", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "appSecurity", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "appSignalsCounter", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "appTotalSignalsCounter", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "assignSignalerToApp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "assignSignalerToAppByAppAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "blacklist", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "blacklistThreshold", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "cancelOutgoingPendingDelegation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "cancelOutgoingPendingEntityLink", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "clock", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decayRate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "delegatePassport", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "delegateWithSignature", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "denyIncomingPendingDelegation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "denyIncomingPendingEntityLink", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "eip712Domain", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getCumulativeScoreWithDecay", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDelegatee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDelegateeInTimepoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDelegator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDelegatorInTimepoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getEntitiesLinkedToPassport", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getGalaxyMember", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMinimumGalaxyMemberLevel", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPassportForEntity", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPassportForEntityAtTimepoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPendingDelegations", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPendingLinkings", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getX2EarnApps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getXAllocationVoting", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isBlacklisted", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isCheckEnabled", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isDelegatee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isDelegateeInTimepoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isDelegator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isDelegatorInTimepoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isEntity", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isEntityInTimepoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isPassport", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isPassportBlacklisted", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isPassportInTimepoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isPassportWhitelisted", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isPerson", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isPersonAtTimepoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isWhitelisted", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "linkEntityToPassport", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "linkEntityToPassportWithSignature", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maxEntitiesPerPassport", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "minimumGalaxyMemberLevel", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proxiableUUID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerAction", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerActionForRound", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerAggregatedActionsForRound", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeEntityLink", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeFromBlacklist", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeFromWhitelist", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeSignalerFromApp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeSignalerFromAppByAppAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "resetUserSignalsByAppAdminWithReason", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "resetUserSignalsWithReason", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeDelegation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "roundsForCumulativeScore", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "securityMultiplier", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAppSecurity", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setBlacklistThreshold", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDecayRate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setGalaxyMember", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMaxEntitiesPerPassport", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMinimumGalaxyMemberLevel", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setRoundsForCumulativeScore", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSecurityMultiplier", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSignalingThreshold", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setThresholdPoPScore", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setWhitelistThreshold", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setX2EarnApps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setXAllocationVoting", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "signalUser", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "signalUserWithReason", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "signaledCounter", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "signalingThreshold", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "thresholdPoPScore", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "thresholdPoPScoreAtTimepoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "toggleCheck", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeToAndCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "userAppTotalScore", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "userRoundScore", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "userRoundScoreApp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "userTotalScore", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "whitelistThreshold", data: BytesLike): Result;
}

interface X2EarnCreatorInterface extends Interface {
    getFunction(nameOrSignature: "BURNER_ROLE" | "DEFAULT_ADMIN_ROLE" | "MINTER_ROLE" | "PAUSER_ROLE" | "UPGRADER_ROLE" | "UPGRADE_INTERFACE_VERSION" | "approve" | "balanceOf" | "baseURI" | "burn" | "getApproved" | "getRoleAdmin" | "grantRole" | "hasRole" | "initialize" | "isApprovedForAll" | "name" | "ownerOf" | "pause" | "paused" | "proxiableUUID" | "renounceRole" | "revokeRole" | "safeMint" | "safeTransferFrom(address,address,uint256)" | "safeTransferFrom(address,address,uint256,bytes)" | "setApprovalForAll" | "setBaseURI" | "supportsInterface" | "symbol" | "tokenByIndex" | "tokenOfOwnerByIndex" | "tokenURI" | "totalSupply" | "transferFrom" | "unpause" | "upgradeToAndCall" | "version"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "Approval" | "ApprovalForAll" | "Initialized" | "Paused" | "RoleAdminChanged" | "RoleGranted" | "RoleRevoked" | "Transfer" | "Unpaused" | "Upgraded"): EventFragment;
    encodeFunctionData(functionFragment: "BURNER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "MINTER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "PAUSER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "UPGRADER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "UPGRADE_INTERFACE_VERSION", values?: undefined): string;
    encodeFunctionData(functionFragment: "approve", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "balanceOf", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
    encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getApproved", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "initialize", values: [string, AddressLike]): string;
    encodeFunctionData(functionFragment: "isApprovedForAll", values: [AddressLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(functionFragment: "ownerOf", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "pause", values?: undefined): string;
    encodeFunctionData(functionFragment: "paused", values?: undefined): string;
    encodeFunctionData(functionFragment: "proxiableUUID", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "safeMint", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "safeTransferFrom(address,address,uint256)", values: [AddressLike, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "safeTransferFrom(address,address,uint256,bytes)", values: [AddressLike, AddressLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "setApprovalForAll", values: [AddressLike, boolean]): string;
    encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
    encodeFunctionData(functionFragment: "tokenByIndex", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "tokenOfOwnerByIndex", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "tokenURI", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferFrom", values: [AddressLike, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
    encodeFunctionData(functionFragment: "upgradeToAndCall", values: [AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    decodeFunctionResult(functionFragment: "BURNER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "MINTER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "PAUSER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UPGRADER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UPGRADE_INTERFACE_VERSION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getApproved", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isApprovedForAll", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proxiableUUID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "safeMint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "safeTransferFrom(address,address,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "safeTransferFrom(address,address,uint256,bytes)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setApprovalForAll", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tokenByIndex", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tokenOfOwnerByIndex", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeToAndCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

interface NodeManagementInterface extends Interface {
    getFunction(nameOrSignature: "DEFAULT_ADMIN_ROLE" | "UPGRADER_ROLE" | "UPGRADE_INTERFACE_VERSION" | "delegateNode" | "getNodeIds" | "getNodeLevel" | "getNodeManager" | "getRoleAdmin" | "getUsersNodeLevels" | "getVechainNodesContract" | "grantRole" | "hasRole" | "initialize" | "isNodeManager" | "proxiableUUID" | "removeNodeDelegation" | "renounceRole" | "revokeRole" | "setVechainNodesContract" | "supportsInterface" | "upgradeToAndCall" | "version"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized" | "NodeDelegated" | "RoleAdminChanged" | "RoleGranted" | "RoleRevoked" | "Upgraded" | "VechainNodeContractSet"): EventFragment;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "UPGRADER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "UPGRADE_INTERFACE_VERSION", values?: undefined): string;
    encodeFunctionData(functionFragment: "delegateNode", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "getNodeIds", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "getNodeLevel", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getNodeManager", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getUsersNodeLevels", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "getVechainNodesContract", values?: undefined): string;
    encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "initialize", values: [AddressLike, AddressLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "isNodeManager", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "proxiableUUID", values?: undefined): string;
    encodeFunctionData(functionFragment: "removeNodeDelegation", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "setVechainNodesContract", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "upgradeToAndCall", values: [AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UPGRADER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UPGRADE_INTERFACE_VERSION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "delegateNode", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getNodeIds", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getNodeLevel", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getNodeManager", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getUsersNodeLevels", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getVechainNodesContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isNodeManager", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proxiableUUID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeNodeDelegation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setVechainNodesContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeToAndCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

declare namespace X2EarnAppsDataTypes {
    type AppWithDetailsReturnTypeStruct = {
        id: BytesLike;
        teamWalletAddress: AddressLike;
        name: string;
        metadataURI: string;
        createdAtTimestamp: BigNumberish;
        appAvailableForAllocationVoting: boolean;
    };
    type AppWithDetailsReturnTypeStructOutput = [
        id: string,
        teamWalletAddress: string,
        name: string,
        metadataURI: string,
        createdAtTimestamp: bigint,
        appAvailableForAllocationVoting: boolean
    ] & {
        id: string;
        teamWalletAddress: string;
        name: string;
        metadataURI: string;
        createdAtTimestamp: bigint;
        appAvailableForAllocationVoting: boolean;
    };
}
declare namespace RoundsStorageUpgradeable {
    type RoundCoreStruct = {
        proposer: AddressLike;
        voteStart: BigNumberish;
        voteDuration: BigNumberish;
    };
    type RoundCoreStructOutput = [
        proposer: string,
        voteStart: bigint,
        voteDuration: bigint
    ] & {
        proposer: string;
        voteStart: bigint;
        voteDuration: bigint;
    };
}
interface XAllocationVotingInterface extends Interface {
    getFunction(nameOrSignature: "CLOCK_MODE" | "CONTRACTS_ADDRESS_MANAGER_ROLE" | "COUNTING_MODE" | "DEFAULT_ADMIN_ROLE" | "GOVERNANCE_ROLE" | "ROUND_STARTER_ROLE" | "UPGRADER_ROLE" | "UPGRADE_INTERFACE_VERSION" | "appSharesCap" | "baseAllocationPercentage" | "castVote" | "clock" | "currentRoundDeadline" | "currentRoundId" | "currentRoundSnapshot" | "emissions" | "finalizeRound" | "getAppIdsOfRound" | "getAppVotes" | "getAppVotesQF" | "getAppsOfRound" | "getRoleAdmin" | "getRound" | "getRoundAppSharesCap" | "getRoundBaseAllocationPercentage" | "getVotes" | "grantRole" | "hasRole" | "hasVoted" | "hasVotedOnce" | "initialize" | "initializeV2" | "isActive" | "isEligibleForVote" | "isFinalized" | "latestSucceededRoundId" | "name" | "proxiableUUID" | "quorum" | "quorumDenominator" | "quorumNumerator(uint256)" | "quorumNumerator()" | "quorumReached" | "renounceRole" | "revokeRole" | "roundDeadline" | "roundProposer" | "roundQuorum" | "roundSnapshot" | "setAppSharesCap" | "setBaseAllocationPercentage" | "setEmissionsAddress" | "setVeBetterPassport" | "setVoterRewardsAddress" | "setVotingPeriod" | "setVotingThreshold" | "setX2EarnAppsAddress" | "startNewRound" | "state" | "supportsInterface" | "token" | "totalVoters" | "totalVotes" | "totalVotesQF" | "updateQuorumNumerator" | "upgradeToAndCall" | "veBetterPassport" | "version" | "voterRewards" | "votingPeriod" | "votingThreshold" | "x2EarnApps"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "AllocationVoteCast" | "EmissionsSet" | "Initialized" | "QuorumNumeratorUpdated" | "RoleAdminChanged" | "RoleGranted" | "RoleRevoked" | "RoundCreated" | "Upgraded" | "VeBetterPassportSet" | "VoterRewardsSet" | "VotingPeriodSet" | "VotingThresholdSet" | "X2EarnAppsSet"): EventFragment;
    encodeFunctionData(functionFragment: "CLOCK_MODE", values?: undefined): string;
    encodeFunctionData(functionFragment: "CONTRACTS_ADDRESS_MANAGER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "COUNTING_MODE", values?: undefined): string;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "GOVERNANCE_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "ROUND_STARTER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "UPGRADER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "UPGRADE_INTERFACE_VERSION", values?: undefined): string;
    encodeFunctionData(functionFragment: "appSharesCap", values?: undefined): string;
    encodeFunctionData(functionFragment: "baseAllocationPercentage", values?: undefined): string;
    encodeFunctionData(functionFragment: "castVote", values: [BigNumberish, BytesLike[], BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "clock", values?: undefined): string;
    encodeFunctionData(functionFragment: "currentRoundDeadline", values?: undefined): string;
    encodeFunctionData(functionFragment: "currentRoundId", values?: undefined): string;
    encodeFunctionData(functionFragment: "currentRoundSnapshot", values?: undefined): string;
    encodeFunctionData(functionFragment: "emissions", values?: undefined): string;
    encodeFunctionData(functionFragment: "finalizeRound", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getAppIdsOfRound", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getAppVotes", values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "getAppVotesQF", values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "getAppsOfRound", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getRound", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getRoundAppSharesCap", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getRoundBaseAllocationPercentage", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getVotes", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "hasVoted", values: [BigNumberish, AddressLike]): string;
    encodeFunctionData(functionFragment: "hasVotedOnce", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "initialize", values: [XAllocationVoting$1.InitializationDataStruct]): string;
    encodeFunctionData(functionFragment: "initializeV2", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "isActive", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "isEligibleForVote", values: [BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "isFinalized", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "latestSucceededRoundId", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(functionFragment: "proxiableUUID", values?: undefined): string;
    encodeFunctionData(functionFragment: "quorum", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "quorumDenominator", values?: undefined): string;
    encodeFunctionData(functionFragment: "quorumNumerator(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "quorumNumerator()", values?: undefined): string;
    encodeFunctionData(functionFragment: "quorumReached", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "roundDeadline", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "roundProposer", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "roundQuorum", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "roundSnapshot", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setAppSharesCap", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setBaseAllocationPercentage", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setEmissionsAddress", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setVeBetterPassport", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setVoterRewardsAddress", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setVotingPeriod", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setVotingThreshold", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setX2EarnAppsAddress", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "startNewRound", values?: undefined): string;
    encodeFunctionData(functionFragment: "state", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "token", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalVoters", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "totalVotes", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "totalVotesQF", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "updateQuorumNumerator", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "upgradeToAndCall", values: [AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "veBetterPassport", values?: undefined): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    encodeFunctionData(functionFragment: "voterRewards", values?: undefined): string;
    encodeFunctionData(functionFragment: "votingPeriod", values?: undefined): string;
    encodeFunctionData(functionFragment: "votingThreshold", values?: undefined): string;
    encodeFunctionData(functionFragment: "x2EarnApps", values?: undefined): string;
    decodeFunctionResult(functionFragment: "CLOCK_MODE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "CONTRACTS_ADDRESS_MANAGER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "COUNTING_MODE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "GOVERNANCE_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ROUND_STARTER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UPGRADER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UPGRADE_INTERFACE_VERSION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "appSharesCap", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "baseAllocationPercentage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "clock", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "currentRoundDeadline", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "currentRoundId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "currentRoundSnapshot", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "emissions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "finalizeRound", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAppIdsOfRound", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAppVotes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAppVotesQF", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAppsOfRound", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRound", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoundAppSharesCap", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoundBaseAllocationPercentage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getVotes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasVotedOnce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initializeV2", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isEligibleForVote", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isFinalized", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "latestSucceededRoundId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proxiableUUID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quorum", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quorumDenominator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quorumNumerator(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quorumNumerator()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quorumReached", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "roundDeadline", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "roundProposer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "roundQuorum", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "roundSnapshot", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAppSharesCap", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setBaseAllocationPercentage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setEmissionsAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setVeBetterPassport", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setVoterRewardsAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setVotingPeriod", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setVotingThreshold", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setX2EarnAppsAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "startNewRound", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalVoters", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalVotes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalVotesQF", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateQuorumNumerator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeToAndCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "veBetterPassport", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "voterRewards", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "votingPeriod", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "votingThreshold", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "x2EarnApps", data: BytesLike): Result;
}
declare namespace AllocationVoteCastEvent {
    type InputTuple = [
        voter: AddressLike,
        roundId: BigNumberish,
        appsIds: BytesLike[],
        voteWeights: BigNumberish[]
    ];
    type OutputTuple = [
        voter: string,
        roundId: bigint,
        appsIds: string[],
        voteWeights: bigint[]
    ];
    interface OutputObject {
        voter: string;
        roundId: bigint;
        appsIds: string[];
        voteWeights: bigint[];
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace EmissionsSetEvent {
    type InputTuple = [
        oldContractAddress: AddressLike,
        newContractAddress: AddressLike
    ];
    type OutputTuple = [
        oldContractAddress: string,
        newContractAddress: string
    ];
    interface OutputObject {
        oldContractAddress: string;
        newContractAddress: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace InitializedEvent$2 {
    type InputTuple = [version: BigNumberish];
    type OutputTuple = [version: bigint];
    interface OutputObject {
        version: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace QuorumNumeratorUpdatedEvent {
    type InputTuple = [
        oldQuorumNumerator: BigNumberish,
        newQuorumNumerator: BigNumberish
    ];
    type OutputTuple = [
        oldQuorumNumerator: bigint,
        newQuorumNumerator: bigint
    ];
    interface OutputObject {
        oldQuorumNumerator: bigint;
        newQuorumNumerator: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace RoleAdminChangedEvent$2 {
    type InputTuple = [
        role: BytesLike,
        previousAdminRole: BytesLike,
        newAdminRole: BytesLike
    ];
    type OutputTuple = [
        role: string,
        previousAdminRole: string,
        newAdminRole: string
    ];
    interface OutputObject {
        role: string;
        previousAdminRole: string;
        newAdminRole: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace RoleGrantedEvent$2 {
    type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    type OutputTuple = [role: string, account: string, sender: string];
    interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace RoleRevokedEvent$2 {
    type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    type OutputTuple = [role: string, account: string, sender: string];
    interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace RoundCreatedEvent {
    type InputTuple = [
        roundId: BigNumberish,
        proposer: AddressLike,
        voteStart: BigNumberish,
        voteEnd: BigNumberish,
        appsIds: BytesLike[]
    ];
    type OutputTuple = [
        roundId: bigint,
        proposer: string,
        voteStart: bigint,
        voteEnd: bigint,
        appsIds: string[]
    ];
    interface OutputObject {
        roundId: bigint;
        proposer: string;
        voteStart: bigint;
        voteEnd: bigint;
        appsIds: string[];
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace UpgradedEvent$1 {
    type InputTuple = [implementation: AddressLike];
    type OutputTuple = [implementation: string];
    interface OutputObject {
        implementation: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace VeBetterPassportSetEvent {
    type InputTuple = [
        oldContractAddress: AddressLike,
        newContractAddress: AddressLike
    ];
    type OutputTuple = [
        oldContractAddress: string,
        newContractAddress: string
    ];
    interface OutputObject {
        oldContractAddress: string;
        newContractAddress: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace VoterRewardsSetEvent {
    type InputTuple = [
        oldContractAddress: AddressLike,
        newContractAddress: AddressLike
    ];
    type OutputTuple = [
        oldContractAddress: string,
        newContractAddress: string
    ];
    interface OutputObject {
        oldContractAddress: string;
        newContractAddress: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace VotingPeriodSetEvent {
    type InputTuple = [
        oldVotingPeriod: BigNumberish,
        newVotingPeriod: BigNumberish
    ];
    type OutputTuple = [oldVotingPeriod: bigint, newVotingPeriod: bigint];
    interface OutputObject {
        oldVotingPeriod: bigint;
        newVotingPeriod: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace VotingThresholdSetEvent {
    type InputTuple = [
        oldVotingThreshold: BigNumberish,
        newVotingThreshold: BigNumberish
    ];
    type OutputTuple = [
        oldVotingThreshold: bigint,
        newVotingThreshold: bigint
    ];
    interface OutputObject {
        oldVotingThreshold: bigint;
        newVotingThreshold: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace X2EarnAppsSetEvent {
    type InputTuple = [
        oldContractAddress: AddressLike,
        newContractAddress: AddressLike
    ];
    type OutputTuple = [
        oldContractAddress: string,
        newContractAddress: string
    ];
    interface OutputObject {
        oldContractAddress: string;
        newContractAddress: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace XAllocationVoting$1 {
    type InitializationDataStruct = {
        vot3Token: AddressLike;
        quorumPercentage: BigNumberish;
        initialVotingPeriod: BigNumberish;
        timeLock: AddressLike;
        voterRewards: AddressLike;
        emissions: AddressLike;
        admins: AddressLike[];
        upgrader: AddressLike;
        contractsAddressManager: AddressLike;
        x2EarnAppsAddress: AddressLike;
        baseAllocationPercentage: BigNumberish;
        appSharesCap: BigNumberish;
        votingThreshold: BigNumberish;
    };
    type InitializationDataStructOutput = [
        vot3Token: string,
        quorumPercentage: bigint,
        initialVotingPeriod: bigint,
        timeLock: string,
        voterRewards: string,
        emissions: string,
        admins: string[],
        upgrader: string,
        contractsAddressManager: string,
        x2EarnAppsAddress: string,
        baseAllocationPercentage: bigint,
        appSharesCap: bigint,
        votingThreshold: bigint
    ] & {
        vot3Token: string;
        quorumPercentage: bigint;
        initialVotingPeriod: bigint;
        timeLock: string;
        voterRewards: string;
        emissions: string;
        admins: string[];
        upgrader: string;
        contractsAddressManager: string;
        x2EarnAppsAddress: string;
        baseAllocationPercentage: bigint;
        appSharesCap: bigint;
        votingThreshold: bigint;
    };
}
interface XAllocationVoting$1 extends BaseContract {
    connect(runner?: ContractRunner | null): XAllocationVoting$1;
    waitForDeployment(): Promise<this>;
    interface: XAllocationVotingInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    CLOCK_MODE: TypedContractMethod<[], [string], "view">;
    CONTRACTS_ADDRESS_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;
    COUNTING_MODE: TypedContractMethod<[], [string], "view">;
    DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;
    GOVERNANCE_ROLE: TypedContractMethod<[], [string], "view">;
    ROUND_STARTER_ROLE: TypedContractMethod<[], [string], "view">;
    UPGRADER_ROLE: TypedContractMethod<[], [string], "view">;
    UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;
    appSharesCap: TypedContractMethod<[], [bigint], "view">;
    baseAllocationPercentage: TypedContractMethod<[], [bigint], "view">;
    castVote: TypedContractMethod<[
        roundId: BigNumberish,
        appIds: BytesLike[],
        voteWeights: BigNumberish[]
    ], [
        void
    ], "nonpayable">;
    clock: TypedContractMethod<[], [bigint], "view">;
    currentRoundDeadline: TypedContractMethod<[], [bigint], "view">;
    currentRoundId: TypedContractMethod<[], [bigint], "view">;
    currentRoundSnapshot: TypedContractMethod<[], [bigint], "view">;
    emissions: TypedContractMethod<[], [string], "view">;
    finalizeRound: TypedContractMethod<[
        roundId: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getAppIdsOfRound: TypedContractMethod<[
        roundId: BigNumberish
    ], [
        string[]
    ], "view">;
    getAppVotes: TypedContractMethod<[
        roundId: BigNumberish,
        app: BytesLike
    ], [
        bigint
    ], "view">;
    getAppVotesQF: TypedContractMethod<[
        roundId: BigNumberish,
        app: BytesLike
    ], [
        bigint
    ], "view">;
    getAppsOfRound: TypedContractMethod<[
        roundId: BigNumberish
    ], [
        X2EarnAppsDataTypes.AppWithDetailsReturnTypeStructOutput[]
    ], "view">;
    getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;
    getRound: TypedContractMethod<[
        roundId: BigNumberish
    ], [
        RoundsStorageUpgradeable.RoundCoreStructOutput
    ], "view">;
    getRoundAppSharesCap: TypedContractMethod<[
        roundId: BigNumberish
    ], [
        bigint
    ], "view">;
    getRoundBaseAllocationPercentage: TypedContractMethod<[
        roundId: BigNumberish
    ], [
        bigint
    ], "view">;
    getVotes: TypedContractMethod<[
        account: AddressLike,
        timepoint: BigNumberish
    ], [
        bigint
    ], "view">;
    grantRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    hasRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        boolean
    ], "view">;
    hasVoted: TypedContractMethod<[
        roundId: BigNumberish,
        user: AddressLike
    ], [
        boolean
    ], "view">;
    hasVotedOnce: TypedContractMethod<[user: AddressLike], [boolean], "view">;
    initialize: TypedContractMethod<[
        data: XAllocationVoting$1.InitializationDataStruct
    ], [
        void
    ], "nonpayable">;
    initializeV2: TypedContractMethod<[
        _veBetterPassport: AddressLike
    ], [
        void
    ], "nonpayable">;
    isActive: TypedContractMethod<[roundId: BigNumberish], [boolean], "view">;
    isEligibleForVote: TypedContractMethod<[
        appId: BytesLike,
        roundId: BigNumberish
    ], [
        boolean
    ], "view">;
    isFinalized: TypedContractMethod<[roundId: BigNumberish], [boolean], "view">;
    latestSucceededRoundId: TypedContractMethod<[
        roundId: BigNumberish
    ], [
        bigint
    ], "view">;
    name: TypedContractMethod<[], [string], "view">;
    proxiableUUID: TypedContractMethod<[], [string], "view">;
    quorum: TypedContractMethod<[blockNumber: BigNumberish], [bigint], "view">;
    quorumDenominator: TypedContractMethod<[], [bigint], "view">;
    "quorumNumerator(uint256)": TypedContractMethod<[
        timepoint: BigNumberish
    ], [
        bigint
    ], "view">;
    "quorumNumerator()": TypedContractMethod<[], [bigint], "view">;
    quorumReached: TypedContractMethod<[
        roundId: BigNumberish
    ], [
        boolean
    ], "view">;
    renounceRole: TypedContractMethod<[
        role: BytesLike,
        callerConfirmation: AddressLike
    ], [
        void
    ], "nonpayable">;
    revokeRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    roundDeadline: TypedContractMethod<[roundId: BigNumberish], [bigint], "view">;
    roundProposer: TypedContractMethod<[roundId: BigNumberish], [string], "view">;
    roundQuorum: TypedContractMethod<[roundId: BigNumberish], [bigint], "view">;
    roundSnapshot: TypedContractMethod<[roundId: BigNumberish], [bigint], "view">;
    setAppSharesCap: TypedContractMethod<[
        appSharesCap_: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setBaseAllocationPercentage: TypedContractMethod<[
        baseAllocationPercentage_: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setEmissionsAddress: TypedContractMethod<[
        newEmissions: AddressLike
    ], [
        void
    ], "nonpayable">;
    setVeBetterPassport: TypedContractMethod<[
        newVeBetterPassport: AddressLike
    ], [
        void
    ], "nonpayable">;
    setVoterRewardsAddress: TypedContractMethod<[
        newVoterRewards: AddressLike
    ], [
        void
    ], "nonpayable">;
    setVotingPeriod: TypedContractMethod<[
        newVotingPeriod: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setVotingThreshold: TypedContractMethod<[
        newVotingThreshold: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setX2EarnAppsAddress: TypedContractMethod<[
        newX2EarnApps: AddressLike
    ], [
        void
    ], "nonpayable">;
    startNewRound: TypedContractMethod<[], [bigint], "nonpayable">;
    state: TypedContractMethod<[roundId: BigNumberish], [bigint], "view">;
    supportsInterface: TypedContractMethod<[
        interfaceId: BytesLike
    ], [
        boolean
    ], "view">;
    token: TypedContractMethod<[], [string], "view">;
    totalVoters: TypedContractMethod<[roundId: BigNumberish], [bigint], "view">;
    totalVotes: TypedContractMethod<[roundId: BigNumberish], [bigint], "view">;
    totalVotesQF: TypedContractMethod<[roundId: BigNumberish], [bigint], "view">;
    updateQuorumNumerator: TypedContractMethod<[
        newQuorumNumerator: BigNumberish
    ], [
        void
    ], "nonpayable">;
    upgradeToAndCall: TypedContractMethod<[
        newImplementation: AddressLike,
        data: BytesLike
    ], [
        void
    ], "payable">;
    veBetterPassport: TypedContractMethod<[], [string], "view">;
    version: TypedContractMethod<[], [string], "view">;
    voterRewards: TypedContractMethod<[], [string], "view">;
    votingPeriod: TypedContractMethod<[], [bigint], "view">;
    votingThreshold: TypedContractMethod<[], [bigint], "view">;
    x2EarnApps: TypedContractMethod<[], [string], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "CLOCK_MODE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "CONTRACTS_ADDRESS_MANAGER_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "COUNTING_MODE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "DEFAULT_ADMIN_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "GOVERNANCE_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "ROUND_STARTER_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "UPGRADER_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "UPGRADE_INTERFACE_VERSION"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "appSharesCap"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "baseAllocationPercentage"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "castVote"): TypedContractMethod<[
        roundId: BigNumberish,
        appIds: BytesLike[],
        voteWeights: BigNumberish[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "clock"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "currentRoundDeadline"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "currentRoundId"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "currentRoundSnapshot"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "emissions"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "finalizeRound"): TypedContractMethod<[roundId: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "getAppIdsOfRound"): TypedContractMethod<[roundId: BigNumberish], [string[]], "view">;
    getFunction(nameOrSignature: "getAppVotes"): TypedContractMethod<[
        roundId: BigNumberish,
        app: BytesLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "getAppVotesQF"): TypedContractMethod<[
        roundId: BigNumberish,
        app: BytesLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "getAppsOfRound"): TypedContractMethod<[
        roundId: BigNumberish
    ], [
        X2EarnAppsDataTypes.AppWithDetailsReturnTypeStructOutput[]
    ], "view">;
    getFunction(nameOrSignature: "getRoleAdmin"): TypedContractMethod<[role: BytesLike], [string], "view">;
    getFunction(nameOrSignature: "getRound"): TypedContractMethod<[
        roundId: BigNumberish
    ], [
        RoundsStorageUpgradeable.RoundCoreStructOutput
    ], "view">;
    getFunction(nameOrSignature: "getRoundAppSharesCap"): TypedContractMethod<[roundId: BigNumberish], [bigint], "view">;
    getFunction(nameOrSignature: "getRoundBaseAllocationPercentage"): TypedContractMethod<[roundId: BigNumberish], [bigint], "view">;
    getFunction(nameOrSignature: "getVotes"): TypedContractMethod<[
        account: AddressLike,
        timepoint: BigNumberish
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "grantRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "hasRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "hasVoted"): TypedContractMethod<[
        roundId: BigNumberish,
        user: AddressLike
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "hasVotedOnce"): TypedContractMethod<[user: AddressLike], [boolean], "view">;
    getFunction(nameOrSignature: "initialize"): TypedContractMethod<[
        data: XAllocationVoting$1.InitializationDataStruct
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "initializeV2"): TypedContractMethod<[
        _veBetterPassport: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "isActive"): TypedContractMethod<[roundId: BigNumberish], [boolean], "view">;
    getFunction(nameOrSignature: "isEligibleForVote"): TypedContractMethod<[
        appId: BytesLike,
        roundId: BigNumberish
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "isFinalized"): TypedContractMethod<[roundId: BigNumberish], [boolean], "view">;
    getFunction(nameOrSignature: "latestSucceededRoundId"): TypedContractMethod<[roundId: BigNumberish], [bigint], "view">;
    getFunction(nameOrSignature: "name"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "proxiableUUID"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "quorum"): TypedContractMethod<[blockNumber: BigNumberish], [bigint], "view">;
    getFunction(nameOrSignature: "quorumDenominator"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "quorumNumerator(uint256)"): TypedContractMethod<[timepoint: BigNumberish], [bigint], "view">;
    getFunction(nameOrSignature: "quorumNumerator()"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "quorumReached"): TypedContractMethod<[roundId: BigNumberish], [boolean], "view">;
    getFunction(nameOrSignature: "renounceRole"): TypedContractMethod<[
        role: BytesLike,
        callerConfirmation: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "revokeRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "roundDeadline"): TypedContractMethod<[roundId: BigNumberish], [bigint], "view">;
    getFunction(nameOrSignature: "roundProposer"): TypedContractMethod<[roundId: BigNumberish], [string], "view">;
    getFunction(nameOrSignature: "roundQuorum"): TypedContractMethod<[roundId: BigNumberish], [bigint], "view">;
    getFunction(nameOrSignature: "roundSnapshot"): TypedContractMethod<[roundId: BigNumberish], [bigint], "view">;
    getFunction(nameOrSignature: "setAppSharesCap"): TypedContractMethod<[appSharesCap_: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "setBaseAllocationPercentage"): TypedContractMethod<[
        baseAllocationPercentage_: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setEmissionsAddress"): TypedContractMethod<[newEmissions: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "setVeBetterPassport"): TypedContractMethod<[
        newVeBetterPassport: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setVoterRewardsAddress"): TypedContractMethod<[newVoterRewards: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "setVotingPeriod"): TypedContractMethod<[newVotingPeriod: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "setVotingThreshold"): TypedContractMethod<[
        newVotingThreshold: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setX2EarnAppsAddress"): TypedContractMethod<[newX2EarnApps: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "startNewRound"): TypedContractMethod<[], [bigint], "nonpayable">;
    getFunction(nameOrSignature: "state"): TypedContractMethod<[roundId: BigNumberish], [bigint], "view">;
    getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
    getFunction(nameOrSignature: "token"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "totalVoters"): TypedContractMethod<[roundId: BigNumberish], [bigint], "view">;
    getFunction(nameOrSignature: "totalVotes"): TypedContractMethod<[roundId: BigNumberish], [bigint], "view">;
    getFunction(nameOrSignature: "totalVotesQF"): TypedContractMethod<[roundId: BigNumberish], [bigint], "view">;
    getFunction(nameOrSignature: "updateQuorumNumerator"): TypedContractMethod<[
        newQuorumNumerator: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "upgradeToAndCall"): TypedContractMethod<[
        newImplementation: AddressLike,
        data: BytesLike
    ], [
        void
    ], "payable">;
    getFunction(nameOrSignature: "veBetterPassport"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "version"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "voterRewards"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "votingPeriod"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "votingThreshold"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "x2EarnApps"): TypedContractMethod<[], [string], "view">;
    getEvent(key: "AllocationVoteCast"): TypedContractEvent<AllocationVoteCastEvent.InputTuple, AllocationVoteCastEvent.OutputTuple, AllocationVoteCastEvent.OutputObject>;
    getEvent(key: "EmissionsSet"): TypedContractEvent<EmissionsSetEvent.InputTuple, EmissionsSetEvent.OutputTuple, EmissionsSetEvent.OutputObject>;
    getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent$2.InputTuple, InitializedEvent$2.OutputTuple, InitializedEvent$2.OutputObject>;
    getEvent(key: "QuorumNumeratorUpdated"): TypedContractEvent<QuorumNumeratorUpdatedEvent.InputTuple, QuorumNumeratorUpdatedEvent.OutputTuple, QuorumNumeratorUpdatedEvent.OutputObject>;
    getEvent(key: "RoleAdminChanged"): TypedContractEvent<RoleAdminChangedEvent$2.InputTuple, RoleAdminChangedEvent$2.OutputTuple, RoleAdminChangedEvent$2.OutputObject>;
    getEvent(key: "RoleGranted"): TypedContractEvent<RoleGrantedEvent$2.InputTuple, RoleGrantedEvent$2.OutputTuple, RoleGrantedEvent$2.OutputObject>;
    getEvent(key: "RoleRevoked"): TypedContractEvent<RoleRevokedEvent$2.InputTuple, RoleRevokedEvent$2.OutputTuple, RoleRevokedEvent$2.OutputObject>;
    getEvent(key: "RoundCreated"): TypedContractEvent<RoundCreatedEvent.InputTuple, RoundCreatedEvent.OutputTuple, RoundCreatedEvent.OutputObject>;
    getEvent(key: "Upgraded"): TypedContractEvent<UpgradedEvent$1.InputTuple, UpgradedEvent$1.OutputTuple, UpgradedEvent$1.OutputObject>;
    getEvent(key: "VeBetterPassportSet"): TypedContractEvent<VeBetterPassportSetEvent.InputTuple, VeBetterPassportSetEvent.OutputTuple, VeBetterPassportSetEvent.OutputObject>;
    getEvent(key: "VoterRewardsSet"): TypedContractEvent<VoterRewardsSetEvent.InputTuple, VoterRewardsSetEvent.OutputTuple, VoterRewardsSetEvent.OutputObject>;
    getEvent(key: "VotingPeriodSet"): TypedContractEvent<VotingPeriodSetEvent.InputTuple, VotingPeriodSetEvent.OutputTuple, VotingPeriodSetEvent.OutputObject>;
    getEvent(key: "VotingThresholdSet"): TypedContractEvent<VotingThresholdSetEvent.InputTuple, VotingThresholdSetEvent.OutputTuple, VotingThresholdSetEvent.OutputObject>;
    getEvent(key: "X2EarnAppsSet"): TypedContractEvent<X2EarnAppsSetEvent.InputTuple, X2EarnAppsSetEvent.OutputTuple, X2EarnAppsSetEvent.OutputObject>;
    filters: {
        "AllocationVoteCast(address,uint256,bytes32[],uint256[])": TypedContractEvent<AllocationVoteCastEvent.InputTuple, AllocationVoteCastEvent.OutputTuple, AllocationVoteCastEvent.OutputObject>;
        AllocationVoteCast: TypedContractEvent<AllocationVoteCastEvent.InputTuple, AllocationVoteCastEvent.OutputTuple, AllocationVoteCastEvent.OutputObject>;
        "EmissionsSet(address,address)": TypedContractEvent<EmissionsSetEvent.InputTuple, EmissionsSetEvent.OutputTuple, EmissionsSetEvent.OutputObject>;
        EmissionsSet: TypedContractEvent<EmissionsSetEvent.InputTuple, EmissionsSetEvent.OutputTuple, EmissionsSetEvent.OutputObject>;
        "Initialized(uint64)": TypedContractEvent<InitializedEvent$2.InputTuple, InitializedEvent$2.OutputTuple, InitializedEvent$2.OutputObject>;
        Initialized: TypedContractEvent<InitializedEvent$2.InputTuple, InitializedEvent$2.OutputTuple, InitializedEvent$2.OutputObject>;
        "QuorumNumeratorUpdated(uint256,uint256)": TypedContractEvent<QuorumNumeratorUpdatedEvent.InputTuple, QuorumNumeratorUpdatedEvent.OutputTuple, QuorumNumeratorUpdatedEvent.OutputObject>;
        QuorumNumeratorUpdated: TypedContractEvent<QuorumNumeratorUpdatedEvent.InputTuple, QuorumNumeratorUpdatedEvent.OutputTuple, QuorumNumeratorUpdatedEvent.OutputObject>;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<RoleAdminChangedEvent$2.InputTuple, RoleAdminChangedEvent$2.OutputTuple, RoleAdminChangedEvent$2.OutputObject>;
        RoleAdminChanged: TypedContractEvent<RoleAdminChangedEvent$2.InputTuple, RoleAdminChangedEvent$2.OutputTuple, RoleAdminChangedEvent$2.OutputObject>;
        "RoleGranted(bytes32,address,address)": TypedContractEvent<RoleGrantedEvent$2.InputTuple, RoleGrantedEvent$2.OutputTuple, RoleGrantedEvent$2.OutputObject>;
        RoleGranted: TypedContractEvent<RoleGrantedEvent$2.InputTuple, RoleGrantedEvent$2.OutputTuple, RoleGrantedEvent$2.OutputObject>;
        "RoleRevoked(bytes32,address,address)": TypedContractEvent<RoleRevokedEvent$2.InputTuple, RoleRevokedEvent$2.OutputTuple, RoleRevokedEvent$2.OutputObject>;
        RoleRevoked: TypedContractEvent<RoleRevokedEvent$2.InputTuple, RoleRevokedEvent$2.OutputTuple, RoleRevokedEvent$2.OutputObject>;
        "RoundCreated(uint256,address,uint256,uint256,bytes32[])": TypedContractEvent<RoundCreatedEvent.InputTuple, RoundCreatedEvent.OutputTuple, RoundCreatedEvent.OutputObject>;
        RoundCreated: TypedContractEvent<RoundCreatedEvent.InputTuple, RoundCreatedEvent.OutputTuple, RoundCreatedEvent.OutputObject>;
        "Upgraded(address)": TypedContractEvent<UpgradedEvent$1.InputTuple, UpgradedEvent$1.OutputTuple, UpgradedEvent$1.OutputObject>;
        Upgraded: TypedContractEvent<UpgradedEvent$1.InputTuple, UpgradedEvent$1.OutputTuple, UpgradedEvent$1.OutputObject>;
        "VeBetterPassportSet(address,address)": TypedContractEvent<VeBetterPassportSetEvent.InputTuple, VeBetterPassportSetEvent.OutputTuple, VeBetterPassportSetEvent.OutputObject>;
        VeBetterPassportSet: TypedContractEvent<VeBetterPassportSetEvent.InputTuple, VeBetterPassportSetEvent.OutputTuple, VeBetterPassportSetEvent.OutputObject>;
        "VoterRewardsSet(address,address)": TypedContractEvent<VoterRewardsSetEvent.InputTuple, VoterRewardsSetEvent.OutputTuple, VoterRewardsSetEvent.OutputObject>;
        VoterRewardsSet: TypedContractEvent<VoterRewardsSetEvent.InputTuple, VoterRewardsSetEvent.OutputTuple, VoterRewardsSetEvent.OutputObject>;
        "VotingPeriodSet(uint256,uint256)": TypedContractEvent<VotingPeriodSetEvent.InputTuple, VotingPeriodSetEvent.OutputTuple, VotingPeriodSetEvent.OutputObject>;
        VotingPeriodSet: TypedContractEvent<VotingPeriodSetEvent.InputTuple, VotingPeriodSetEvent.OutputTuple, VotingPeriodSetEvent.OutputObject>;
        "VotingThresholdSet(uint256,uint256)": TypedContractEvent<VotingThresholdSetEvent.InputTuple, VotingThresholdSetEvent.OutputTuple, VotingThresholdSetEvent.OutputObject>;
        VotingThresholdSet: TypedContractEvent<VotingThresholdSetEvent.InputTuple, VotingThresholdSetEvent.OutputTuple, VotingThresholdSetEvent.OutputObject>;
        "X2EarnAppsSet(address,address)": TypedContractEvent<X2EarnAppsSetEvent.InputTuple, X2EarnAppsSetEvent.OutputTuple, X2EarnAppsSetEvent.OutputObject>;
        X2EarnAppsSet: TypedContractEvent<X2EarnAppsSetEvent.InputTuple, X2EarnAppsSetEvent.OutputTuple, X2EarnAppsSetEvent.OutputObject>;
    };
}

interface XAllocationPoolInterface extends Interface {
    getFunction(nameOrSignature: "CLOCK_MODE" | "CONTRACTS_ADDRESS_MANAGER_ROLE" | "DEFAULT_ADMIN_ROLE" | "PERCENTAGE_PRECISION_SCALING_FACTOR" | "UPGRADER_ROLE" | "UPGRADE_INTERFACE_VERSION" | "b3tr" | "baseAllocationAmount" | "claim" | "claimableAmount" | "claimed" | "clock" | "currentRoundEarnings" | "emissions" | "getAppShares" | "getMaxAppAllocation" | "getRoleAdmin" | "grantRole" | "hasRole" | "initialize" | "isQuadraticFundingDisabledForCurrentRound" | "isQuadraticFundingDisabledForRound" | "proxiableUUID" | "renounceRole" | "revokeRole" | "roundEarnings" | "scaledAppSharesCap" | "setEmissionsAddress" | "setTreasuryAddress" | "setX2EarnAppsAddress" | "setXAllocationVotingAddress" | "supportsInterface" | "toggleQuadraticFunding" | "treasury" | "upgradeToAndCall" | "version" | "x2EarnApps" | "xAllocationVoting"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "AllocationRewardsClaimed" | "EmissionsContractSet" | "Initialized" | "QuadraticFundingToggled" | "RoleAdminChanged" | "RoleGranted" | "RoleRevoked" | "TreasuryContractSet" | "Upgraded" | "X2EarnAppsContractSet" | "XAllocationVotingSet"): EventFragment;
    encodeFunctionData(functionFragment: "CLOCK_MODE", values?: undefined): string;
    encodeFunctionData(functionFragment: "CONTRACTS_ADDRESS_MANAGER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "PERCENTAGE_PRECISION_SCALING_FACTOR", values?: undefined): string;
    encodeFunctionData(functionFragment: "UPGRADER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "UPGRADE_INTERFACE_VERSION", values?: undefined): string;
    encodeFunctionData(functionFragment: "b3tr", values?: undefined): string;
    encodeFunctionData(functionFragment: "baseAllocationAmount", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "claim", values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "claimableAmount", values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "claimed", values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "clock", values?: undefined): string;
    encodeFunctionData(functionFragment: "currentRoundEarnings", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "emissions", values?: undefined): string;
    encodeFunctionData(functionFragment: "getAppShares", values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "getMaxAppAllocation", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "initialize", values: [
        AddressLike,
        AddressLike,
        AddressLike,
        AddressLike,
        AddressLike,
        AddressLike,
        AddressLike
    ]): string;
    encodeFunctionData(functionFragment: "isQuadraticFundingDisabledForCurrentRound", values?: undefined): string;
    encodeFunctionData(functionFragment: "isQuadraticFundingDisabledForRound", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "proxiableUUID", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "roundEarnings", values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "scaledAppSharesCap", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setEmissionsAddress", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setTreasuryAddress", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setX2EarnAppsAddress", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setXAllocationVotingAddress", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "toggleQuadraticFunding", values?: undefined): string;
    encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
    encodeFunctionData(functionFragment: "upgradeToAndCall", values: [AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    encodeFunctionData(functionFragment: "x2EarnApps", values?: undefined): string;
    encodeFunctionData(functionFragment: "xAllocationVoting", values?: undefined): string;
    decodeFunctionResult(functionFragment: "CLOCK_MODE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "CONTRACTS_ADDRESS_MANAGER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "PERCENTAGE_PRECISION_SCALING_FACTOR", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UPGRADER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UPGRADE_INTERFACE_VERSION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "b3tr", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "baseAllocationAmount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "claimableAmount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "clock", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "currentRoundEarnings", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "emissions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAppShares", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMaxAppAllocation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isQuadraticFundingDisabledForCurrentRound", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isQuadraticFundingDisabledForRound", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proxiableUUID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "roundEarnings", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "scaledAppSharesCap", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setEmissionsAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTreasuryAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setX2EarnAppsAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setXAllocationVotingAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "toggleQuadraticFunding", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeToAndCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "x2EarnApps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "xAllocationVoting", data: BytesLike): Result;
}

interface X2EarnRewardsPoolInterface extends Interface {
    getFunction(nameOrSignature: "CONTRACTS_ADDRESS_MANAGER_ROLE" | "DEFAULT_ADMIN_ROLE" | "IMPACT_KEY_MANAGER_ROLE" | "UPGRADER_ROLE" | "UPGRADE_INTERFACE_VERSION" | "addImpactKey" | "availableFunds" | "b3tr" | "buildProof" | "deposit" | "distributeReward" | "distributeRewardDeprecated" | "distributeRewardWithProof" | "getAllowedImpactKeys" | "getRoleAdmin" | "grantRole" | "hasRole" | "initialize" | "initializeV2" | "initializeV3" | "onERC1155BatchReceived" | "onERC1155Received" | "onERC721Received" | "proxiableUUID" | "removeImpactKey" | "renounceRole" | "revokeRole" | "setVeBetterPassport" | "setX2EarnApps" | "supportsInterface" | "upgradeToAndCall" | "veBetterPassport" | "version" | "withdraw" | "x2EarnApps"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized" | "NewDeposit" | "RegisterActionFailed" | "RewardDistributed" | "RoleAdminChanged" | "RoleGranted" | "RoleRevoked" | "TeamWithdrawal" | "Upgraded"): EventFragment;
    encodeFunctionData(functionFragment: "CONTRACTS_ADDRESS_MANAGER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "IMPACT_KEY_MANAGER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "UPGRADER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "UPGRADE_INTERFACE_VERSION", values?: undefined): string;
    encodeFunctionData(functionFragment: "addImpactKey", values: [string]): string;
    encodeFunctionData(functionFragment: "availableFunds", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "b3tr", values?: undefined): string;
    encodeFunctionData(functionFragment: "buildProof", values: [string[], string[], string[], BigNumberish[], string]): string;
    encodeFunctionData(functionFragment: "deposit", values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "distributeReward", values: [BytesLike, BigNumberish, AddressLike, string]): string;
    encodeFunctionData(functionFragment: "distributeRewardDeprecated", values: [BytesLike, BigNumberish, AddressLike, string]): string;
    encodeFunctionData(functionFragment: "distributeRewardWithProof", values: [
        BytesLike,
        BigNumberish,
        AddressLike,
        string[],
        string[],
        string[],
        BigNumberish[],
        string
    ]): string;
    encodeFunctionData(functionFragment: "getAllowedImpactKeys", values?: undefined): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "initialize", values: [AddressLike, AddressLike, AddressLike, AddressLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "initializeV2", values: [AddressLike, string[]]): string;
    encodeFunctionData(functionFragment: "initializeV3", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "onERC1155BatchReceived", values: [
        AddressLike,
        AddressLike,
        BigNumberish[],
        BigNumberish[],
        BytesLike
    ]): string;
    encodeFunctionData(functionFragment: "onERC1155Received", values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "onERC721Received", values: [AddressLike, AddressLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "proxiableUUID", values?: undefined): string;
    encodeFunctionData(functionFragment: "removeImpactKey", values: [string]): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "setVeBetterPassport", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setX2EarnApps", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "upgradeToAndCall", values: [AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "veBetterPassport", values?: undefined): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdraw", values: [BigNumberish, BytesLike, string]): string;
    encodeFunctionData(functionFragment: "x2EarnApps", values?: undefined): string;
    decodeFunctionResult(functionFragment: "CONTRACTS_ADDRESS_MANAGER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "IMPACT_KEY_MANAGER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UPGRADER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UPGRADE_INTERFACE_VERSION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addImpactKey", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "availableFunds", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "b3tr", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "buildProof", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "distributeReward", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "distributeRewardDeprecated", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "distributeRewardWithProof", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAllowedImpactKeys", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initializeV2", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initializeV3", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "onERC1155BatchReceived", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "onERC1155Received", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "onERC721Received", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proxiableUUID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeImpactKey", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setVeBetterPassport", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setX2EarnApps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeToAndCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "veBetterPassport", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "x2EarnApps", data: BytesLike): Result;
}

declare namespace VechainNodesDataTypes {
    type NodeStrengthScoresStruct = {
        strength: BigNumberish;
        thunder: BigNumberish;
        mjolnir: BigNumberish;
        veThorX: BigNumberish;
        strengthX: BigNumberish;
        thunderX: BigNumberish;
        mjolnirX: BigNumberish;
    };
    type NodeStrengthScoresStructOutput = [
        strength: bigint,
        thunder: bigint,
        mjolnir: bigint,
        veThorX: bigint,
        strengthX: bigint,
        thunderX: bigint,
        mjolnirX: bigint
    ] & {
        strength: bigint;
        thunder: bigint;
        mjolnir: bigint;
        veThorX: bigint;
        strengthX: bigint;
        thunderX: bigint;
        mjolnirX: bigint;
    };
}
interface X2EarnAppsInterface extends Interface {
    getFunction(nameOrSignature: "CLOCK_MODE" | "DEFAULT_ADMIN_ROLE" | "GOVERNANCE_ROLE" | "MAX_CREATORS" | "MAX_MODERATORS" | "MAX_REWARD_DISTRIBUTORS" | "UPGRADER_ROLE" | "UPGRADE_INTERFACE_VERSION" | "addAppModerator" | "addCreator" | "addRewardDistributor" | "allEligibleApps" | "app" | "appAdmin" | "appCreators" | "appExists" | "appModerators" | "appURI" | "apps" | "appsCount" | "baseURI" | "checkEndorsement" | "clock" | "creatorApps" | "endorseApp" | "endorsementScoreThreshold" | "getEndorsers" | "getNodeEndorsementScore" | "getNodeManagementContract" | "getPaginatedApps" | "getRoleAdmin" | "getScore" | "getUsersEndorsementScore" | "getVeBetterPassportContract" | "gracePeriod" | "grantRole" | "hasRole" | "hashAppName" | "initializeV2" | "isAppAdmin" | "isAppCreator" | "isAppModerator" | "isAppUnendorsed" | "isBlacklisted" | "isEligible" | "isEligibleNow" | "isRewardDistributor" | "metadataURI" | "nodeLevelEndorsementScore" | "nodeToEndorsedApp" | "proxiableUUID" | "removeAppCreator" | "removeAppModerator" | "removeNodeEndorsement" | "removeRewardDistributor" | "removeXAppSubmission" | "renounceRole" | "revokeRole" | "rewardDistributors" | "setAppAdmin" | "setBaseURI" | "setNodeManagementContract" | "setTeamAllocationPercentage" | "setVeBetterPassportContract" | "setVotingEligibility" | "setX2EarnCreatorContract" | "submitApp" | "supportsInterface" | "teamAllocationPercentage" | "teamWalletAddress" | "unendorseApp" | "unendorsedAppIds" | "unendorsedApps" | "updateAppMetadata" | "updateEndorsementScoreThreshold" | "updateGracePeriod" | "updateNodeEndorsementScores" | "updateTeamWalletAddress" | "upgradeToAndCall" | "version" | "x2EarnCreatorContract"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "AppAdded" | "AppAdminUpdated" | "AppEndorsed" | "AppEndorsementStatusUpdated" | "AppMetadataURIUpdated" | "AppUnendorsedGracePeriodStarted" | "BaseURIUpdated" | "BlacklistUpdated" | "CreatorAddedToApp" | "EndorsementScoreThresholdUpdated" | "GracePeriodUpdated" | "Initialized" | "ModeratorAddedToApp" | "ModeratorRemovedFromApp" | "NodeStrengthScoresUpdated" | "RewardDistributorAddedToApp" | "RewardDistributorRemovedFromApp" | "RoleAdminChanged" | "RoleGranted" | "RoleRevoked" | "TeamAllocationPercentageUpdated" | "TeamWalletAddressUpdated" | "Upgraded" | "VotingEligibilityUpdated"): EventFragment;
    encodeFunctionData(functionFragment: "CLOCK_MODE", values?: undefined): string;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "GOVERNANCE_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "MAX_CREATORS", values?: undefined): string;
    encodeFunctionData(functionFragment: "MAX_MODERATORS", values?: undefined): string;
    encodeFunctionData(functionFragment: "MAX_REWARD_DISTRIBUTORS", values?: undefined): string;
    encodeFunctionData(functionFragment: "UPGRADER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "UPGRADE_INTERFACE_VERSION", values?: undefined): string;
    encodeFunctionData(functionFragment: "addAppModerator", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "addCreator", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "addRewardDistributor", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "allEligibleApps", values?: undefined): string;
    encodeFunctionData(functionFragment: "app", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "appAdmin", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "appCreators", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "appExists", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "appModerators", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "appURI", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "apps", values?: undefined): string;
    encodeFunctionData(functionFragment: "appsCount", values?: undefined): string;
    encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
    encodeFunctionData(functionFragment: "checkEndorsement", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "clock", values?: undefined): string;
    encodeFunctionData(functionFragment: "creatorApps", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "endorseApp", values: [BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "endorsementScoreThreshold", values?: undefined): string;
    encodeFunctionData(functionFragment: "getEndorsers", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getNodeEndorsementScore", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getNodeManagementContract", values?: undefined): string;
    encodeFunctionData(functionFragment: "getPaginatedApps", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getScore", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getUsersEndorsementScore", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "getVeBetterPassportContract", values?: undefined): string;
    encodeFunctionData(functionFragment: "gracePeriod", values?: undefined): string;
    encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "hashAppName", values: [string]): string;
    encodeFunctionData(functionFragment: "initializeV2", values: [BigNumberish, AddressLike, AddressLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "isAppAdmin", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "isAppCreator", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "isAppModerator", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "isAppUnendorsed", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "isBlacklisted", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "isEligible", values: [BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "isEligibleNow", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "isRewardDistributor", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "metadataURI", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "nodeLevelEndorsementScore", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "nodeToEndorsedApp", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "proxiableUUID", values?: undefined): string;
    encodeFunctionData(functionFragment: "removeAppCreator", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "removeAppModerator", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "removeNodeEndorsement", values: [BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "removeRewardDistributor", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "removeXAppSubmission", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "rewardDistributors", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "setAppAdmin", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
    encodeFunctionData(functionFragment: "setNodeManagementContract", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setTeamAllocationPercentage", values: [BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setVeBetterPassportContract", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setVotingEligibility", values: [BytesLike, boolean]): string;
    encodeFunctionData(functionFragment: "setX2EarnCreatorContract", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "submitApp", values: [AddressLike, AddressLike, string, string]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "teamAllocationPercentage", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "teamWalletAddress", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "unendorseApp", values: [BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "unendorsedAppIds", values?: undefined): string;
    encodeFunctionData(functionFragment: "unendorsedApps", values?: undefined): string;
    encodeFunctionData(functionFragment: "updateAppMetadata", values: [BytesLike, string]): string;
    encodeFunctionData(functionFragment: "updateEndorsementScoreThreshold", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "updateGracePeriod", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "updateNodeEndorsementScores", values: [VechainNodesDataTypes.NodeStrengthScoresStruct]): string;
    encodeFunctionData(functionFragment: "updateTeamWalletAddress", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "upgradeToAndCall", values: [AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    encodeFunctionData(functionFragment: "x2EarnCreatorContract", values?: undefined): string;
    decodeFunctionResult(functionFragment: "CLOCK_MODE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "GOVERNANCE_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "MAX_CREATORS", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "MAX_MODERATORS", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "MAX_REWARD_DISTRIBUTORS", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UPGRADER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UPGRADE_INTERFACE_VERSION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addAppModerator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addCreator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addRewardDistributor", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allEligibleApps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "app", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "appAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "appCreators", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "appExists", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "appModerators", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "appURI", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "apps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "appsCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "checkEndorsement", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "clock", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "creatorApps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "endorseApp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "endorsementScoreThreshold", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getEndorsers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getNodeEndorsementScore", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getNodeManagementContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPaginatedApps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getScore", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getUsersEndorsementScore", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getVeBetterPassportContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "gracePeriod", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hashAppName", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initializeV2", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isAppAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isAppCreator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isAppModerator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isAppUnendorsed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isBlacklisted", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isEligible", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isEligibleNow", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isRewardDistributor", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "metadataURI", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nodeLevelEndorsementScore", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nodeToEndorsedApp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proxiableUUID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeAppCreator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeAppModerator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeNodeEndorsement", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeRewardDistributor", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeXAppSubmission", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rewardDistributors", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAppAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setNodeManagementContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTeamAllocationPercentage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setVeBetterPassportContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setVotingEligibility", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setX2EarnCreatorContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "submitApp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "teamAllocationPercentage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "teamWalletAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unendorseApp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unendorsedAppIds", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unendorsedApps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateAppMetadata", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateEndorsementScoreThreshold", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateGracePeriod", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateNodeEndorsementScores", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateTeamWalletAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeToAndCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "x2EarnCreatorContract", data: BytesLike): Result;
}

interface VoterRewardsInterface extends Interface {
    getFunction(nameOrSignature: "CONTRACTS_ADDRESS_MANAGER_ROLE" | "DEFAULT_ADMIN_ROLE" | "SCALING_FACTOR" | "UPGRADER_ROLE" | "UPGRADE_INTERFACE_VERSION" | "VOTE_REGISTRAR_ROLE" | "b3tr" | "claimReward" | "clock" | "cycleToTotal" | "cycleToVoterToTotal" | "emissions" | "galaxyMember" | "getMultiplier" | "getReward" | "getRoleAdmin" | "grantRole" | "hasNodeVoted" | "hasRole" | "hasTokenVoted" | "initialize" | "isQuadraticRewardingDisabledAtBlock" | "isQuadraticRewardingDisabledForCurrentCycle" | "levelToMultiplier" | "proxiableUUID" | "registerVote" | "renounceRole" | "revokeRole" | "setEmissions" | "setGalaxyMember" | "setLevelToMultiplier" | "supportsInterface" | "toggleQuadraticRewarding" | "upgradeToAndCall" | "version"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "EmissionsAddressUpdated" | "GalaxyMemberAddressUpdated" | "Initialized" | "LevelToMultiplierSet" | "QuadraticRewardingToggled" | "RewardClaimed" | "RoleAdminChanged" | "RoleGranted" | "RoleRevoked" | "Upgraded" | "VoteRegistered"): EventFragment;
    encodeFunctionData(functionFragment: "CONTRACTS_ADDRESS_MANAGER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "SCALING_FACTOR", values?: undefined): string;
    encodeFunctionData(functionFragment: "UPGRADER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "UPGRADE_INTERFACE_VERSION", values?: undefined): string;
    encodeFunctionData(functionFragment: "VOTE_REGISTRAR_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "b3tr", values?: undefined): string;
    encodeFunctionData(functionFragment: "claimReward", values: [BigNumberish, AddressLike]): string;
    encodeFunctionData(functionFragment: "clock", values?: undefined): string;
    encodeFunctionData(functionFragment: "cycleToTotal", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "cycleToVoterToTotal", values: [BigNumberish, AddressLike]): string;
    encodeFunctionData(functionFragment: "emissions", values?: undefined): string;
    encodeFunctionData(functionFragment: "galaxyMember", values?: undefined): string;
    encodeFunctionData(functionFragment: "getMultiplier", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getReward", values: [BigNumberish, AddressLike]): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "hasNodeVoted", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "hasTokenVoted", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "initialize", values: [
        AddressLike,
        AddressLike,
        AddressLike,
        AddressLike,
        AddressLike,
        AddressLike,
        BigNumberish[],
        BigNumberish[]
    ]): string;
    encodeFunctionData(functionFragment: "isQuadraticRewardingDisabledAtBlock", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "isQuadraticRewardingDisabledForCurrentCycle", values?: undefined): string;
    encodeFunctionData(functionFragment: "levelToMultiplier", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "proxiableUUID", values?: undefined): string;
    encodeFunctionData(functionFragment: "registerVote", values: [BigNumberish, AddressLike, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "setEmissions", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setGalaxyMember", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setLevelToMultiplier", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "toggleQuadraticRewarding", values?: undefined): string;
    encodeFunctionData(functionFragment: "upgradeToAndCall", values: [AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    decodeFunctionResult(functionFragment: "CONTRACTS_ADDRESS_MANAGER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "SCALING_FACTOR", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UPGRADER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UPGRADE_INTERFACE_VERSION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "VOTE_REGISTRAR_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "b3tr", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "claimReward", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "clock", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "cycleToTotal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "cycleToVoterToTotal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "emissions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "galaxyMember", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMultiplier", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasNodeVoted", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasTokenVoted", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isQuadraticRewardingDisabledAtBlock", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isQuadraticRewardingDisabledForCurrentCycle", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "levelToMultiplier", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proxiableUUID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerVote", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setEmissions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setGalaxyMember", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setLevelToMultiplier", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "toggleQuadraticRewarding", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeToAndCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

interface VOT3Interface extends Interface {
    getFunction(nameOrSignature: "CLOCK_MODE" | "DEFAULT_ADMIN_ROLE" | "DOMAIN_SEPARATOR" | "PAUSER_ROLE" | "UPGRADER_ROLE" | "UPGRADE_INTERFACE_VERSION" | "allowance" | "approve" | "b3tr" | "balanceOf" | "checkpoints" | "clock" | "convertToB3TR" | "convertToVOT3" | "convertedB3trOf" | "decimals" | "delegate" | "delegateBySig" | "delegates" | "eip712Domain" | "getPastQuadraticVotingPower" | "getPastTotalSupply" | "getPastVotes" | "getQuadraticVotingPower" | "getRoleAdmin" | "getVotes" | "grantRole" | "hasRole" | "initialize" | "name" | "nonces" | "numCheckpoints" | "pause" | "paused" | "permit" | "proxiableUUID" | "renounceRole" | "revokeRole" | "supportsInterface" | "symbol" | "totalSupply" | "transfer" | "transferFrom" | "unpause" | "upgradeToAndCall" | "version"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "Approval" | "DelegateChanged" | "DelegateVotesChanged" | "EIP712DomainChanged" | "Initialized" | "Paused" | "RoleAdminChanged" | "RoleGranted" | "RoleRevoked" | "Transfer" | "Unpaused" | "Upgraded"): EventFragment;
    encodeFunctionData(functionFragment: "CLOCK_MODE", values?: undefined): string;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "DOMAIN_SEPARATOR", values?: undefined): string;
    encodeFunctionData(functionFragment: "PAUSER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "UPGRADER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "UPGRADE_INTERFACE_VERSION", values?: undefined): string;
    encodeFunctionData(functionFragment: "allowance", values: [AddressLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "approve", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "b3tr", values?: undefined): string;
    encodeFunctionData(functionFragment: "balanceOf", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "checkpoints", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "clock", values?: undefined): string;
    encodeFunctionData(functionFragment: "convertToB3TR", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "convertToVOT3", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "convertedB3trOf", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
    encodeFunctionData(functionFragment: "delegate", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "delegateBySig", values: [
        AddressLike,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BytesLike,
        BytesLike
    ]): string;
    encodeFunctionData(functionFragment: "delegates", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "eip712Domain", values?: undefined): string;
    encodeFunctionData(functionFragment: "getPastQuadraticVotingPower", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getPastTotalSupply", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getPastVotes", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getQuadraticVotingPower", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getVotes", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "initialize", values: [AddressLike, AddressLike, AddressLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "numCheckpoints", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "pause", values?: undefined): string;
    encodeFunctionData(functionFragment: "paused", values?: undefined): string;
    encodeFunctionData(functionFragment: "permit", values: [
        AddressLike,
        AddressLike,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BytesLike,
        BytesLike
    ]): string;
    encodeFunctionData(functionFragment: "proxiableUUID", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
    encodeFunctionData(functionFragment: "transfer", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "transferFrom", values: [AddressLike, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
    encodeFunctionData(functionFragment: "upgradeToAndCall", values: [AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    decodeFunctionResult(functionFragment: "CLOCK_MODE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "DOMAIN_SEPARATOR", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "PAUSER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UPGRADER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UPGRADE_INTERFACE_VERSION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "b3tr", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "checkpoints", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "clock", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "convertToB3TR", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "convertToVOT3", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "convertedB3trOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "delegateBySig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "delegates", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "eip712Domain", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPastQuadraticVotingPower", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPastTotalSupply", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPastVotes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getQuadraticVotingPower", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getVotes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "numCheckpoints", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proxiableUUID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeToAndCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

interface TreasuryInterface extends Interface {
    getFunction(nameOrSignature: "DEFAULT_ADMIN_ROLE" | "GOVERNANCE_ROLE" | "PAUSER_ROLE" | "UPGRADER_ROLE" | "UPGRADE_INTERFACE_VERSION" | "VTHO" | "b3trAddress" | "convertB3TR" | "convertVOT3" | "getB3TRBalance" | "getCollectionNFTBalance" | "getERC1155TokenBalance" | "getRoleAdmin" | "getTokenBalance" | "getTransferLimitToken" | "getTransferLimitVET" | "getVETBalance" | "getVOT3Balance" | "getVTHOBalance" | "grantRole" | "hasRole" | "initialize" | "onERC1155BatchReceived" | "onERC1155Received" | "onERC721Received" | "pause" | "paused" | "proxiableUUID" | "renounceRole" | "revokeRole" | "setTransferLimitToken" | "setTransferLimitVET" | "supportsInterface" | "transferB3TR" | "transferERC1155Tokens" | "transferNFT" | "transferTokens" | "transferVET" | "transferVOT3" | "transferVTHO" | "unpause" | "upgradeToAndCall" | "version" | "vot3Address"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized" | "Paused" | "RoleAdminChanged" | "RoleGranted" | "RoleRevoked" | "TransferLimitUpdated" | "TransferLimitVETUpdated" | "Unpaused" | "Upgraded"): EventFragment;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "GOVERNANCE_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "PAUSER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "UPGRADER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "UPGRADE_INTERFACE_VERSION", values?: undefined): string;
    encodeFunctionData(functionFragment: "VTHO", values?: undefined): string;
    encodeFunctionData(functionFragment: "b3trAddress", values?: undefined): string;
    encodeFunctionData(functionFragment: "convertB3TR", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "convertVOT3", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getB3TRBalance", values?: undefined): string;
    encodeFunctionData(functionFragment: "getCollectionNFTBalance", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "getERC1155TokenBalance", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getTokenBalance", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "getTransferLimitToken", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "getTransferLimitVET", values?: undefined): string;
    encodeFunctionData(functionFragment: "getVETBalance", values?: undefined): string;
    encodeFunctionData(functionFragment: "getVOT3Balance", values?: undefined): string;
    encodeFunctionData(functionFragment: "getVTHOBalance", values?: undefined): string;
    encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "initialize", values: [
        AddressLike,
        AddressLike,
        AddressLike,
        AddressLike,
        AddressLike,
        AddressLike,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
    ]): string;
    encodeFunctionData(functionFragment: "onERC1155BatchReceived", values: [
        AddressLike,
        AddressLike,
        BigNumberish[],
        BigNumberish[],
        BytesLike
    ]): string;
    encodeFunctionData(functionFragment: "onERC1155Received", values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "onERC721Received", values: [AddressLike, AddressLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "pause", values?: undefined): string;
    encodeFunctionData(functionFragment: "paused", values?: undefined): string;
    encodeFunctionData(functionFragment: "proxiableUUID", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "setTransferLimitToken", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setTransferLimitVET", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "transferB3TR", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "transferERC1155Tokens", values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "transferNFT", values: [AddressLike, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "transferTokens", values: [AddressLike, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "transferVET", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "transferVOT3", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "transferVTHO", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
    encodeFunctionData(functionFragment: "upgradeToAndCall", values: [AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    encodeFunctionData(functionFragment: "vot3Address", values?: undefined): string;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "GOVERNANCE_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "PAUSER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UPGRADER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UPGRADE_INTERFACE_VERSION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "VTHO", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "b3trAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "convertB3TR", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "convertVOT3", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getB3TRBalance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getCollectionNFTBalance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getERC1155TokenBalance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTokenBalance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTransferLimitToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTransferLimitVET", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getVETBalance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getVOT3Balance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getVTHOBalance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "onERC1155BatchReceived", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "onERC1155Received", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "onERC721Received", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proxiableUUID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTransferLimitToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTransferLimitVET", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferB3TR", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferERC1155Tokens", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferNFT", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferTokens", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferVET", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferVOT3", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferVTHO", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeToAndCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "vot3Address", data: BytesLike): Result;
}

interface TimeLockInterface extends Interface {
    getFunction(nameOrSignature: "CANCELLER_ROLE" | "DEFAULT_ADMIN_ROLE" | "EXECUTOR_ROLE" | "PROPOSER_ROLE" | "UPGRADER_ROLE" | "UPGRADE_INTERFACE_VERSION" | "cancel" | "execute" | "executeBatch" | "getMinDelay" | "getOperationState" | "getRoleAdmin" | "getTimestamp" | "grantRole" | "hasRole" | "hashOperation" | "hashOperationBatch" | "initialize" | "isOperation" | "isOperationDone" | "isOperationPending" | "isOperationReady" | "onERC1155BatchReceived" | "onERC1155Received" | "onERC721Received" | "proxiableUUID" | "renounceRole" | "revokeRole" | "schedule" | "scheduleBatch" | "supportsInterface" | "updateDelay" | "upgradeToAndCall" | "version"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "CallExecuted" | "CallSalt" | "CallScheduled" | "Cancelled" | "Initialized" | "MinDelayChange" | "RoleAdminChanged" | "RoleGranted" | "RoleRevoked" | "Upgraded"): EventFragment;
    encodeFunctionData(functionFragment: "CANCELLER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "EXECUTOR_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "PROPOSER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "UPGRADER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "UPGRADE_INTERFACE_VERSION", values?: undefined): string;
    encodeFunctionData(functionFragment: "cancel", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "execute", values: [AddressLike, BigNumberish, BytesLike, BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "executeBatch", values: [AddressLike[], BigNumberish[], BytesLike[], BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "getMinDelay", values?: undefined): string;
    encodeFunctionData(functionFragment: "getOperationState", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getTimestamp", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "hashOperation", values: [AddressLike, BigNumberish, BytesLike, BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "hashOperationBatch", values: [AddressLike[], BigNumberish[], BytesLike[], BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "initialize", values: [
        BigNumberish,
        AddressLike[],
        AddressLike[],
        AddressLike,
        AddressLike
    ]): string;
    encodeFunctionData(functionFragment: "isOperation", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "isOperationDone", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "isOperationPending", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "isOperationReady", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "onERC1155BatchReceived", values: [
        AddressLike,
        AddressLike,
        BigNumberish[],
        BigNumberish[],
        BytesLike
    ]): string;
    encodeFunctionData(functionFragment: "onERC1155Received", values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "onERC721Received", values: [AddressLike, AddressLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "proxiableUUID", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "schedule", values: [
        AddressLike,
        BigNumberish,
        BytesLike,
        BytesLike,
        BytesLike,
        BigNumberish
    ]): string;
    encodeFunctionData(functionFragment: "scheduleBatch", values: [
        AddressLike[],
        BigNumberish[],
        BytesLike[],
        BytesLike,
        BytesLike,
        BigNumberish
    ]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "updateDelay", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "upgradeToAndCall", values: [AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    decodeFunctionResult(functionFragment: "CANCELLER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "EXECUTOR_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "PROPOSER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UPGRADER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UPGRADE_INTERFACE_VERSION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executeBatch", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMinDelay", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getOperationState", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTimestamp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hashOperation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hashOperationBatch", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isOperation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isOperationDone", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isOperationPending", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isOperationReady", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "onERC1155BatchReceived", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "onERC1155Received", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "onERC721Received", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proxiableUUID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "schedule", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "scheduleBatch", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateDelay", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeToAndCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

interface GalaxyMemberInterface extends Interface {
    getFunction(nameOrSignature: "CONTRACTS_ADDRESS_MANAGER_ROLE" | "DEFAULT_ADMIN_ROLE" | "MAX_LEVEL" | "MINTER_ROLE" | "NODES_MANAGER_ROLE" | "PAUSER_ROLE" | "UPGRADER_ROLE" | "UPGRADE_INTERFACE_VERSION" | "approve" | "attachNode" | "b3tr" | "b3trGovernor" | "balanceOf" | "baseURI" | "burn" | "detachNode" | "freeMint" | "getApproved" | "getB3TRdonated" | "getB3TRtoUpgrade" | "getB3TRtoUpgradeToLevel" | "getIdAttachedToNode" | "getLevelAfterAttachingNode" | "getLevelAfterDetachingNode" | "getNodeIdAttached" | "getNodeLevelOf" | "getNodeToFreeLevel" | "getRoleAdmin" | "getSelectedTokenId" | "getSelectedTokenInfoByOwner" | "getTokenInfoByTokenId" | "getTokensInfoByOwner" | "grantRole" | "hasRole" | "initialize" | "initializeV2" | "isApprovedForAll" | "levelOf" | "name" | "ownerOf" | "participatedInGovernance" | "pause" | "paused" | "proxiableUUID" | "renounceRole" | "revokeRole" | "safeTransferFrom(address,address,uint256)" | "safeTransferFrom(address,address,uint256,bytes)" | "select" | "setApprovalForAll" | "setB3TRtoUpgradeToLevel" | "setB3trGovernorAddress" | "setBaseURI" | "setIsPublicMintingPaused" | "setMaxLevel" | "setNodeToFreeUpgradeLevel" | "setVechainNodes" | "setXAllocationsGovernorAddress" | "supportsInterface" | "symbol" | "tokenByIndex" | "tokenOfOwnerByIndex" | "tokenURI" | "totalSupply" | "transferFrom" | "treasury" | "unpause" | "upgrade" | "upgradeToAndCall" | "version" | "xAllocationsGovernor"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "Approval" | "ApprovalForAll" | "B3TRtoUpgradeToLevelUpdated" | "B3trGovernorAddressUpdated" | "BaseURIUpdated" | "Initialized" | "MaxLevelUpdated" | "NodeAttached" | "NodeDetached" | "Paused" | "PublicMintingPaused" | "RoleAdminChanged" | "RoleGranted" | "RoleRevoked" | "Selected" | "Transfer" | "Unpaused" | "Upgraded(address)" | "Upgraded(uint256,uint256,uint256)" | "XAllocationsGovernorAddressUpdated"): EventFragment;
    encodeFunctionData(functionFragment: "CONTRACTS_ADDRESS_MANAGER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "MAX_LEVEL", values?: undefined): string;
    encodeFunctionData(functionFragment: "MINTER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "NODES_MANAGER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "PAUSER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "UPGRADER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "UPGRADE_INTERFACE_VERSION", values?: undefined): string;
    encodeFunctionData(functionFragment: "approve", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "attachNode", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "b3tr", values?: undefined): string;
    encodeFunctionData(functionFragment: "b3trGovernor", values?: undefined): string;
    encodeFunctionData(functionFragment: "balanceOf", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
    encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "detachNode", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "freeMint", values?: undefined): string;
    encodeFunctionData(functionFragment: "getApproved", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getB3TRdonated", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getB3TRtoUpgrade", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getB3TRtoUpgradeToLevel", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getIdAttachedToNode", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getLevelAfterAttachingNode", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getLevelAfterDetachingNode", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getNodeIdAttached", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getNodeLevelOf", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getNodeToFreeLevel", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getSelectedTokenId", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "getSelectedTokenInfoByOwner", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "getTokenInfoByTokenId", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getTokensInfoByOwner", values: [AddressLike, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "initialize", values: [GalaxyMember$1.InitializationDataStruct]): string;
    encodeFunctionData(functionFragment: "initializeV2", values: [AddressLike, AddressLike, AddressLike, BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "isApprovedForAll", values: [AddressLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "levelOf", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(functionFragment: "ownerOf", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "participatedInGovernance", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "pause", values?: undefined): string;
    encodeFunctionData(functionFragment: "paused", values?: undefined): string;
    encodeFunctionData(functionFragment: "proxiableUUID", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "safeTransferFrom(address,address,uint256)", values: [AddressLike, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "safeTransferFrom(address,address,uint256,bytes)", values: [AddressLike, AddressLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "select", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setApprovalForAll", values: [AddressLike, boolean]): string;
    encodeFunctionData(functionFragment: "setB3TRtoUpgradeToLevel", values: [BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "setB3trGovernorAddress", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
    encodeFunctionData(functionFragment: "setIsPublicMintingPaused", values: [boolean]): string;
    encodeFunctionData(functionFragment: "setMaxLevel", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setNodeToFreeUpgradeLevel", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setVechainNodes", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setXAllocationsGovernorAddress", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
    encodeFunctionData(functionFragment: "tokenByIndex", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "tokenOfOwnerByIndex", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "tokenURI", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferFrom", values: [AddressLike, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
    encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
    encodeFunctionData(functionFragment: "upgrade", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "upgradeToAndCall", values: [AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    encodeFunctionData(functionFragment: "xAllocationsGovernor", values?: undefined): string;
    decodeFunctionResult(functionFragment: "CONTRACTS_ADDRESS_MANAGER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "MAX_LEVEL", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "MINTER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "NODES_MANAGER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "PAUSER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UPGRADER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UPGRADE_INTERFACE_VERSION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "attachNode", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "b3tr", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "b3trGovernor", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "detachNode", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "freeMint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getApproved", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getB3TRdonated", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getB3TRtoUpgrade", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getB3TRtoUpgradeToLevel", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getIdAttachedToNode", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getLevelAfterAttachingNode", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getLevelAfterDetachingNode", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getNodeIdAttached", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getNodeLevelOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getNodeToFreeLevel", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSelectedTokenId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSelectedTokenInfoByOwner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTokenInfoByTokenId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTokensInfoByOwner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initializeV2", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isApprovedForAll", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "levelOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "participatedInGovernance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proxiableUUID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "safeTransferFrom(address,address,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "safeTransferFrom(address,address,uint256,bytes)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "select", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setApprovalForAll", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setB3TRtoUpgradeToLevel", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setB3trGovernorAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setIsPublicMintingPaused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMaxLevel", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setNodeToFreeUpgradeLevel", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setVechainNodes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setXAllocationsGovernorAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tokenByIndex", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tokenOfOwnerByIndex", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeToAndCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "xAllocationsGovernor", data: BytesLike): Result;
}
declare namespace ApprovalEvent {
    type InputTuple = [
        owner: AddressLike,
        approved: AddressLike,
        tokenId: BigNumberish
    ];
    type OutputTuple = [owner: string, approved: string, tokenId: bigint];
    interface OutputObject {
        owner: string;
        approved: string;
        tokenId: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace ApprovalForAllEvent {
    type InputTuple = [
        owner: AddressLike,
        operator: AddressLike,
        approved: boolean
    ];
    type OutputTuple = [
        owner: string,
        operator: string,
        approved: boolean
    ];
    interface OutputObject {
        owner: string;
        operator: string;
        approved: boolean;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace B3TRtoUpgradeToLevelUpdatedEvent {
    type InputTuple = [b3trToUpgradeToLevel: BigNumberish[]];
    type OutputTuple = [b3trToUpgradeToLevel: bigint[]];
    interface OutputObject {
        b3trToUpgradeToLevel: bigint[];
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace B3trGovernorAddressUpdatedEvent {
    type InputTuple = [newAddress: AddressLike, oldAddress: AddressLike];
    type OutputTuple = [newAddress: string, oldAddress: string];
    interface OutputObject {
        newAddress: string;
        oldAddress: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace BaseURIUpdatedEvent {
    type InputTuple = [newBaseURI: string, oldBaseURI: string];
    type OutputTuple = [newBaseURI: string, oldBaseURI: string];
    interface OutputObject {
        newBaseURI: string;
        oldBaseURI: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace InitializedEvent$1 {
    type InputTuple = [version: BigNumberish];
    type OutputTuple = [version: bigint];
    interface OutputObject {
        version: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace MaxLevelUpdatedEvent {
    type InputTuple = [oldLevel: BigNumberish, newLevel: BigNumberish];
    type OutputTuple = [oldLevel: bigint, newLevel: bigint];
    interface OutputObject {
        oldLevel: bigint;
        newLevel: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace NodeAttachedEvent {
    type InputTuple = [nodeTokenId: BigNumberish, tokenId: BigNumberish];
    type OutputTuple = [nodeTokenId: bigint, tokenId: bigint];
    interface OutputObject {
        nodeTokenId: bigint;
        tokenId: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace NodeDetachedEvent {
    type InputTuple = [nodeTokenId: BigNumberish, tokenId: BigNumberish];
    type OutputTuple = [nodeTokenId: bigint, tokenId: bigint];
    interface OutputObject {
        nodeTokenId: bigint;
        tokenId: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace PausedEvent {
    type InputTuple = [account: AddressLike];
    type OutputTuple = [account: string];
    interface OutputObject {
        account: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace PublicMintingPausedEvent {
    type InputTuple = [isPaused: boolean];
    type OutputTuple = [isPaused: boolean];
    interface OutputObject {
        isPaused: boolean;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace RoleAdminChangedEvent$1 {
    type InputTuple = [
        role: BytesLike,
        previousAdminRole: BytesLike,
        newAdminRole: BytesLike
    ];
    type OutputTuple = [
        role: string,
        previousAdminRole: string,
        newAdminRole: string
    ];
    interface OutputObject {
        role: string;
        previousAdminRole: string;
        newAdminRole: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace RoleGrantedEvent$1 {
    type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    type OutputTuple = [role: string, account: string, sender: string];
    interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace RoleRevokedEvent$1 {
    type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    type OutputTuple = [role: string, account: string, sender: string];
    interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SelectedEvent {
    type InputTuple = [owner: AddressLike, tokenId: BigNumberish];
    type OutputTuple = [owner: string, tokenId: bigint];
    interface OutputObject {
        owner: string;
        tokenId: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace TransferEvent {
    type InputTuple = [
        from: AddressLike,
        to: AddressLike,
        tokenId: BigNumberish
    ];
    type OutputTuple = [from: string, to: string, tokenId: bigint];
    interface OutputObject {
        from: string;
        to: string;
        tokenId: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace UnpausedEvent {
    type InputTuple = [account: AddressLike];
    type OutputTuple = [account: string];
    interface OutputObject {
        account: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace Upgraded_address_Event {
    type InputTuple = [implementation: AddressLike];
    type OutputTuple = [implementation: string];
    interface OutputObject {
        implementation: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace Upgraded_uint256_uint256_uint256_Event {
    type InputTuple = [
        tokenId: BigNumberish,
        oldLevel: BigNumberish,
        newLevel: BigNumberish
    ];
    type OutputTuple = [
        tokenId: bigint,
        oldLevel: bigint,
        newLevel: bigint
    ];
    interface OutputObject {
        tokenId: bigint;
        oldLevel: bigint;
        newLevel: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace XAllocationsGovernorAddressUpdatedEvent$1 {
    type InputTuple = [newAddress: AddressLike, oldAddress: AddressLike];
    type OutputTuple = [newAddress: string, oldAddress: string];
    interface OutputObject {
        newAddress: string;
        oldAddress: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace GalaxyMember$1 {
    type TokenInfoStruct = {
        tokenId: BigNumberish;
        tokenURI: string;
        tokenLevel: BigNumberish;
        b3trToUpgrade: BigNumberish;
    };
    type TokenInfoStructOutput = [
        tokenId: bigint,
        tokenURI: string,
        tokenLevel: bigint,
        b3trToUpgrade: bigint
    ] & {
        tokenId: bigint;
        tokenURI: string;
        tokenLevel: bigint;
        b3trToUpgrade: bigint;
    };
    type InitializationDataStruct = {
        name: string;
        symbol: string;
        admin: AddressLike;
        upgrader: AddressLike;
        pauser: AddressLike;
        minter: AddressLike;
        contractsAddressManager: AddressLike;
        maxLevel: BigNumberish;
        baseTokenURI: string;
        b3trToUpgradeToLevel: BigNumberish[];
        b3tr: AddressLike;
        treasury: AddressLike;
    };
    type InitializationDataStructOutput = [
        name: string,
        symbol: string,
        admin: string,
        upgrader: string,
        pauser: string,
        minter: string,
        contractsAddressManager: string,
        maxLevel: bigint,
        baseTokenURI: string,
        b3trToUpgradeToLevel: bigint[],
        b3tr: string,
        treasury: string
    ] & {
        name: string;
        symbol: string;
        admin: string;
        upgrader: string;
        pauser: string;
        minter: string;
        contractsAddressManager: string;
        maxLevel: bigint;
        baseTokenURI: string;
        b3trToUpgradeToLevel: bigint[];
        b3tr: string;
        treasury: string;
    };
}
interface GalaxyMember$1 extends BaseContract {
    connect(runner?: ContractRunner | null): GalaxyMember$1;
    waitForDeployment(): Promise<this>;
    interface: GalaxyMemberInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    CONTRACTS_ADDRESS_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;
    DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;
    MAX_LEVEL: TypedContractMethod<[], [bigint], "view">;
    MINTER_ROLE: TypedContractMethod<[], [string], "view">;
    NODES_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;
    PAUSER_ROLE: TypedContractMethod<[], [string], "view">;
    UPGRADER_ROLE: TypedContractMethod<[], [string], "view">;
    UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;
    approve: TypedContractMethod<[
        to: AddressLike,
        tokenId: BigNumberish
    ], [
        void
    ], "nonpayable">;
    attachNode: TypedContractMethod<[
        nodeTokenId: BigNumberish,
        tokenId: BigNumberish
    ], [
        void
    ], "nonpayable">;
    b3tr: TypedContractMethod<[], [string], "view">;
    b3trGovernor: TypedContractMethod<[], [string], "view">;
    balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;
    baseURI: TypedContractMethod<[], [string], "view">;
    burn: TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
    detachNode: TypedContractMethod<[
        nodeTokenId: BigNumberish,
        tokenId: BigNumberish
    ], [
        void
    ], "nonpayable">;
    freeMint: TypedContractMethod<[], [void], "nonpayable">;
    getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
    getB3TRdonated: TypedContractMethod<[
        tokenId: BigNumberish
    ], [
        bigint
    ], "view">;
    getB3TRtoUpgrade: TypedContractMethod<[
        tokenId: BigNumberish
    ], [
        bigint
    ], "view">;
    getB3TRtoUpgradeToLevel: TypedContractMethod<[
        level: BigNumberish
    ], [
        bigint
    ], "view">;
    getIdAttachedToNode: TypedContractMethod<[
        nodeId: BigNumberish
    ], [
        bigint
    ], "view">;
    getLevelAfterAttachingNode: TypedContractMethod<[
        tokenId: BigNumberish,
        nodeTokenId: BigNumberish
    ], [
        bigint
    ], "view">;
    getLevelAfterDetachingNode: TypedContractMethod<[
        tokenId: BigNumberish
    ], [
        bigint
    ], "view">;
    getNodeIdAttached: TypedContractMethod<[
        tokenId: BigNumberish
    ], [
        bigint
    ], "view">;
    getNodeLevelOf: TypedContractMethod<[nodeId: BigNumberish], [bigint], "view">;
    getNodeToFreeLevel: TypedContractMethod<[
        nodeLevel: BigNumberish
    ], [
        bigint
    ], "view">;
    getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;
    getSelectedTokenId: TypedContractMethod<[
        owner: AddressLike
    ], [
        bigint
    ], "view">;
    getSelectedTokenInfoByOwner: TypedContractMethod<[
        owner: AddressLike
    ], [
        GalaxyMember$1.TokenInfoStructOutput
    ], "view">;
    getTokenInfoByTokenId: TypedContractMethod<[
        tokenId: BigNumberish
    ], [
        GalaxyMember$1.TokenInfoStructOutput
    ], "view">;
    getTokensInfoByOwner: TypedContractMethod<[
        owner: AddressLike,
        page: BigNumberish,
        size: BigNumberish
    ], [
        GalaxyMember$1.TokenInfoStructOutput[]
    ], "view">;
    grantRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    hasRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        boolean
    ], "view">;
    initialize: TypedContractMethod<[
        data: GalaxyMember$1.InitializationDataStruct
    ], [
        void
    ], "nonpayable">;
    initializeV2: TypedContractMethod<[
        _vechainNodes: AddressLike,
        _nodesMangaement: AddressLike,
        _nodesAdmin: AddressLike,
        _nodeFreeLevels: BigNumberish[]
    ], [
        void
    ], "nonpayable">;
    isApprovedForAll: TypedContractMethod<[
        owner: AddressLike,
        operator: AddressLike
    ], [
        boolean
    ], "view">;
    levelOf: TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
    name: TypedContractMethod<[], [string], "view">;
    ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
    participatedInGovernance: TypedContractMethod<[
        user: AddressLike
    ], [
        boolean
    ], "view">;
    pause: TypedContractMethod<[], [void], "nonpayable">;
    paused: TypedContractMethod<[], [boolean], "view">;
    proxiableUUID: TypedContractMethod<[], [string], "view">;
    renounceRole: TypedContractMethod<[
        role: BytesLike,
        callerConfirmation: AddressLike
    ], [
        void
    ], "nonpayable">;
    revokeRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    "safeTransferFrom(address,address,uint256)": TypedContractMethod<[
        from: AddressLike,
        to: AddressLike,
        tokenId: BigNumberish
    ], [
        void
    ], "nonpayable">;
    "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<[
        from: AddressLike,
        to: AddressLike,
        tokenId: BigNumberish,
        data: BytesLike
    ], [
        void
    ], "nonpayable">;
    select: TypedContractMethod<[tokenID: BigNumberish], [void], "nonpayable">;
    setApprovalForAll: TypedContractMethod<[
        operator: AddressLike,
        approved: boolean
    ], [
        void
    ], "nonpayable">;
    setB3TRtoUpgradeToLevel: TypedContractMethod<[
        b3trToUpgradeToLevel: BigNumberish[]
    ], [
        void
    ], "nonpayable">;
    setB3trGovernorAddress: TypedContractMethod<[
        _b3trGovernor: AddressLike
    ], [
        void
    ], "nonpayable">;
    setBaseURI: TypedContractMethod<[baseTokenURI: string], [void], "nonpayable">;
    setIsPublicMintingPaused: TypedContractMethod<[
        isPaused: boolean
    ], [
        void
    ], "nonpayable">;
    setMaxLevel: TypedContractMethod<[level: BigNumberish], [void], "nonpayable">;
    setNodeToFreeUpgradeLevel: TypedContractMethod<[
        nodeLevel: BigNumberish,
        level: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setVechainNodes: TypedContractMethod<[
        _vechainNodes: AddressLike
    ], [
        void
    ], "nonpayable">;
    setXAllocationsGovernorAddress: TypedContractMethod<[
        _xAllocationsGovernor: AddressLike
    ], [
        void
    ], "nonpayable">;
    supportsInterface: TypedContractMethod<[
        interfaceId: BytesLike
    ], [
        boolean
    ], "view">;
    symbol: TypedContractMethod<[], [string], "view">;
    tokenByIndex: TypedContractMethod<[index: BigNumberish], [bigint], "view">;
    tokenOfOwnerByIndex: TypedContractMethod<[
        owner: AddressLike,
        index: BigNumberish
    ], [
        bigint
    ], "view">;
    tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
    totalSupply: TypedContractMethod<[], [bigint], "view">;
    transferFrom: TypedContractMethod<[
        from: AddressLike,
        to: AddressLike,
        tokenId: BigNumberish
    ], [
        void
    ], "nonpayable">;
    treasury: TypedContractMethod<[], [string], "view">;
    unpause: TypedContractMethod<[], [void], "nonpayable">;
    upgrade: TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
    upgradeToAndCall: TypedContractMethod<[
        newImplementation: AddressLike,
        data: BytesLike
    ], [
        void
    ], "payable">;
    version: TypedContractMethod<[], [string], "view">;
    xAllocationsGovernor: TypedContractMethod<[], [string], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "CONTRACTS_ADDRESS_MANAGER_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "DEFAULT_ADMIN_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "MAX_LEVEL"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "MINTER_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "NODES_MANAGER_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "PAUSER_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "UPGRADER_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "UPGRADE_INTERFACE_VERSION"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "approve"): TypedContractMethod<[
        to: AddressLike,
        tokenId: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "attachNode"): TypedContractMethod<[
        nodeTokenId: BigNumberish,
        tokenId: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "b3tr"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "b3trGovernor"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "balanceOf"): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "baseURI"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "burn"): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "detachNode"): TypedContractMethod<[
        nodeTokenId: BigNumberish,
        tokenId: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "freeMint"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "getApproved"): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
    getFunction(nameOrSignature: "getB3TRdonated"): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
    getFunction(nameOrSignature: "getB3TRtoUpgrade"): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
    getFunction(nameOrSignature: "getB3TRtoUpgradeToLevel"): TypedContractMethod<[level: BigNumberish], [bigint], "view">;
    getFunction(nameOrSignature: "getIdAttachedToNode"): TypedContractMethod<[nodeId: BigNumberish], [bigint], "view">;
    getFunction(nameOrSignature: "getLevelAfterAttachingNode"): TypedContractMethod<[
        tokenId: BigNumberish,
        nodeTokenId: BigNumberish
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "getLevelAfterDetachingNode"): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
    getFunction(nameOrSignature: "getNodeIdAttached"): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
    getFunction(nameOrSignature: "getNodeLevelOf"): TypedContractMethod<[nodeId: BigNumberish], [bigint], "view">;
    getFunction(nameOrSignature: "getNodeToFreeLevel"): TypedContractMethod<[nodeLevel: BigNumberish], [bigint], "view">;
    getFunction(nameOrSignature: "getRoleAdmin"): TypedContractMethod<[role: BytesLike], [string], "view">;
    getFunction(nameOrSignature: "getSelectedTokenId"): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "getSelectedTokenInfoByOwner"): TypedContractMethod<[
        owner: AddressLike
    ], [
        GalaxyMember$1.TokenInfoStructOutput
    ], "view">;
    getFunction(nameOrSignature: "getTokenInfoByTokenId"): TypedContractMethod<[
        tokenId: BigNumberish
    ], [
        GalaxyMember$1.TokenInfoStructOutput
    ], "view">;
    getFunction(nameOrSignature: "getTokensInfoByOwner"): TypedContractMethod<[
        owner: AddressLike,
        page: BigNumberish,
        size: BigNumberish
    ], [
        GalaxyMember$1.TokenInfoStructOutput[]
    ], "view">;
    getFunction(nameOrSignature: "grantRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "hasRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "initialize"): TypedContractMethod<[
        data: GalaxyMember$1.InitializationDataStruct
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "initializeV2"): TypedContractMethod<[
        _vechainNodes: AddressLike,
        _nodesMangaement: AddressLike,
        _nodesAdmin: AddressLike,
        _nodeFreeLevels: BigNumberish[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "isApprovedForAll"): TypedContractMethod<[
        owner: AddressLike,
        operator: AddressLike
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "levelOf"): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
    getFunction(nameOrSignature: "name"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "ownerOf"): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
    getFunction(nameOrSignature: "participatedInGovernance"): TypedContractMethod<[user: AddressLike], [boolean], "view">;
    getFunction(nameOrSignature: "pause"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "paused"): TypedContractMethod<[], [boolean], "view">;
    getFunction(nameOrSignature: "proxiableUUID"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "renounceRole"): TypedContractMethod<[
        role: BytesLike,
        callerConfirmation: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "revokeRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "safeTransferFrom(address,address,uint256)"): TypedContractMethod<[
        from: AddressLike,
        to: AddressLike,
        tokenId: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"): TypedContractMethod<[
        from: AddressLike,
        to: AddressLike,
        tokenId: BigNumberish,
        data: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "select"): TypedContractMethod<[tokenID: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "setApprovalForAll"): TypedContractMethod<[
        operator: AddressLike,
        approved: boolean
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setB3TRtoUpgradeToLevel"): TypedContractMethod<[
        b3trToUpgradeToLevel: BigNumberish[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setB3trGovernorAddress"): TypedContractMethod<[_b3trGovernor: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "setBaseURI"): TypedContractMethod<[baseTokenURI: string], [void], "nonpayable">;
    getFunction(nameOrSignature: "setIsPublicMintingPaused"): TypedContractMethod<[isPaused: boolean], [void], "nonpayable">;
    getFunction(nameOrSignature: "setMaxLevel"): TypedContractMethod<[level: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "setNodeToFreeUpgradeLevel"): TypedContractMethod<[
        nodeLevel: BigNumberish,
        level: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setVechainNodes"): TypedContractMethod<[_vechainNodes: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "setXAllocationsGovernorAddress"): TypedContractMethod<[
        _xAllocationsGovernor: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
    getFunction(nameOrSignature: "symbol"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "tokenByIndex"): TypedContractMethod<[index: BigNumberish], [bigint], "view">;
    getFunction(nameOrSignature: "tokenOfOwnerByIndex"): TypedContractMethod<[
        owner: AddressLike,
        index: BigNumberish
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "tokenURI"): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
    getFunction(nameOrSignature: "totalSupply"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "transferFrom"): TypedContractMethod<[
        from: AddressLike,
        to: AddressLike,
        tokenId: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "treasury"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "unpause"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "upgrade"): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "upgradeToAndCall"): TypedContractMethod<[
        newImplementation: AddressLike,
        data: BytesLike
    ], [
        void
    ], "payable">;
    getFunction(nameOrSignature: "version"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "xAllocationsGovernor"): TypedContractMethod<[], [string], "view">;
    getEvent(key: "Approval"): TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
    getEvent(key: "ApprovalForAll"): TypedContractEvent<ApprovalForAllEvent.InputTuple, ApprovalForAllEvent.OutputTuple, ApprovalForAllEvent.OutputObject>;
    getEvent(key: "B3TRtoUpgradeToLevelUpdated"): TypedContractEvent<B3TRtoUpgradeToLevelUpdatedEvent.InputTuple, B3TRtoUpgradeToLevelUpdatedEvent.OutputTuple, B3TRtoUpgradeToLevelUpdatedEvent.OutputObject>;
    getEvent(key: "B3trGovernorAddressUpdated"): TypedContractEvent<B3trGovernorAddressUpdatedEvent.InputTuple, B3trGovernorAddressUpdatedEvent.OutputTuple, B3trGovernorAddressUpdatedEvent.OutputObject>;
    getEvent(key: "BaseURIUpdated"): TypedContractEvent<BaseURIUpdatedEvent.InputTuple, BaseURIUpdatedEvent.OutputTuple, BaseURIUpdatedEvent.OutputObject>;
    getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent$1.InputTuple, InitializedEvent$1.OutputTuple, InitializedEvent$1.OutputObject>;
    getEvent(key: "MaxLevelUpdated"): TypedContractEvent<MaxLevelUpdatedEvent.InputTuple, MaxLevelUpdatedEvent.OutputTuple, MaxLevelUpdatedEvent.OutputObject>;
    getEvent(key: "NodeAttached"): TypedContractEvent<NodeAttachedEvent.InputTuple, NodeAttachedEvent.OutputTuple, NodeAttachedEvent.OutputObject>;
    getEvent(key: "NodeDetached"): TypedContractEvent<NodeDetachedEvent.InputTuple, NodeDetachedEvent.OutputTuple, NodeDetachedEvent.OutputObject>;
    getEvent(key: "Paused"): TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
    getEvent(key: "PublicMintingPaused"): TypedContractEvent<PublicMintingPausedEvent.InputTuple, PublicMintingPausedEvent.OutputTuple, PublicMintingPausedEvent.OutputObject>;
    getEvent(key: "RoleAdminChanged"): TypedContractEvent<RoleAdminChangedEvent$1.InputTuple, RoleAdminChangedEvent$1.OutputTuple, RoleAdminChangedEvent$1.OutputObject>;
    getEvent(key: "RoleGranted"): TypedContractEvent<RoleGrantedEvent$1.InputTuple, RoleGrantedEvent$1.OutputTuple, RoleGrantedEvent$1.OutputObject>;
    getEvent(key: "RoleRevoked"): TypedContractEvent<RoleRevokedEvent$1.InputTuple, RoleRevokedEvent$1.OutputTuple, RoleRevokedEvent$1.OutputObject>;
    getEvent(key: "Selected"): TypedContractEvent<SelectedEvent.InputTuple, SelectedEvent.OutputTuple, SelectedEvent.OutputObject>;
    getEvent(key: "Transfer"): TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
    getEvent(key: "Unpaused"): TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;
    getEvent(key: "Upgraded(address)"): TypedContractEvent<Upgraded_address_Event.InputTuple, Upgraded_address_Event.OutputTuple, Upgraded_address_Event.OutputObject>;
    getEvent(key: "Upgraded(uint256,uint256,uint256)"): TypedContractEvent<Upgraded_uint256_uint256_uint256_Event.InputTuple, Upgraded_uint256_uint256_uint256_Event.OutputTuple, Upgraded_uint256_uint256_uint256_Event.OutputObject>;
    getEvent(key: "XAllocationsGovernorAddressUpdated"): TypedContractEvent<XAllocationsGovernorAddressUpdatedEvent$1.InputTuple, XAllocationsGovernorAddressUpdatedEvent$1.OutputTuple, XAllocationsGovernorAddressUpdatedEvent$1.OutputObject>;
    filters: {
        "Approval(address,address,uint256)": TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
        Approval: TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
        "ApprovalForAll(address,address,bool)": TypedContractEvent<ApprovalForAllEvent.InputTuple, ApprovalForAllEvent.OutputTuple, ApprovalForAllEvent.OutputObject>;
        ApprovalForAll: TypedContractEvent<ApprovalForAllEvent.InputTuple, ApprovalForAllEvent.OutputTuple, ApprovalForAllEvent.OutputObject>;
        "B3TRtoUpgradeToLevelUpdated(uint256[])": TypedContractEvent<B3TRtoUpgradeToLevelUpdatedEvent.InputTuple, B3TRtoUpgradeToLevelUpdatedEvent.OutputTuple, B3TRtoUpgradeToLevelUpdatedEvent.OutputObject>;
        B3TRtoUpgradeToLevelUpdated: TypedContractEvent<B3TRtoUpgradeToLevelUpdatedEvent.InputTuple, B3TRtoUpgradeToLevelUpdatedEvent.OutputTuple, B3TRtoUpgradeToLevelUpdatedEvent.OutputObject>;
        "B3trGovernorAddressUpdated(address,address)": TypedContractEvent<B3trGovernorAddressUpdatedEvent.InputTuple, B3trGovernorAddressUpdatedEvent.OutputTuple, B3trGovernorAddressUpdatedEvent.OutputObject>;
        B3trGovernorAddressUpdated: TypedContractEvent<B3trGovernorAddressUpdatedEvent.InputTuple, B3trGovernorAddressUpdatedEvent.OutputTuple, B3trGovernorAddressUpdatedEvent.OutputObject>;
        "BaseURIUpdated(string,string)": TypedContractEvent<BaseURIUpdatedEvent.InputTuple, BaseURIUpdatedEvent.OutputTuple, BaseURIUpdatedEvent.OutputObject>;
        BaseURIUpdated: TypedContractEvent<BaseURIUpdatedEvent.InputTuple, BaseURIUpdatedEvent.OutputTuple, BaseURIUpdatedEvent.OutputObject>;
        "Initialized(uint64)": TypedContractEvent<InitializedEvent$1.InputTuple, InitializedEvent$1.OutputTuple, InitializedEvent$1.OutputObject>;
        Initialized: TypedContractEvent<InitializedEvent$1.InputTuple, InitializedEvent$1.OutputTuple, InitializedEvent$1.OutputObject>;
        "MaxLevelUpdated(uint256,uint256)": TypedContractEvent<MaxLevelUpdatedEvent.InputTuple, MaxLevelUpdatedEvent.OutputTuple, MaxLevelUpdatedEvent.OutputObject>;
        MaxLevelUpdated: TypedContractEvent<MaxLevelUpdatedEvent.InputTuple, MaxLevelUpdatedEvent.OutputTuple, MaxLevelUpdatedEvent.OutputObject>;
        "NodeAttached(uint256,uint256)": TypedContractEvent<NodeAttachedEvent.InputTuple, NodeAttachedEvent.OutputTuple, NodeAttachedEvent.OutputObject>;
        NodeAttached: TypedContractEvent<NodeAttachedEvent.InputTuple, NodeAttachedEvent.OutputTuple, NodeAttachedEvent.OutputObject>;
        "NodeDetached(uint256,uint256)": TypedContractEvent<NodeDetachedEvent.InputTuple, NodeDetachedEvent.OutputTuple, NodeDetachedEvent.OutputObject>;
        NodeDetached: TypedContractEvent<NodeDetachedEvent.InputTuple, NodeDetachedEvent.OutputTuple, NodeDetachedEvent.OutputObject>;
        "Paused(address)": TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
        Paused: TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
        "PublicMintingPaused(bool)": TypedContractEvent<PublicMintingPausedEvent.InputTuple, PublicMintingPausedEvent.OutputTuple, PublicMintingPausedEvent.OutputObject>;
        PublicMintingPaused: TypedContractEvent<PublicMintingPausedEvent.InputTuple, PublicMintingPausedEvent.OutputTuple, PublicMintingPausedEvent.OutputObject>;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<RoleAdminChangedEvent$1.InputTuple, RoleAdminChangedEvent$1.OutputTuple, RoleAdminChangedEvent$1.OutputObject>;
        RoleAdminChanged: TypedContractEvent<RoleAdminChangedEvent$1.InputTuple, RoleAdminChangedEvent$1.OutputTuple, RoleAdminChangedEvent$1.OutputObject>;
        "RoleGranted(bytes32,address,address)": TypedContractEvent<RoleGrantedEvent$1.InputTuple, RoleGrantedEvent$1.OutputTuple, RoleGrantedEvent$1.OutputObject>;
        RoleGranted: TypedContractEvent<RoleGrantedEvent$1.InputTuple, RoleGrantedEvent$1.OutputTuple, RoleGrantedEvent$1.OutputObject>;
        "RoleRevoked(bytes32,address,address)": TypedContractEvent<RoleRevokedEvent$1.InputTuple, RoleRevokedEvent$1.OutputTuple, RoleRevokedEvent$1.OutputObject>;
        RoleRevoked: TypedContractEvent<RoleRevokedEvent$1.InputTuple, RoleRevokedEvent$1.OutputTuple, RoleRevokedEvent$1.OutputObject>;
        "Selected(address,uint256)": TypedContractEvent<SelectedEvent.InputTuple, SelectedEvent.OutputTuple, SelectedEvent.OutputObject>;
        Selected: TypedContractEvent<SelectedEvent.InputTuple, SelectedEvent.OutputTuple, SelectedEvent.OutputObject>;
        "Transfer(address,address,uint256)": TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
        Transfer: TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
        "Unpaused(address)": TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;
        Unpaused: TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;
        "Upgraded(address)": TypedContractEvent<Upgraded_address_Event.InputTuple, Upgraded_address_Event.OutputTuple, Upgraded_address_Event.OutputObject>;
        "Upgraded(uint256,uint256,uint256)": TypedContractEvent<Upgraded_uint256_uint256_uint256_Event.InputTuple, Upgraded_uint256_uint256_uint256_Event.OutputTuple, Upgraded_uint256_uint256_uint256_Event.OutputObject>;
        "XAllocationsGovernorAddressUpdated(address,address)": TypedContractEvent<XAllocationsGovernorAddressUpdatedEvent$1.InputTuple, XAllocationsGovernorAddressUpdatedEvent$1.OutputTuple, XAllocationsGovernorAddressUpdatedEvent$1.OutputObject>;
        XAllocationsGovernorAddressUpdated: TypedContractEvent<XAllocationsGovernorAddressUpdatedEvent$1.InputTuple, XAllocationsGovernorAddressUpdatedEvent$1.OutputTuple, XAllocationsGovernorAddressUpdatedEvent$1.OutputObject>;
    };
}

interface EmissionsInterface extends Interface {
    getFunction(nameOrSignature: "CONTRACTS_ADDRESS_MANAGER_ROLE" | "DECAY_SETTINGS_MANAGER_ROLE" | "DEFAULT_ADMIN_ROLE" | "MINTER_ROLE" | "SCALING_FACTOR" | "UPGRADER_ROLE" | "UPGRADE_INTERFACE_VERSION" | "b3tr" | "bootstrap" | "cycleDuration" | "distribute" | "emissions" | "getCurrentCycle" | "getNextCycleBlock" | "getRemainingEmissions" | "getRoleAdmin" | "getTreasuryAmount" | "getVote2EarnAmount" | "getXAllocationAmount" | "grantRole" | "hasRole" | "initialXAppAllocation" | "initialize" | "initializeV2" | "isCycleDistributed" | "isCycleEnded" | "isEmissionsNotAligned" | "isNextCycleDistributable" | "lastEmissionBlock" | "maxVote2EarnDecay" | "nextCycle" | "proxiableUUID" | "renounceRole" | "revokeRole" | "setCycleDuration" | "setMaxVote2EarnDecay" | "setTreasuryAddress" | "setTreasuryPercentage" | "setVote2EarnAddress" | "setVote2EarnDecay" | "setVote2EarnDecayPeriod" | "setXAllocationsDecay" | "setXAllocationsDecayPeriod" | "setXAllocationsGovernorAddress" | "setXallocationsAddress" | "start" | "supportsInterface" | "totalEmissions" | "treasury" | "treasuryPercentage" | "upgradeToAndCall" | "version" | "vote2Earn" | "vote2EarnDecay" | "vote2EarnDecayPeriod" | "xAllocations" | "xAllocationsDecay" | "xAllocationsDecayPeriod" | "xAllocationsGovernor"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "EmissionCycleDurationUpdated" | "EmissionDistributed" | "Initialized" | "MaxVote2EarnDecayUpdated" | "RoleAdminChanged" | "RoleGranted" | "RoleRevoked" | "TreasuryAddressUpdated" | "TreasuryPercentageUpdated" | "Upgraded" | "Vote2EarnAddressUpdated" | "Vote2EarnDecayPeriodUpdated" | "Vote2EarnDecayUpdated" | "XAllocationsAddressUpdated" | "XAllocationsDecayPeriodUpdated" | "XAllocationsDecayUpdated" | "XAllocationsGovernorAddressUpdated"): EventFragment;
    encodeFunctionData(functionFragment: "CONTRACTS_ADDRESS_MANAGER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "DECAY_SETTINGS_MANAGER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "MINTER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "SCALING_FACTOR", values?: undefined): string;
    encodeFunctionData(functionFragment: "UPGRADER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "UPGRADE_INTERFACE_VERSION", values?: undefined): string;
    encodeFunctionData(functionFragment: "b3tr", values?: undefined): string;
    encodeFunctionData(functionFragment: "bootstrap", values?: undefined): string;
    encodeFunctionData(functionFragment: "cycleDuration", values?: undefined): string;
    encodeFunctionData(functionFragment: "distribute", values?: undefined): string;
    encodeFunctionData(functionFragment: "emissions", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getCurrentCycle", values?: undefined): string;
    encodeFunctionData(functionFragment: "getNextCycleBlock", values?: undefined): string;
    encodeFunctionData(functionFragment: "getRemainingEmissions", values?: undefined): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getTreasuryAmount", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getVote2EarnAmount", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getXAllocationAmount", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "initialXAppAllocation", values?: undefined): string;
    encodeFunctionData(functionFragment: "initialize", values: [Emissions$1.InitializationDataStruct]): string;
    encodeFunctionData(functionFragment: "initializeV2", values: [boolean]): string;
    encodeFunctionData(functionFragment: "isCycleDistributed", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "isCycleEnded", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "isEmissionsNotAligned", values?: undefined): string;
    encodeFunctionData(functionFragment: "isNextCycleDistributable", values?: undefined): string;
    encodeFunctionData(functionFragment: "lastEmissionBlock", values?: undefined): string;
    encodeFunctionData(functionFragment: "maxVote2EarnDecay", values?: undefined): string;
    encodeFunctionData(functionFragment: "nextCycle", values?: undefined): string;
    encodeFunctionData(functionFragment: "proxiableUUID", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "setCycleDuration", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setMaxVote2EarnDecay", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setTreasuryAddress", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setTreasuryPercentage", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setVote2EarnAddress", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setVote2EarnDecay", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setVote2EarnDecayPeriod", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setXAllocationsDecay", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setXAllocationsDecayPeriod", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setXAllocationsGovernorAddress", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setXallocationsAddress", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "start", values?: undefined): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "totalEmissions", values?: undefined): string;
    encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
    encodeFunctionData(functionFragment: "treasuryPercentage", values?: undefined): string;
    encodeFunctionData(functionFragment: "upgradeToAndCall", values: [AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    encodeFunctionData(functionFragment: "vote2Earn", values?: undefined): string;
    encodeFunctionData(functionFragment: "vote2EarnDecay", values?: undefined): string;
    encodeFunctionData(functionFragment: "vote2EarnDecayPeriod", values?: undefined): string;
    encodeFunctionData(functionFragment: "xAllocations", values?: undefined): string;
    encodeFunctionData(functionFragment: "xAllocationsDecay", values?: undefined): string;
    encodeFunctionData(functionFragment: "xAllocationsDecayPeriod", values?: undefined): string;
    encodeFunctionData(functionFragment: "xAllocationsGovernor", values?: undefined): string;
    decodeFunctionResult(functionFragment: "CONTRACTS_ADDRESS_MANAGER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "DECAY_SETTINGS_MANAGER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "MINTER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "SCALING_FACTOR", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UPGRADER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UPGRADE_INTERFACE_VERSION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "b3tr", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "bootstrap", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "cycleDuration", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "emissions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getCurrentCycle", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getNextCycleBlock", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRemainingEmissions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTreasuryAmount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getVote2EarnAmount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getXAllocationAmount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialXAppAllocation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initializeV2", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isCycleDistributed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isCycleEnded", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isEmissionsNotAligned", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isNextCycleDistributable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lastEmissionBlock", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maxVote2EarnDecay", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextCycle", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proxiableUUID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setCycleDuration", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMaxVote2EarnDecay", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTreasuryAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTreasuryPercentage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setVote2EarnAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setVote2EarnDecay", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setVote2EarnDecayPeriod", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setXAllocationsDecay", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setXAllocationsDecayPeriod", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setXAllocationsGovernorAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setXallocationsAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalEmissions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "treasuryPercentage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeToAndCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "vote2Earn", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "vote2EarnDecay", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "vote2EarnDecayPeriod", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "xAllocations", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "xAllocationsDecay", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "xAllocationsDecayPeriod", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "xAllocationsGovernor", data: BytesLike): Result;
}
declare namespace EmissionCycleDurationUpdatedEvent {
    type InputTuple = [
        newDuration: BigNumberish,
        oldDuration: BigNumberish
    ];
    type OutputTuple = [newDuration: bigint, oldDuration: bigint];
    interface OutputObject {
        newDuration: bigint;
        oldDuration: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace EmissionDistributedEvent {
    type InputTuple = [
        cycle: BigNumberish,
        xAllocations: BigNumberish,
        vote2Earn: BigNumberish,
        treasury: BigNumberish
    ];
    type OutputTuple = [
        cycle: bigint,
        xAllocations: bigint,
        vote2Earn: bigint,
        treasury: bigint
    ];
    interface OutputObject {
        cycle: bigint;
        xAllocations: bigint;
        vote2Earn: bigint;
        treasury: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace InitializedEvent {
    type InputTuple = [version: BigNumberish];
    type OutputTuple = [version: bigint];
    interface OutputObject {
        version: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace MaxVote2EarnDecayUpdatedEvent {
    type InputTuple = [newDecay: BigNumberish, oldDecay: BigNumberish];
    type OutputTuple = [newDecay: bigint, oldDecay: bigint];
    interface OutputObject {
        newDecay: bigint;
        oldDecay: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace RoleAdminChangedEvent {
    type InputTuple = [
        role: BytesLike,
        previousAdminRole: BytesLike,
        newAdminRole: BytesLike
    ];
    type OutputTuple = [
        role: string,
        previousAdminRole: string,
        newAdminRole: string
    ];
    interface OutputObject {
        role: string;
        previousAdminRole: string;
        newAdminRole: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace RoleGrantedEvent {
    type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    type OutputTuple = [role: string, account: string, sender: string];
    interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace RoleRevokedEvent {
    type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    type OutputTuple = [role: string, account: string, sender: string];
    interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace TreasuryAddressUpdatedEvent {
    type InputTuple = [newAddress: AddressLike, oldAddress: AddressLike];
    type OutputTuple = [newAddress: string, oldAddress: string];
    interface OutputObject {
        newAddress: string;
        oldAddress: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace TreasuryPercentageUpdatedEvent {
    type InputTuple = [
        newPercentage: BigNumberish,
        oldPercentage: BigNumberish
    ];
    type OutputTuple = [newPercentage: bigint, oldPercentage: bigint];
    interface OutputObject {
        newPercentage: bigint;
        oldPercentage: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace UpgradedEvent {
    type InputTuple = [implementation: AddressLike];
    type OutputTuple = [implementation: string];
    interface OutputObject {
        implementation: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace Vote2EarnAddressUpdatedEvent {
    type InputTuple = [newAddress: AddressLike, oldAddress: AddressLike];
    type OutputTuple = [newAddress: string, oldAddress: string];
    interface OutputObject {
        newAddress: string;
        oldAddress: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace Vote2EarnDecayPeriodUpdatedEvent {
    type InputTuple = [newPeriod: BigNumberish, oldPeriod: BigNumberish];
    type OutputTuple = [newPeriod: bigint, oldPeriod: bigint];
    interface OutputObject {
        newPeriod: bigint;
        oldPeriod: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace Vote2EarnDecayUpdatedEvent {
    type InputTuple = [newDecay: BigNumberish, oldDecay: BigNumberish];
    type OutputTuple = [newDecay: bigint, oldDecay: bigint];
    interface OutputObject {
        newDecay: bigint;
        oldDecay: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace XAllocationsAddressUpdatedEvent {
    type InputTuple = [newAddress: AddressLike, oldAddress: AddressLike];
    type OutputTuple = [newAddress: string, oldAddress: string];
    interface OutputObject {
        newAddress: string;
        oldAddress: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace XAllocationsDecayPeriodUpdatedEvent {
    type InputTuple = [newPeriod: BigNumberish, oldPeriod: BigNumberish];
    type OutputTuple = [newPeriod: bigint, oldPeriod: bigint];
    interface OutputObject {
        newPeriod: bigint;
        oldPeriod: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace XAllocationsDecayUpdatedEvent {
    type InputTuple = [newDecay: BigNumberish, oldDecay: BigNumberish];
    type OutputTuple = [newDecay: bigint, oldDecay: bigint];
    interface OutputObject {
        newDecay: bigint;
        oldDecay: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace XAllocationsGovernorAddressUpdatedEvent {
    type InputTuple = [newAddress: AddressLike, oldAddress: AddressLike];
    type OutputTuple = [newAddress: string, oldAddress: string];
    interface OutputObject {
        newAddress: string;
        oldAddress: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace Emissions$1 {
    type EmissionStruct = {
        xAllocations: BigNumberish;
        vote2Earn: BigNumberish;
        treasury: BigNumberish;
    };
    type EmissionStructOutput = [
        xAllocations: bigint,
        vote2Earn: bigint,
        treasury: bigint
    ] & {
        xAllocations: bigint;
        vote2Earn: bigint;
        treasury: bigint;
    };
    type InitializationDataStruct = {
        minter: AddressLike;
        admin: AddressLike;
        upgrader: AddressLike;
        contractsAddressManager: AddressLike;
        decaySettingsManager: AddressLike;
        b3trAddress: AddressLike;
        destinations: [AddressLike, AddressLike, AddressLike, AddressLike];
        migrationAmount: BigNumberish;
        initialXAppAllocation: BigNumberish;
        cycleDuration: BigNumberish;
        decaySettings: [BigNumberish, BigNumberish, BigNumberish, BigNumberish];
        treasuryPercentage: BigNumberish;
        maxVote2EarnDecay: BigNumberish;
    };
    type InitializationDataStructOutput = [
        minter: string,
        admin: string,
        upgrader: string,
        contractsAddressManager: string,
        decaySettingsManager: string,
        b3trAddress: string,
        destinations: [string, string, string, string],
        migrationAmount: bigint,
        initialXAppAllocation: bigint,
        cycleDuration: bigint,
        decaySettings: [bigint, bigint, bigint, bigint],
        treasuryPercentage: bigint,
        maxVote2EarnDecay: bigint
    ] & {
        minter: string;
        admin: string;
        upgrader: string;
        contractsAddressManager: string;
        decaySettingsManager: string;
        b3trAddress: string;
        destinations: [string, string, string, string];
        migrationAmount: bigint;
        initialXAppAllocation: bigint;
        cycleDuration: bigint;
        decaySettings: [bigint, bigint, bigint, bigint];
        treasuryPercentage: bigint;
        maxVote2EarnDecay: bigint;
    };
}
interface Emissions$1 extends BaseContract {
    connect(runner?: ContractRunner | null): Emissions$1;
    waitForDeployment(): Promise<this>;
    interface: EmissionsInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    CONTRACTS_ADDRESS_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;
    DECAY_SETTINGS_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;
    DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;
    MINTER_ROLE: TypedContractMethod<[], [string], "view">;
    SCALING_FACTOR: TypedContractMethod<[], [bigint], "view">;
    UPGRADER_ROLE: TypedContractMethod<[], [string], "view">;
    UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;
    b3tr: TypedContractMethod<[], [string], "view">;
    bootstrap: TypedContractMethod<[], [void], "nonpayable">;
    cycleDuration: TypedContractMethod<[], [bigint], "view">;
    distribute: TypedContractMethod<[], [void], "nonpayable">;
    emissions: TypedContractMethod<[
        cycle: BigNumberish
    ], [
        Emissions$1.EmissionStructOutput
    ], "view">;
    getCurrentCycle: TypedContractMethod<[], [bigint], "view">;
    getNextCycleBlock: TypedContractMethod<[], [bigint], "view">;
    getRemainingEmissions: TypedContractMethod<[], [bigint], "view">;
    getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;
    getTreasuryAmount: TypedContractMethod<[
        cycle: BigNumberish
    ], [
        bigint
    ], "view">;
    getVote2EarnAmount: TypedContractMethod<[
        cycle: BigNumberish
    ], [
        bigint
    ], "view">;
    getXAllocationAmount: TypedContractMethod<[
        cycle: BigNumberish
    ], [
        bigint
    ], "view">;
    grantRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    hasRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        boolean
    ], "view">;
    initialXAppAllocation: TypedContractMethod<[], [bigint], "view">;
    initialize: TypedContractMethod<[
        data: Emissions$1.InitializationDataStruct
    ], [
        void
    ], "nonpayable">;
    initializeV2: TypedContractMethod<[
        _isEmissionsNotAligned: boolean
    ], [
        void
    ], "nonpayable">;
    isCycleDistributed: TypedContractMethod<[
        cycle: BigNumberish
    ], [
        boolean
    ], "view">;
    isCycleEnded: TypedContractMethod<[cycle: BigNumberish], [boolean], "view">;
    isEmissionsNotAligned: TypedContractMethod<[], [boolean], "view">;
    isNextCycleDistributable: TypedContractMethod<[], [boolean], "view">;
    lastEmissionBlock: TypedContractMethod<[], [bigint], "view">;
    maxVote2EarnDecay: TypedContractMethod<[], [bigint], "view">;
    nextCycle: TypedContractMethod<[], [bigint], "view">;
    proxiableUUID: TypedContractMethod<[], [string], "view">;
    renounceRole: TypedContractMethod<[
        role: BytesLike,
        callerConfirmation: AddressLike
    ], [
        void
    ], "nonpayable">;
    revokeRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    setCycleDuration: TypedContractMethod<[
        _cycleDuration: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setMaxVote2EarnDecay: TypedContractMethod<[
        _maxVote2EarnDecay: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setTreasuryAddress: TypedContractMethod<[
        treasuryAddress: AddressLike
    ], [
        void
    ], "nonpayable">;
    setTreasuryPercentage: TypedContractMethod<[
        _percentage: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setVote2EarnAddress: TypedContractMethod<[
        vote2EarnAddress: AddressLike
    ], [
        void
    ], "nonpayable">;
    setVote2EarnDecay: TypedContractMethod<[
        _decay: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setVote2EarnDecayPeriod: TypedContractMethod<[
        _period: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setXAllocationsDecay: TypedContractMethod<[
        _decay: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setXAllocationsDecayPeriod: TypedContractMethod<[
        _period: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setXAllocationsGovernorAddress: TypedContractMethod<[
        _xAllocationsGovernor: AddressLike
    ], [
        void
    ], "nonpayable">;
    setXallocationsAddress: TypedContractMethod<[
        xAllocationAddress: AddressLike
    ], [
        void
    ], "nonpayable">;
    start: TypedContractMethod<[], [void], "nonpayable">;
    supportsInterface: TypedContractMethod<[
        interfaceId: BytesLike
    ], [
        boolean
    ], "view">;
    totalEmissions: TypedContractMethod<[], [bigint], "view">;
    treasury: TypedContractMethod<[], [string], "view">;
    treasuryPercentage: TypedContractMethod<[], [bigint], "view">;
    upgradeToAndCall: TypedContractMethod<[
        newImplementation: AddressLike,
        data: BytesLike
    ], [
        void
    ], "payable">;
    version: TypedContractMethod<[], [string], "view">;
    vote2Earn: TypedContractMethod<[], [string], "view">;
    vote2EarnDecay: TypedContractMethod<[], [bigint], "view">;
    vote2EarnDecayPeriod: TypedContractMethod<[], [bigint], "view">;
    xAllocations: TypedContractMethod<[], [string], "view">;
    xAllocationsDecay: TypedContractMethod<[], [bigint], "view">;
    xAllocationsDecayPeriod: TypedContractMethod<[], [bigint], "view">;
    xAllocationsGovernor: TypedContractMethod<[], [string], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "CONTRACTS_ADDRESS_MANAGER_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "DECAY_SETTINGS_MANAGER_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "DEFAULT_ADMIN_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "MINTER_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "SCALING_FACTOR"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "UPGRADER_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "UPGRADE_INTERFACE_VERSION"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "b3tr"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "bootstrap"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "cycleDuration"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "distribute"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "emissions"): TypedContractMethod<[
        cycle: BigNumberish
    ], [
        Emissions$1.EmissionStructOutput
    ], "view">;
    getFunction(nameOrSignature: "getCurrentCycle"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "getNextCycleBlock"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "getRemainingEmissions"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "getRoleAdmin"): TypedContractMethod<[role: BytesLike], [string], "view">;
    getFunction(nameOrSignature: "getTreasuryAmount"): TypedContractMethod<[cycle: BigNumberish], [bigint], "view">;
    getFunction(nameOrSignature: "getVote2EarnAmount"): TypedContractMethod<[cycle: BigNumberish], [bigint], "view">;
    getFunction(nameOrSignature: "getXAllocationAmount"): TypedContractMethod<[cycle: BigNumberish], [bigint], "view">;
    getFunction(nameOrSignature: "grantRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "hasRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "initialXAppAllocation"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "initialize"): TypedContractMethod<[
        data: Emissions$1.InitializationDataStruct
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "initializeV2"): TypedContractMethod<[
        _isEmissionsNotAligned: boolean
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "isCycleDistributed"): TypedContractMethod<[cycle: BigNumberish], [boolean], "view">;
    getFunction(nameOrSignature: "isCycleEnded"): TypedContractMethod<[cycle: BigNumberish], [boolean], "view">;
    getFunction(nameOrSignature: "isEmissionsNotAligned"): TypedContractMethod<[], [boolean], "view">;
    getFunction(nameOrSignature: "isNextCycleDistributable"): TypedContractMethod<[], [boolean], "view">;
    getFunction(nameOrSignature: "lastEmissionBlock"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "maxVote2EarnDecay"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "nextCycle"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "proxiableUUID"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "renounceRole"): TypedContractMethod<[
        role: BytesLike,
        callerConfirmation: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "revokeRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setCycleDuration"): TypedContractMethod<[_cycleDuration: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "setMaxVote2EarnDecay"): TypedContractMethod<[
        _maxVote2EarnDecay: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setTreasuryAddress"): TypedContractMethod<[treasuryAddress: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "setTreasuryPercentage"): TypedContractMethod<[_percentage: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "setVote2EarnAddress"): TypedContractMethod<[vote2EarnAddress: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "setVote2EarnDecay"): TypedContractMethod<[_decay: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "setVote2EarnDecayPeriod"): TypedContractMethod<[_period: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "setXAllocationsDecay"): TypedContractMethod<[_decay: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "setXAllocationsDecayPeriod"): TypedContractMethod<[_period: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "setXAllocationsGovernorAddress"): TypedContractMethod<[
        _xAllocationsGovernor: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setXallocationsAddress"): TypedContractMethod<[
        xAllocationAddress: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "start"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
    getFunction(nameOrSignature: "totalEmissions"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "treasury"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "treasuryPercentage"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "upgradeToAndCall"): TypedContractMethod<[
        newImplementation: AddressLike,
        data: BytesLike
    ], [
        void
    ], "payable">;
    getFunction(nameOrSignature: "version"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "vote2Earn"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "vote2EarnDecay"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "vote2EarnDecayPeriod"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "xAllocations"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "xAllocationsDecay"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "xAllocationsDecayPeriod"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "xAllocationsGovernor"): TypedContractMethod<[], [string], "view">;
    getEvent(key: "EmissionCycleDurationUpdated"): TypedContractEvent<EmissionCycleDurationUpdatedEvent.InputTuple, EmissionCycleDurationUpdatedEvent.OutputTuple, EmissionCycleDurationUpdatedEvent.OutputObject>;
    getEvent(key: "EmissionDistributed"): TypedContractEvent<EmissionDistributedEvent.InputTuple, EmissionDistributedEvent.OutputTuple, EmissionDistributedEvent.OutputObject>;
    getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
    getEvent(key: "MaxVote2EarnDecayUpdated"): TypedContractEvent<MaxVote2EarnDecayUpdatedEvent.InputTuple, MaxVote2EarnDecayUpdatedEvent.OutputTuple, MaxVote2EarnDecayUpdatedEvent.OutputObject>;
    getEvent(key: "RoleAdminChanged"): TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
    getEvent(key: "RoleGranted"): TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
    getEvent(key: "RoleRevoked"): TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
    getEvent(key: "TreasuryAddressUpdated"): TypedContractEvent<TreasuryAddressUpdatedEvent.InputTuple, TreasuryAddressUpdatedEvent.OutputTuple, TreasuryAddressUpdatedEvent.OutputObject>;
    getEvent(key: "TreasuryPercentageUpdated"): TypedContractEvent<TreasuryPercentageUpdatedEvent.InputTuple, TreasuryPercentageUpdatedEvent.OutputTuple, TreasuryPercentageUpdatedEvent.OutputObject>;
    getEvent(key: "Upgraded"): TypedContractEvent<UpgradedEvent.InputTuple, UpgradedEvent.OutputTuple, UpgradedEvent.OutputObject>;
    getEvent(key: "Vote2EarnAddressUpdated"): TypedContractEvent<Vote2EarnAddressUpdatedEvent.InputTuple, Vote2EarnAddressUpdatedEvent.OutputTuple, Vote2EarnAddressUpdatedEvent.OutputObject>;
    getEvent(key: "Vote2EarnDecayPeriodUpdated"): TypedContractEvent<Vote2EarnDecayPeriodUpdatedEvent.InputTuple, Vote2EarnDecayPeriodUpdatedEvent.OutputTuple, Vote2EarnDecayPeriodUpdatedEvent.OutputObject>;
    getEvent(key: "Vote2EarnDecayUpdated"): TypedContractEvent<Vote2EarnDecayUpdatedEvent.InputTuple, Vote2EarnDecayUpdatedEvent.OutputTuple, Vote2EarnDecayUpdatedEvent.OutputObject>;
    getEvent(key: "XAllocationsAddressUpdated"): TypedContractEvent<XAllocationsAddressUpdatedEvent.InputTuple, XAllocationsAddressUpdatedEvent.OutputTuple, XAllocationsAddressUpdatedEvent.OutputObject>;
    getEvent(key: "XAllocationsDecayPeriodUpdated"): TypedContractEvent<XAllocationsDecayPeriodUpdatedEvent.InputTuple, XAllocationsDecayPeriodUpdatedEvent.OutputTuple, XAllocationsDecayPeriodUpdatedEvent.OutputObject>;
    getEvent(key: "XAllocationsDecayUpdated"): TypedContractEvent<XAllocationsDecayUpdatedEvent.InputTuple, XAllocationsDecayUpdatedEvent.OutputTuple, XAllocationsDecayUpdatedEvent.OutputObject>;
    getEvent(key: "XAllocationsGovernorAddressUpdated"): TypedContractEvent<XAllocationsGovernorAddressUpdatedEvent.InputTuple, XAllocationsGovernorAddressUpdatedEvent.OutputTuple, XAllocationsGovernorAddressUpdatedEvent.OutputObject>;
    filters: {
        "EmissionCycleDurationUpdated(uint256,uint256)": TypedContractEvent<EmissionCycleDurationUpdatedEvent.InputTuple, EmissionCycleDurationUpdatedEvent.OutputTuple, EmissionCycleDurationUpdatedEvent.OutputObject>;
        EmissionCycleDurationUpdated: TypedContractEvent<EmissionCycleDurationUpdatedEvent.InputTuple, EmissionCycleDurationUpdatedEvent.OutputTuple, EmissionCycleDurationUpdatedEvent.OutputObject>;
        "EmissionDistributed(uint256,uint256,uint256,uint256)": TypedContractEvent<EmissionDistributedEvent.InputTuple, EmissionDistributedEvent.OutputTuple, EmissionDistributedEvent.OutputObject>;
        EmissionDistributed: TypedContractEvent<EmissionDistributedEvent.InputTuple, EmissionDistributedEvent.OutputTuple, EmissionDistributedEvent.OutputObject>;
        "Initialized(uint64)": TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
        Initialized: TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
        "MaxVote2EarnDecayUpdated(uint256,uint256)": TypedContractEvent<MaxVote2EarnDecayUpdatedEvent.InputTuple, MaxVote2EarnDecayUpdatedEvent.OutputTuple, MaxVote2EarnDecayUpdatedEvent.OutputObject>;
        MaxVote2EarnDecayUpdated: TypedContractEvent<MaxVote2EarnDecayUpdatedEvent.InputTuple, MaxVote2EarnDecayUpdatedEvent.OutputTuple, MaxVote2EarnDecayUpdatedEvent.OutputObject>;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
        RoleAdminChanged: TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
        "RoleGranted(bytes32,address,address)": TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
        RoleGranted: TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
        "RoleRevoked(bytes32,address,address)": TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
        RoleRevoked: TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
        "TreasuryAddressUpdated(address,address)": TypedContractEvent<TreasuryAddressUpdatedEvent.InputTuple, TreasuryAddressUpdatedEvent.OutputTuple, TreasuryAddressUpdatedEvent.OutputObject>;
        TreasuryAddressUpdated: TypedContractEvent<TreasuryAddressUpdatedEvent.InputTuple, TreasuryAddressUpdatedEvent.OutputTuple, TreasuryAddressUpdatedEvent.OutputObject>;
        "TreasuryPercentageUpdated(uint256,uint256)": TypedContractEvent<TreasuryPercentageUpdatedEvent.InputTuple, TreasuryPercentageUpdatedEvent.OutputTuple, TreasuryPercentageUpdatedEvent.OutputObject>;
        TreasuryPercentageUpdated: TypedContractEvent<TreasuryPercentageUpdatedEvent.InputTuple, TreasuryPercentageUpdatedEvent.OutputTuple, TreasuryPercentageUpdatedEvent.OutputObject>;
        "Upgraded(address)": TypedContractEvent<UpgradedEvent.InputTuple, UpgradedEvent.OutputTuple, UpgradedEvent.OutputObject>;
        Upgraded: TypedContractEvent<UpgradedEvent.InputTuple, UpgradedEvent.OutputTuple, UpgradedEvent.OutputObject>;
        "Vote2EarnAddressUpdated(address,address)": TypedContractEvent<Vote2EarnAddressUpdatedEvent.InputTuple, Vote2EarnAddressUpdatedEvent.OutputTuple, Vote2EarnAddressUpdatedEvent.OutputObject>;
        Vote2EarnAddressUpdated: TypedContractEvent<Vote2EarnAddressUpdatedEvent.InputTuple, Vote2EarnAddressUpdatedEvent.OutputTuple, Vote2EarnAddressUpdatedEvent.OutputObject>;
        "Vote2EarnDecayPeriodUpdated(uint256,uint256)": TypedContractEvent<Vote2EarnDecayPeriodUpdatedEvent.InputTuple, Vote2EarnDecayPeriodUpdatedEvent.OutputTuple, Vote2EarnDecayPeriodUpdatedEvent.OutputObject>;
        Vote2EarnDecayPeriodUpdated: TypedContractEvent<Vote2EarnDecayPeriodUpdatedEvent.InputTuple, Vote2EarnDecayPeriodUpdatedEvent.OutputTuple, Vote2EarnDecayPeriodUpdatedEvent.OutputObject>;
        "Vote2EarnDecayUpdated(uint256,uint256)": TypedContractEvent<Vote2EarnDecayUpdatedEvent.InputTuple, Vote2EarnDecayUpdatedEvent.OutputTuple, Vote2EarnDecayUpdatedEvent.OutputObject>;
        Vote2EarnDecayUpdated: TypedContractEvent<Vote2EarnDecayUpdatedEvent.InputTuple, Vote2EarnDecayUpdatedEvent.OutputTuple, Vote2EarnDecayUpdatedEvent.OutputObject>;
        "XAllocationsAddressUpdated(address,address)": TypedContractEvent<XAllocationsAddressUpdatedEvent.InputTuple, XAllocationsAddressUpdatedEvent.OutputTuple, XAllocationsAddressUpdatedEvent.OutputObject>;
        XAllocationsAddressUpdated: TypedContractEvent<XAllocationsAddressUpdatedEvent.InputTuple, XAllocationsAddressUpdatedEvent.OutputTuple, XAllocationsAddressUpdatedEvent.OutputObject>;
        "XAllocationsDecayPeriodUpdated(uint256,uint256)": TypedContractEvent<XAllocationsDecayPeriodUpdatedEvent.InputTuple, XAllocationsDecayPeriodUpdatedEvent.OutputTuple, XAllocationsDecayPeriodUpdatedEvent.OutputObject>;
        XAllocationsDecayPeriodUpdated: TypedContractEvent<XAllocationsDecayPeriodUpdatedEvent.InputTuple, XAllocationsDecayPeriodUpdatedEvent.OutputTuple, XAllocationsDecayPeriodUpdatedEvent.OutputObject>;
        "XAllocationsDecayUpdated(uint256,uint256)": TypedContractEvent<XAllocationsDecayUpdatedEvent.InputTuple, XAllocationsDecayUpdatedEvent.OutputTuple, XAllocationsDecayUpdatedEvent.OutputObject>;
        XAllocationsDecayUpdated: TypedContractEvent<XAllocationsDecayUpdatedEvent.InputTuple, XAllocationsDecayUpdatedEvent.OutputTuple, XAllocationsDecayUpdatedEvent.OutputObject>;
        "XAllocationsGovernorAddressUpdated(address,address)": TypedContractEvent<XAllocationsGovernorAddressUpdatedEvent.InputTuple, XAllocationsGovernorAddressUpdatedEvent.OutputTuple, XAllocationsGovernorAddressUpdatedEvent.OutputObject>;
        XAllocationsGovernorAddressUpdated: TypedContractEvent<XAllocationsGovernorAddressUpdatedEvent.InputTuple, XAllocationsGovernorAddressUpdatedEvent.OutputTuple, XAllocationsGovernorAddressUpdatedEvent.OutputObject>;
    };
}

declare namespace GovernorTypes {
    type InitializationDataStruct = {
        vot3Token: AddressLike;
        timelock: AddressLike;
        xAllocationVoting: AddressLike;
        b3tr: AddressLike;
        quorumPercentage: BigNumberish;
        initialDepositThreshold: BigNumberish;
        initialMinVotingDelay: BigNumberish;
        initialVotingThreshold: BigNumberish;
        voterRewards: AddressLike;
        isFunctionRestrictionEnabled: boolean;
    };
    type InitializationDataStructOutput = [
        vot3Token: string,
        timelock: string,
        xAllocationVoting: string,
        b3tr: string,
        quorumPercentage: bigint,
        initialDepositThreshold: bigint,
        initialMinVotingDelay: bigint,
        initialVotingThreshold: bigint,
        voterRewards: string,
        isFunctionRestrictionEnabled: boolean
    ] & {
        vot3Token: string;
        timelock: string;
        xAllocationVoting: string;
        b3tr: string;
        quorumPercentage: bigint;
        initialDepositThreshold: bigint;
        initialMinVotingDelay: bigint;
        initialVotingThreshold: bigint;
        voterRewards: string;
        isFunctionRestrictionEnabled: boolean;
    };
    type InitializationRolesDataStruct = {
        governorAdmin: AddressLike;
        pauser: AddressLike;
        contractsAddressManager: AddressLike;
        proposalExecutor: AddressLike;
        governorFunctionSettingsRoleAddress: AddressLike;
    };
    type InitializationRolesDataStructOutput = [
        governorAdmin: string,
        pauser: string,
        contractsAddressManager: string,
        proposalExecutor: string,
        governorFunctionSettingsRoleAddress: string
    ] & {
        governorAdmin: string;
        pauser: string;
        contractsAddressManager: string;
        proposalExecutor: string;
        governorFunctionSettingsRoleAddress: string;
    };
}
interface B3TRGovernorInterface extends Interface {
    getFunction(nameOrSignature: "CLOCK_MODE" | "CONTRACTS_ADDRESS_MANAGER_ROLE" | "COUNTING_MODE" | "DEFAULT_ADMIN_ROLE" | "GOVERNOR_FUNCTIONS_SETTINGS_ROLE" | "PAUSER_ROLE" | "PROPOSAL_EXECUTOR_ROLE" | "UPGRADE_INTERFACE_VERSION" | "b3tr" | "canProposalStartInNextRound" | "cancel" | "castVote" | "castVoteWithReason" | "clock" | "deposit" | "depositThreshold" | "depositThresholdPercentage" | "execute" | "getProposalDeposits" | "getQuadraticVotingPower" | "getRoleAdmin" | "getTimelockId" | "getUserDeposit" | "getVotes" | "grantRole" | "hasRole" | "hasVoted" | "hasVotedOnce" | "hashProposal" | "initialize" | "initializeV4" | "isFunctionWhitelisted" | "isQuadraticVotingDisabledForCurrentRound" | "isQuadraticVotingDisabledForRound" | "minVotingDelay" | "name" | "onERC1155BatchReceived" | "onERC1155Received" | "onERC721Received" | "pause" | "paused" | "proposalDeadline" | "proposalDepositReached" | "proposalDepositThreshold" | "proposalEta" | "proposalNeedsQueuing" | "proposalProposer" | "proposalSnapshot" | "proposalStartRound" | "proposalTotalVotes" | "proposalVotes" | "propose" | "proxiableUUID" | "queue" | "quorum" | "quorumDenominator" | "quorumNumerator(uint256)" | "quorumNumerator()" | "quorumReached" | "relay" | "renounceRole" | "revokeRole" | "setDepositThresholdPercentage" | "setIsFunctionRestrictionEnabled" | "setMinVotingDelay" | "setVeBetterPassport" | "setVoterRewards" | "setVotingThreshold" | "setWhitelistFunction" | "setWhitelistFunctions" | "setXAllocationVoting" | "state" | "supportsInterface" | "timelock" | "timelockSalt" | "toggleQuadraticVoting" | "token" | "unpause" | "updateQuorumNumerator" | "updateTimelock" | "upgradeToAndCall" | "veBetterPassport" | "version" | "voterRewards" | "votingPeriod" | "votingThreshold" | "withdraw" | "xAllocationVoting"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "FunctionWhitelisted" | "Initialized" | "Paused" | "ProposalCanceled" | "ProposalCreated" | "ProposalDeposit" | "ProposalExecuted" | "ProposalQueued" | "QuadraticVotingToggled" | "QuorumNumeratorUpdated" | "RoleAdminChanged" | "RoleGranted" | "RoleRevoked" | "TimelockChange" | "Unpaused" | "Upgraded" | "VeBetterPassportSet" | "VoteCast"): EventFragment;
    encodeFunctionData(functionFragment: "CLOCK_MODE", values?: undefined): string;
    encodeFunctionData(functionFragment: "CONTRACTS_ADDRESS_MANAGER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "COUNTING_MODE", values?: undefined): string;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "GOVERNOR_FUNCTIONS_SETTINGS_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "PAUSER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "PROPOSAL_EXECUTOR_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "UPGRADE_INTERFACE_VERSION", values?: undefined): string;
    encodeFunctionData(functionFragment: "b3tr", values?: undefined): string;
    encodeFunctionData(functionFragment: "canProposalStartInNextRound", values?: undefined): string;
    encodeFunctionData(functionFragment: "cancel", values: [AddressLike[], BigNumberish[], BytesLike[], BytesLike]): string;
    encodeFunctionData(functionFragment: "castVote", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "castVoteWithReason", values: [BigNumberish, BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "clock", values?: undefined): string;
    encodeFunctionData(functionFragment: "deposit", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "depositThreshold", values?: undefined): string;
    encodeFunctionData(functionFragment: "depositThresholdPercentage", values?: undefined): string;
    encodeFunctionData(functionFragment: "execute", values: [AddressLike[], BigNumberish[], BytesLike[], BytesLike]): string;
    encodeFunctionData(functionFragment: "getProposalDeposits", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getQuadraticVotingPower", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getTimelockId", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getUserDeposit", values: [BigNumberish, AddressLike]): string;
    encodeFunctionData(functionFragment: "getVotes", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "hasVoted", values: [BigNumberish, AddressLike]): string;
    encodeFunctionData(functionFragment: "hasVotedOnce", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "hashProposal", values: [AddressLike[], BigNumberish[], BytesLike[], BytesLike]): string;
    encodeFunctionData(functionFragment: "initialize", values: [
        GovernorTypes.InitializationDataStruct,
        GovernorTypes.InitializationRolesDataStruct
    ]): string;
    encodeFunctionData(functionFragment: "initializeV4", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "isFunctionWhitelisted", values: [AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "isQuadraticVotingDisabledForCurrentRound", values?: undefined): string;
    encodeFunctionData(functionFragment: "isQuadraticVotingDisabledForRound", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "minVotingDelay", values?: undefined): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(functionFragment: "onERC1155BatchReceived", values: [
        AddressLike,
        AddressLike,
        BigNumberish[],
        BigNumberish[],
        BytesLike
    ]): string;
    encodeFunctionData(functionFragment: "onERC1155Received", values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "onERC721Received", values: [AddressLike, AddressLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "pause", values?: undefined): string;
    encodeFunctionData(functionFragment: "paused", values?: undefined): string;
    encodeFunctionData(functionFragment: "proposalDeadline", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "proposalDepositReached", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "proposalDepositThreshold", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "proposalEta", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "proposalNeedsQueuing", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "proposalProposer", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "proposalSnapshot", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "proposalStartRound", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "proposalTotalVotes", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "proposalVotes", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "propose", values: [
        AddressLike[],
        BigNumberish[],
        BytesLike[],
        string,
        BigNumberish,
        BigNumberish
    ]): string;
    encodeFunctionData(functionFragment: "proxiableUUID", values?: undefined): string;
    encodeFunctionData(functionFragment: "queue", values: [AddressLike[], BigNumberish[], BytesLike[], BytesLike]): string;
    encodeFunctionData(functionFragment: "quorum", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "quorumDenominator", values?: undefined): string;
    encodeFunctionData(functionFragment: "quorumNumerator(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "quorumNumerator()", values?: undefined): string;
    encodeFunctionData(functionFragment: "quorumReached", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "relay", values: [AddressLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "setDepositThresholdPercentage", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setIsFunctionRestrictionEnabled", values: [boolean]): string;
    encodeFunctionData(functionFragment: "setMinVotingDelay", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setVeBetterPassport", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setVoterRewards", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setVotingThreshold", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setWhitelistFunction", values: [AddressLike, BytesLike, boolean]): string;
    encodeFunctionData(functionFragment: "setWhitelistFunctions", values: [AddressLike, BytesLike[], boolean]): string;
    encodeFunctionData(functionFragment: "setXAllocationVoting", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "state", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
    encodeFunctionData(functionFragment: "timelockSalt", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "toggleQuadraticVoting", values?: undefined): string;
    encodeFunctionData(functionFragment: "token", values?: undefined): string;
    encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
    encodeFunctionData(functionFragment: "updateQuorumNumerator", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "updateTimelock", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "upgradeToAndCall", values: [AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "veBetterPassport", values?: undefined): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    encodeFunctionData(functionFragment: "voterRewards", values?: undefined): string;
    encodeFunctionData(functionFragment: "votingPeriod", values?: undefined): string;
    encodeFunctionData(functionFragment: "votingThreshold", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdraw", values: [BigNumberish, AddressLike]): string;
    encodeFunctionData(functionFragment: "xAllocationVoting", values?: undefined): string;
    decodeFunctionResult(functionFragment: "CLOCK_MODE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "CONTRACTS_ADDRESS_MANAGER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "COUNTING_MODE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "GOVERNOR_FUNCTIONS_SETTINGS_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "PAUSER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "PROPOSAL_EXECUTOR_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UPGRADE_INTERFACE_VERSION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "b3tr", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "canProposalStartInNextRound", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "castVoteWithReason", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "clock", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "depositThreshold", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "depositThresholdPercentage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getProposalDeposits", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getQuadraticVotingPower", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTimelockId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getUserDeposit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getVotes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasVotedOnce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hashProposal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initializeV4", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isFunctionWhitelisted", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isQuadraticVotingDisabledForCurrentRound", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isQuadraticVotingDisabledForRound", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "minVotingDelay", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "onERC1155BatchReceived", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "onERC1155Received", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "onERC721Received", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proposalDeadline", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proposalDepositReached", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proposalDepositThreshold", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proposalEta", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proposalNeedsQueuing", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proposalProposer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proposalSnapshot", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proposalStartRound", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proposalTotalVotes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proposalVotes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proxiableUUID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "queue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quorum", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quorumDenominator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quorumNumerator(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quorumNumerator()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quorumReached", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "relay", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDepositThresholdPercentage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setIsFunctionRestrictionEnabled", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMinVotingDelay", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setVeBetterPassport", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setVoterRewards", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setVotingThreshold", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setWhitelistFunction", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setWhitelistFunctions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setXAllocationVoting", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "timelockSalt", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "toggleQuadraticVoting", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateQuorumNumerator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateTimelock", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeToAndCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "veBetterPassport", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "voterRewards", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "votingPeriod", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "votingThreshold", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "xAllocationVoting", data: BytesLike): Result;
}

interface B3TRInterface extends Interface {
    getFunction(nameOrSignature: "DEFAULT_ADMIN_ROLE" | "MINTER_ROLE" | "PAUSER_ROLE" | "allowance" | "approve" | "balanceOf" | "cap" | "decimals" | "getRoleAdmin" | "grantRole" | "hasRole" | "mint" | "name" | "pause" | "paused" | "renounceRole" | "revokeRole" | "supportsInterface" | "symbol" | "tokenDetails" | "totalSupply" | "transfer" | "transferFrom" | "unpause"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "Approval" | "Paused" | "RoleAdminChanged" | "RoleGranted" | "RoleRevoked" | "Transfer" | "Unpaused"): EventFragment;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "MINTER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "PAUSER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "allowance", values: [AddressLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "approve", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "balanceOf", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "cap", values?: undefined): string;
    encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "mint", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(functionFragment: "pause", values?: undefined): string;
    encodeFunctionData(functionFragment: "paused", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
    encodeFunctionData(functionFragment: "tokenDetails", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
    encodeFunctionData(functionFragment: "transfer", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "transferFrom", values: [AddressLike, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "MINTER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "PAUSER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "cap", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tokenDetails", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

declare const B3TR: {
    abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_admin";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_defaultMinter";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_pauser";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "AccessControlBadConfirmation";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "neededRole";
            readonly type: "bytes32";
        }];
        readonly name: "AccessControlUnauthorizedAccount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "increasedSupply";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "cap";
            readonly type: "uint256";
        }];
        readonly name: "ERC20ExceededCap";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "allowance";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "needed";
            readonly type: "uint256";
        }];
        readonly name: "ERC20InsufficientAllowance";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "balance";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "needed";
            readonly type: "uint256";
        }];
        readonly name: "ERC20InsufficientBalance";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "approver";
            readonly type: "address";
        }];
        readonly name: "ERC20InvalidApprover";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "cap";
            readonly type: "uint256";
        }];
        readonly name: "ERC20InvalidCap";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }];
        readonly name: "ERC20InvalidReceiver";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "ERC20InvalidSender";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }];
        readonly name: "ERC20InvalidSpender";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EnforcedPause";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ExpectedPause";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "Approval";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Paused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "Transfer";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Unpaused";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "MINTER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "PAUSER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }];
        readonly name: "allowance";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "approve";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "balanceOf";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "cap";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "decimals";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "mint";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "callerConfirmation";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "symbol";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "tokenDetails";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }, {
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "totalSupply";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "transfer";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "transferFrom";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "unpause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    address: {
        mainnet: string;
        testnet: string;
    };
    interface: B3TRInterface;
};
declare const B3TRGovernor: {
    abi: readonly [{
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "AccessControlBadConfirmation";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "neededRole";
            readonly type: "bytes32";
        }];
        readonly name: "AccessControlUnauthorizedAccount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "target";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EnforcedPause";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ExpectedPause";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "voter";
            readonly type: "address";
        }];
        readonly name: "GovernorAlreadyCastVote";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "proposalId";
            readonly type: "uint256";
        }];
        readonly name: "GovernorAlreadyQueuedProposal";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "depositThreshold";
            readonly type: "uint256";
        }];
        readonly name: "GovernorDepositThresholdNotInRange";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "GovernorDisabledDeposit";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "proposer";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "votes";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "threshold";
            readonly type: "uint256";
        }];
        readonly name: "GovernorInsufficientProposerVotes";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "GovernorInvalidDepositAmount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "targets";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "calldatas";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "values";
            readonly type: "uint256";
        }];
        readonly name: "GovernorInvalidProposalLength";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "quorumNumerator";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "quorumDenominator";
            readonly type: "uint256";
        }];
        readonly name: "GovernorInvalidQuorumFraction";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }];
        readonly name: "GovernorInvalidStartRound";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "GovernorInvalidVoteType";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "votingPeriod";
            readonly type: "uint256";
        }];
        readonly name: "GovernorInvalidVotingPeriod";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "proposalId";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "depositer";
            readonly type: "address";
        }];
        readonly name: "GovernorNoDepositToWithdraw";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "proposalId";
            readonly type: "uint256";
        }];
        readonly name: "GovernorNonexistentProposal";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "proposalId";
            readonly type: "uint256";
        }];
        readonly name: "GovernorNotQueuedProposal";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "GovernorOnlyExecutor";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "GovernorOnlyExecutor";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "GovernorOnlyProposer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "voter";
            readonly type: "address";
        }, {
            readonly internalType: "string";
            readonly name: "explanation";
            readonly type: "string";
        }];
        readonly name: "GovernorPersonhoodVerificationFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "GovernorQueueNotImplemented";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "proposer";
            readonly type: "address";
        }];
        readonly name: "GovernorRestrictedProposer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "proposalId";
            readonly type: "uint256";
        }, {
            readonly internalType: "enum GovernorTypes.ProposalState";
            readonly name: "current";
            readonly type: "uint8";
        }, {
            readonly internalType: "bytes32";
            readonly name: "expectedStates";
            readonly type: "bytes32";
        }];
        readonly name: "GovernorUnexpectedProposalState";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "threshold";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "votes";
            readonly type: "uint256";
        }];
        readonly name: "GovernorVotingThresholdNotMet";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "QueueEmpty";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "slot";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "UnauthorizedAccess";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "target";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes4";
            readonly name: "functionSelector";
            readonly type: "bytes4";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "isWhitelisted";
            readonly type: "bool";
        }];
        readonly name: "FunctionWhitelisted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "version";
            readonly type: "uint64";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Paused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "proposalId";
            readonly type: "uint256";
        }];
        readonly name: "ProposalCanceled";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "proposalId";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "proposer";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address[]";
            readonly name: "targets";
            readonly type: "address[]";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256[]";
            readonly name: "values";
            readonly type: "uint256[]";
        }, {
            readonly indexed: false;
            readonly internalType: "string[]";
            readonly name: "signatures";
            readonly type: "string[]";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes[]";
            readonly name: "calldatas";
            readonly type: "bytes[]";
        }, {
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "description";
            readonly type: "string";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "roundIdVoteStart";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "depositThreshold";
            readonly type: "uint256";
        }];
        readonly name: "ProposalCreated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "depositor";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "proposalId";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "ProposalDeposit";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "proposalId";
            readonly type: "uint256";
        }];
        readonly name: "ProposalExecuted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "proposalId";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "etaSeconds";
            readonly type: "uint256";
        }];
        readonly name: "ProposalQueued";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bool";
            readonly name: "disabled";
            readonly type: "bool";
        }];
        readonly name: "QuadraticVotingToggled";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "oldNumerator";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "newNumerator";
            readonly type: "uint256";
        }];
        readonly name: "QuorumNumeratorUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldTimelock";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newTimelock";
            readonly type: "address";
        }];
        readonly name: "TimelockChange";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Unpaused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "Upgraded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "oldVeBetterPassport";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newVeBetterPassport";
            readonly type: "address";
        }];
        readonly name: "VeBetterPassportSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "voter";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "proposalId";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "support";
            readonly type: "uint8";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "weight";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "power";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "reason";
            readonly type: "string";
        }];
        readonly name: "VoteCast";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "CLOCK_MODE";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "CONTRACTS_ADDRESS_MANAGER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "COUNTING_MODE";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "GOVERNOR_FUNCTIONS_SETTINGS_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "PAUSER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "PROPOSAL_EXECUTOR_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "b3tr";
        readonly outputs: readonly [{
            readonly internalType: "contract IB3TR";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "canProposalStartInNextRound";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "targets";
            readonly type: "address[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "values";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "calldatas";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "bytes32";
            readonly name: "descriptionHash";
            readonly type: "bytes32";
        }];
        readonly name: "cancel";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "proposalId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint8";
            readonly name: "support";
            readonly type: "uint8";
        }];
        readonly name: "castVote";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "proposalId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint8";
            readonly name: "support";
            readonly type: "uint8";
        }, {
            readonly internalType: "string";
            readonly name: "reason";
            readonly type: "string";
        }];
        readonly name: "castVoteWithReason";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "clock";
        readonly outputs: readonly [{
            readonly internalType: "uint48";
            readonly name: "";
            readonly type: "uint48";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "proposalId";
            readonly type: "uint256";
        }];
        readonly name: "deposit";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "depositThreshold";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "depositThresholdPercentage";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "targets";
            readonly type: "address[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "values";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "calldatas";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "bytes32";
            readonly name: "descriptionHash";
            readonly type: "bytes32";
        }];
        readonly name: "execute";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "proposalId";
            readonly type: "uint256";
        }];
        readonly name: "getProposalDeposits";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "timepoint";
            readonly type: "uint256";
        }];
        readonly name: "getQuadraticVotingPower";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "proposalId";
            readonly type: "uint256";
        }];
        readonly name: "getTimelockId";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "proposalId";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "getUserDeposit";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "timepoint";
            readonly type: "uint256";
        }];
        readonly name: "getVotes";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "proposalId";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasVoted";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "hasVotedOnce";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "targets";
            readonly type: "address[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "values";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "calldatas";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "bytes32";
            readonly name: "descriptionHash";
            readonly type: "bytes32";
        }];
        readonly name: "hashProposal";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "contract IVOT3";
                readonly name: "vot3Token";
                readonly type: "address";
            }, {
                readonly internalType: "contract TimelockControllerUpgradeable";
                readonly name: "timelock";
                readonly type: "address";
            }, {
                readonly internalType: "contract IXAllocationVotingGovernor";
                readonly name: "xAllocationVoting";
                readonly type: "address";
            }, {
                readonly internalType: "contract IB3TR";
                readonly name: "b3tr";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "quorumPercentage";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "initialDepositThreshold";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "initialMinVotingDelay";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "initialVotingThreshold";
                readonly type: "uint256";
            }, {
                readonly internalType: "contract IVoterRewards";
                readonly name: "voterRewards";
                readonly type: "address";
            }, {
                readonly internalType: "bool";
                readonly name: "isFunctionRestrictionEnabled";
                readonly type: "bool";
            }];
            readonly internalType: "struct GovernorTypes.InitializationData";
            readonly name: "data";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "governorAdmin";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "pauser";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "contractsAddressManager";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "proposalExecutor";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "governorFunctionSettingsRoleAddress";
                readonly type: "address";
            }];
            readonly internalType: "struct GovernorTypes.InitializationRolesData";
            readonly name: "rolesData";
            readonly type: "tuple";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IVeBetterPassport";
            readonly name: "_veBetterPassport";
            readonly type: "address";
        }];
        readonly name: "initializeV4";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "target";
            readonly type: "address";
        }, {
            readonly internalType: "bytes4";
            readonly name: "functionSelector";
            readonly type: "bytes4";
        }];
        readonly name: "isFunctionWhitelisted";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "isQuadraticVotingDisabledForCurrentRound";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }];
        readonly name: "isQuadraticVotingDisabledForRound";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "minVotingDelay";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "onERC1155BatchReceived";
        readonly outputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "onERC1155Received";
        readonly outputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "onERC721Received";
        readonly outputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "proposalId";
            readonly type: "uint256";
        }];
        readonly name: "proposalDeadline";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "proposalId";
            readonly type: "uint256";
        }];
        readonly name: "proposalDepositReached";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "proposalId";
            readonly type: "uint256";
        }];
        readonly name: "proposalDepositThreshold";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "proposalId";
            readonly type: "uint256";
        }];
        readonly name: "proposalEta";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "proposalId";
            readonly type: "uint256";
        }];
        readonly name: "proposalNeedsQueuing";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "proposalId";
            readonly type: "uint256";
        }];
        readonly name: "proposalProposer";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "proposalId";
            readonly type: "uint256";
        }];
        readonly name: "proposalSnapshot";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "proposalId";
            readonly type: "uint256";
        }];
        readonly name: "proposalStartRound";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "proposalId";
            readonly type: "uint256";
        }];
        readonly name: "proposalTotalVotes";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "proposalId";
            readonly type: "uint256";
        }];
        readonly name: "proposalVotes";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "againstVotes";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "forVotes";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "abstainVotes";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "targets";
            readonly type: "address[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "values";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "calldatas";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "string";
            readonly name: "description";
            readonly type: "string";
        }, {
            readonly internalType: "uint256";
            readonly name: "startRoundId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "depositAmount";
            readonly type: "uint256";
        }];
        readonly name: "propose";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "targets";
            readonly type: "address[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "values";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "calldatas";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "bytes32";
            readonly name: "descriptionHash";
            readonly type: "bytes32";
        }];
        readonly name: "queue";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "blockNumber";
            readonly type: "uint256";
        }];
        readonly name: "quorum";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "quorumDenominator";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "timepoint";
            readonly type: "uint256";
        }];
        readonly name: "quorumNumerator";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "quorumNumerator";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "proposalId";
            readonly type: "uint256";
        }];
        readonly name: "quorumReached";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "target";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "relay";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "callerConfirmation";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "newDepositThreshold";
            readonly type: "uint256";
        }];
        readonly name: "setDepositThresholdPercentage";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bool";
            readonly name: "isEnabled";
            readonly type: "bool";
        }];
        readonly name: "setIsFunctionRestrictionEnabled";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "newMinVotingDelay";
            readonly type: "uint256";
        }];
        readonly name: "setMinVotingDelay";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IVeBetterPassport";
            readonly name: "newVeBetterPassport";
            readonly type: "address";
        }];
        readonly name: "setVeBetterPassport";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IVoterRewards";
            readonly name: "newVoterRewards";
            readonly type: "address";
        }];
        readonly name: "setVoterRewards";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "newVotingThreshold";
            readonly type: "uint256";
        }];
        readonly name: "setVotingThreshold";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "target";
            readonly type: "address";
        }, {
            readonly internalType: "bytes4";
            readonly name: "functionSelector";
            readonly type: "bytes4";
        }, {
            readonly internalType: "bool";
            readonly name: "isWhitelisted";
            readonly type: "bool";
        }];
        readonly name: "setWhitelistFunction";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "target";
            readonly type: "address";
        }, {
            readonly internalType: "bytes4[]";
            readonly name: "functionSelectors";
            readonly type: "bytes4[]";
        }, {
            readonly internalType: "bool";
            readonly name: "isWhitelisted";
            readonly type: "bool";
        }];
        readonly name: "setWhitelistFunctions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IXAllocationVotingGovernor";
            readonly name: "newXAllocationVoting";
            readonly type: "address";
        }];
        readonly name: "setXAllocationVoting";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "proposalId";
            readonly type: "uint256";
        }];
        readonly name: "state";
        readonly outputs: readonly [{
            readonly internalType: "enum GovernorTypes.ProposalState";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "timelock";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "descriptionHash";
            readonly type: "bytes32";
        }];
        readonly name: "timelockSalt";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "toggleQuadraticVoting";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "token";
        readonly outputs: readonly [{
            readonly internalType: "contract IVOT3";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "unpause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "newQuorumNumerator";
            readonly type: "uint256";
        }];
        readonly name: "updateQuorumNumerator";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract TimelockControllerUpgradeable";
            readonly name: "newTimelock";
            readonly type: "address";
        }];
        readonly name: "updateTimelock";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "veBetterPassport";
        readonly outputs: readonly [{
            readonly internalType: "contract IVeBetterPassport";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "voterRewards";
        readonly outputs: readonly [{
            readonly internalType: "contract IVoterRewards";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "votingPeriod";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "votingThreshold";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "proposalId";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "depositor";
            readonly type: "address";
        }];
        readonly name: "withdraw";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "xAllocationVoting";
        readonly outputs: readonly [{
            readonly internalType: "contract IXAllocationVotingGovernor";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    address: {
        mainnet: string;
        testnet: string;
    };
    interface: B3TRGovernorInterface;
};
declare const Emissions: {
    abi: readonly [{
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "AccessControlBadConfirmation";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "neededRole";
            readonly type: "bytes32";
        }];
        readonly name: "AccessControlUnauthorizedAccount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "target";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ReentrancyGuardReentrantCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "slot";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "newDuration";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "oldDuration";
            readonly type: "uint256";
        }];
        readonly name: "EmissionCycleDurationUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "cycle";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "xAllocations";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "vote2Earn";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "treasury";
            readonly type: "uint256";
        }];
        readonly name: "EmissionDistributed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "version";
            readonly type: "uint64";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "newDecay";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "oldDecay";
            readonly type: "uint256";
        }];
        readonly name: "MaxVote2EarnDecayUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newAddress";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "oldAddress";
            readonly type: "address";
        }];
        readonly name: "TreasuryAddressUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "newPercentage";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "oldPercentage";
            readonly type: "uint256";
        }];
        readonly name: "TreasuryPercentageUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "Upgraded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newAddress";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "oldAddress";
            readonly type: "address";
        }];
        readonly name: "Vote2EarnAddressUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "newPeriod";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "oldPeriod";
            readonly type: "uint256";
        }];
        readonly name: "Vote2EarnDecayPeriodUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "newDecay";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "oldDecay";
            readonly type: "uint256";
        }];
        readonly name: "Vote2EarnDecayUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newAddress";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "oldAddress";
            readonly type: "address";
        }];
        readonly name: "XAllocationsAddressUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "newPeriod";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "oldPeriod";
            readonly type: "uint256";
        }];
        readonly name: "XAllocationsDecayPeriodUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "newDecay";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "oldDecay";
            readonly type: "uint256";
        }];
        readonly name: "XAllocationsDecayUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newAddress";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "oldAddress";
            readonly type: "address";
        }];
        readonly name: "XAllocationsGovernorAddressUpdated";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "CONTRACTS_ADDRESS_MANAGER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "DECAY_SETTINGS_MANAGER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "MINTER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "SCALING_FACTOR";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UPGRADER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "b3tr";
        readonly outputs: readonly [{
            readonly internalType: "contract IB3TR";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "bootstrap";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "cycleDuration";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "distribute";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "cycle";
            readonly type: "uint256";
        }];
        readonly name: "emissions";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "xAllocations";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "vote2Earn";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "treasury";
                readonly type: "uint256";
            }];
            readonly internalType: "struct Emissions.Emission";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getCurrentCycle";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getNextCycleBlock";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getRemainingEmissions";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "cycle";
            readonly type: "uint256";
        }];
        readonly name: "getTreasuryAmount";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "cycle";
            readonly type: "uint256";
        }];
        readonly name: "getVote2EarnAmount";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "cycle";
            readonly type: "uint256";
        }];
        readonly name: "getXAllocationAmount";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "initialXAppAllocation";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "minter";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "admin";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "upgrader";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "contractsAddressManager";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "decaySettingsManager";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "b3trAddress";
                readonly type: "address";
            }, {
                readonly internalType: "address[4]";
                readonly name: "destinations";
                readonly type: "address[4]";
            }, {
                readonly internalType: "uint256";
                readonly name: "migrationAmount";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "initialXAppAllocation";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "cycleDuration";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256[4]";
                readonly name: "decaySettings";
                readonly type: "uint256[4]";
            }, {
                readonly internalType: "uint256";
                readonly name: "treasuryPercentage";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "maxVote2EarnDecay";
                readonly type: "uint256";
            }];
            readonly internalType: "struct Emissions.InitializationData";
            readonly name: "data";
            readonly type: "tuple";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bool";
            readonly name: "_isEmissionsNotAligned";
            readonly type: "bool";
        }];
        readonly name: "initializeV2";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "cycle";
            readonly type: "uint256";
        }];
        readonly name: "isCycleDistributed";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "cycle";
            readonly type: "uint256";
        }];
        readonly name: "isCycleEnded";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "isEmissionsNotAligned";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "isNextCycleDistributable";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "lastEmissionBlock";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "maxVote2EarnDecay";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "nextCycle";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "callerConfirmation";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_cycleDuration";
            readonly type: "uint256";
        }];
        readonly name: "setCycleDuration";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_maxVote2EarnDecay";
            readonly type: "uint256";
        }];
        readonly name: "setMaxVote2EarnDecay";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "treasuryAddress";
            readonly type: "address";
        }];
        readonly name: "setTreasuryAddress";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_percentage";
            readonly type: "uint256";
        }];
        readonly name: "setTreasuryPercentage";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "vote2EarnAddress";
            readonly type: "address";
        }];
        readonly name: "setVote2EarnAddress";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_decay";
            readonly type: "uint256";
        }];
        readonly name: "setVote2EarnDecay";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_period";
            readonly type: "uint256";
        }];
        readonly name: "setVote2EarnDecayPeriod";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_decay";
            readonly type: "uint256";
        }];
        readonly name: "setXAllocationsDecay";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_period";
            readonly type: "uint256";
        }];
        readonly name: "setXAllocationsDecayPeriod";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_xAllocationsGovernor";
            readonly type: "address";
        }];
        readonly name: "setXAllocationsGovernorAddress";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "xAllocationAddress";
            readonly type: "address";
        }];
        readonly name: "setXallocationsAddress";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "start";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "totalEmissions";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "treasury";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "treasuryPercentage";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "vote2Earn";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "vote2EarnDecay";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "vote2EarnDecayPeriod";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "xAllocations";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "xAllocationsDecay";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "xAllocationsDecayPeriod";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "xAllocationsGovernor";
        readonly outputs: readonly [{
            readonly internalType: "contract IXAllocationVotingGovernor";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    address: {
        mainnet: string;
        testnet: string;
    };
    interface: EmissionsInterface;
};
declare const GalaxyMember: {
    abi: readonly [{
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "AccessControlBadConfirmation";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "neededRole";
            readonly type: "bytes32";
        }];
        readonly name: "AccessControlUnauthorizedAccount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "target";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ERC721EnumerableForbiddenBatchMint";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }];
        readonly name: "ERC721IncorrectOwner";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "operator";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "ERC721InsufficientApproval";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "approver";
            readonly type: "address";
        }];
        readonly name: "ERC721InvalidApprover";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "operator";
            readonly type: "address";
        }];
        readonly name: "ERC721InvalidOperator";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }];
        readonly name: "ERC721InvalidOwner";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }];
        readonly name: "ERC721InvalidReceiver";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "ERC721InvalidSender";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "ERC721NonexistentToken";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "index";
            readonly type: "uint256";
        }];
        readonly name: "ERC721OutOfBoundsIndex";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EnforcedPause";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ExpectedPause";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ReentrancyGuardReentrantCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "slot";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "approved";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "Approval";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "operator";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "approved";
            readonly type: "bool";
        }];
        readonly name: "ApprovalForAll";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256[]";
            readonly name: "b3trToUpgradeToLevel";
            readonly type: "uint256[]";
        }];
        readonly name: "B3TRtoUpgradeToLevelUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newAddress";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "oldAddress";
            readonly type: "address";
        }];
        readonly name: "B3trGovernorAddressUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "string";
            readonly name: "newBaseURI";
            readonly type: "string";
        }, {
            readonly indexed: true;
            readonly internalType: "string";
            readonly name: "oldBaseURI";
            readonly type: "string";
        }];
        readonly name: "BaseURIUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "version";
            readonly type: "uint64";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "oldLevel";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "newLevel";
            readonly type: "uint256";
        }];
        readonly name: "MaxLevelUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "nodeTokenId";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "NodeAttached";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "nodeTokenId";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "NodeDetached";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Paused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "isPaused";
            readonly type: "bool";
        }];
        readonly name: "PublicMintingPaused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "Selected";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "Transfer";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Unpaused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "Upgraded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "oldLevel";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "newLevel";
            readonly type: "uint256";
        }];
        readonly name: "Upgraded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newAddress";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "oldAddress";
            readonly type: "address";
        }];
        readonly name: "XAllocationsGovernorAddressUpdated";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "CONTRACTS_ADDRESS_MANAGER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "MAX_LEVEL";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "MINTER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "NODES_MANAGER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "PAUSER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UPGRADER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "approve";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nodeTokenId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "attachNode";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "b3tr";
        readonly outputs: readonly [{
            readonly internalType: "contract IB3TR";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "b3trGovernor";
        readonly outputs: readonly [{
            readonly internalType: "contract IB3TRGovernor";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }];
        readonly name: "balanceOf";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "baseURI";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "burn";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nodeTokenId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "detachNode";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "freeMint";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "getApproved";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "getB3TRdonated";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "getB3TRtoUpgrade";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "level";
            readonly type: "uint256";
        }];
        readonly name: "getB3TRtoUpgradeToLevel";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nodeId";
            readonly type: "uint256";
        }];
        readonly name: "getIdAttachedToNode";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "nodeTokenId";
            readonly type: "uint256";
        }];
        readonly name: "getLevelAfterAttachingNode";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "getLevelAfterDetachingNode";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "getNodeIdAttached";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nodeId";
            readonly type: "uint256";
        }];
        readonly name: "getNodeLevelOf";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "nodeLevel";
            readonly type: "uint8";
        }];
        readonly name: "getNodeToFreeLevel";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }];
        readonly name: "getSelectedTokenId";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }];
        readonly name: "getSelectedTokenInfoByOwner";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "tokenId";
                readonly type: "uint256";
            }, {
                readonly internalType: "string";
                readonly name: "tokenURI";
                readonly type: "string";
            }, {
                readonly internalType: "uint256";
                readonly name: "tokenLevel";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "b3trToUpgrade";
                readonly type: "uint256";
            }];
            readonly internalType: "struct GalaxyMember.TokenInfo";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "getTokenInfoByTokenId";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "tokenId";
                readonly type: "uint256";
            }, {
                readonly internalType: "string";
                readonly name: "tokenURI";
                readonly type: "string";
            }, {
                readonly internalType: "uint256";
                readonly name: "tokenLevel";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "b3trToUpgrade";
                readonly type: "uint256";
            }];
            readonly internalType: "struct GalaxyMember.TokenInfo";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "page";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "size";
            readonly type: "uint256";
        }];
        readonly name: "getTokensInfoByOwner";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "tokenId";
                readonly type: "uint256";
            }, {
                readonly internalType: "string";
                readonly name: "tokenURI";
                readonly type: "string";
            }, {
                readonly internalType: "uint256";
                readonly name: "tokenLevel";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "b3trToUpgrade";
                readonly type: "uint256";
            }];
            readonly internalType: "struct GalaxyMember.TokenInfo[]";
            readonly name: "";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "name";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "symbol";
                readonly type: "string";
            }, {
                readonly internalType: "address";
                readonly name: "admin";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "upgrader";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "pauser";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "minter";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "contractsAddressManager";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "maxLevel";
                readonly type: "uint256";
            }, {
                readonly internalType: "string";
                readonly name: "baseTokenURI";
                readonly type: "string";
            }, {
                readonly internalType: "uint256[]";
                readonly name: "b3trToUpgradeToLevel";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "address";
                readonly name: "b3tr";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "treasury";
                readonly type: "address";
            }];
            readonly internalType: "struct GalaxyMember.InitializationData";
            readonly name: "data";
            readonly type: "tuple";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_vechainNodes";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_nodesMangaement";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_nodesAdmin";
            readonly type: "address";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "_nodeFreeLevels";
            readonly type: "uint256[]";
        }];
        readonly name: "initializeV2";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "operator";
            readonly type: "address";
        }];
        readonly name: "isApprovedForAll";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "levelOf";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "ownerOf";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "participatedInGovernance";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "callerConfirmation";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "safeTransferFrom";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "safeTransferFrom";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenID";
            readonly type: "uint256";
        }];
        readonly name: "select";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "operator";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "approved";
            readonly type: "bool";
        }];
        readonly name: "setApprovalForAll";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "b3trToUpgradeToLevel";
            readonly type: "uint256[]";
        }];
        readonly name: "setB3TRtoUpgradeToLevel";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_b3trGovernor";
            readonly type: "address";
        }];
        readonly name: "setB3trGovernorAddress";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "baseTokenURI";
            readonly type: "string";
        }];
        readonly name: "setBaseURI";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bool";
            readonly name: "isPaused";
            readonly type: "bool";
        }];
        readonly name: "setIsPublicMintingPaused";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "level";
            readonly type: "uint256";
        }];
        readonly name: "setMaxLevel";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "nodeLevel";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint256";
            readonly name: "level";
            readonly type: "uint256";
        }];
        readonly name: "setNodeToFreeUpgradeLevel";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_vechainNodes";
            readonly type: "address";
        }];
        readonly name: "setVechainNodes";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_xAllocationsGovernor";
            readonly type: "address";
        }];
        readonly name: "setXAllocationsGovernorAddress";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "symbol";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "index";
            readonly type: "uint256";
        }];
        readonly name: "tokenByIndex";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "index";
            readonly type: "uint256";
        }];
        readonly name: "tokenOfOwnerByIndex";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "tokenURI";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "totalSupply";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "transferFrom";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "treasury";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "unpause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "upgrade";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "xAllocationsGovernor";
        readonly outputs: readonly [{
            readonly internalType: "contract IXAllocationVotingGovernor";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    address: {
        mainnet: string;
        testnet: string;
    };
    interface: GalaxyMemberInterface;
};
declare const TimeLock: {
    abi: readonly [{
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "AccessControlBadConfirmation";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "neededRole";
            readonly type: "bytes32";
        }];
        readonly name: "AccessControlUnauthorizedAccount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "target";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "delay";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "minDelay";
            readonly type: "uint256";
        }];
        readonly name: "TimelockInsufficientDelay";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "targets";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "payloads";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "values";
            readonly type: "uint256";
        }];
        readonly name: "TimelockInvalidOperationLength";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }];
        readonly name: "TimelockUnauthorizedCaller";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "predecessorId";
            readonly type: "bytes32";
        }];
        readonly name: "TimelockUnexecutedPredecessor";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "operationId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "expectedStates";
            readonly type: "bytes32";
        }];
        readonly name: "TimelockUnexpectedOperationState";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "slot";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "id";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "index";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "target";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "CallExecuted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "id";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "salt";
            readonly type: "bytes32";
        }];
        readonly name: "CallSalt";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "id";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "index";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "target";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "predecessor";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "delay";
            readonly type: "uint256";
        }];
        readonly name: "CallScheduled";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "id";
            readonly type: "bytes32";
        }];
        readonly name: "Cancelled";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "version";
            readonly type: "uint64";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "oldDuration";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "newDuration";
            readonly type: "uint256";
        }];
        readonly name: "MinDelayChange";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "Upgraded";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "CANCELLER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "EXECUTOR_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "PROPOSER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UPGRADER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "id";
            readonly type: "bytes32";
        }];
        readonly name: "cancel";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "target";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "payload";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32";
            readonly name: "predecessor";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "salt";
            readonly type: "bytes32";
        }];
        readonly name: "execute";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "targets";
            readonly type: "address[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "values";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "payloads";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "bytes32";
            readonly name: "predecessor";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "salt";
            readonly type: "bytes32";
        }];
        readonly name: "executeBatch";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getMinDelay";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "id";
            readonly type: "bytes32";
        }];
        readonly name: "getOperationState";
        readonly outputs: readonly [{
            readonly internalType: "enum TimelockControllerUpgradeable.OperationState";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "id";
            readonly type: "bytes32";
        }];
        readonly name: "getTimestamp";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "target";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32";
            readonly name: "predecessor";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "salt";
            readonly type: "bytes32";
        }];
        readonly name: "hashOperation";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "targets";
            readonly type: "address[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "values";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "payloads";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "bytes32";
            readonly name: "predecessor";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "salt";
            readonly type: "bytes32";
        }];
        readonly name: "hashOperationBatch";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "minDelay";
            readonly type: "uint256";
        }, {
            readonly internalType: "address[]";
            readonly name: "proposers";
            readonly type: "address[]";
        }, {
            readonly internalType: "address[]";
            readonly name: "executors";
            readonly type: "address[]";
        }, {
            readonly internalType: "address";
            readonly name: "admin";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "upgrader";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "id";
            readonly type: "bytes32";
        }];
        readonly name: "isOperation";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "id";
            readonly type: "bytes32";
        }];
        readonly name: "isOperationDone";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "id";
            readonly type: "bytes32";
        }];
        readonly name: "isOperationPending";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "id";
            readonly type: "bytes32";
        }];
        readonly name: "isOperationReady";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "onERC1155BatchReceived";
        readonly outputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "onERC1155Received";
        readonly outputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "onERC721Received";
        readonly outputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "callerConfirmation";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "target";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32";
            readonly name: "predecessor";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "salt";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "delay";
            readonly type: "uint256";
        }];
        readonly name: "schedule";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "targets";
            readonly type: "address[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "values";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "payloads";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "bytes32";
            readonly name: "predecessor";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "salt";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "delay";
            readonly type: "uint256";
        }];
        readonly name: "scheduleBatch";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "newDelay";
            readonly type: "uint256";
        }];
        readonly name: "updateDelay";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    address: {
        mainnet: string;
        testnet: string;
    };
    interface: TimeLockInterface;
};
declare const Treasury: {
    abi: readonly [{
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "AccessControlBadConfirmation";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "neededRole";
            readonly type: "bytes32";
        }];
        readonly name: "AccessControlUnauthorizedAccount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "target";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EnforcedPause";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ExpectedPause";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ReentrancyGuardReentrantCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "slot";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "version";
            readonly type: "uint64";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Paused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "token";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "limit";
            readonly type: "uint256";
        }];
        readonly name: "TransferLimitUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "limit";
            readonly type: "uint256";
        }];
        readonly name: "TransferLimitVETUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Unpaused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "Upgraded";
        readonly type: "event";
    }, {
        readonly stateMutability: "payable";
        readonly type: "fallback";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "GOVERNANCE_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "PAUSER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UPGRADER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "VTHO";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "b3trAddress";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_b3trAmount";
            readonly type: "uint256";
        }];
        readonly name: "convertB3TR";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_vot3Amount";
            readonly type: "uint256";
        }];
        readonly name: "convertVOT3";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getB3TRBalance";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_nft";
            readonly type: "address";
        }];
        readonly name: "getCollectionNFTBalance";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_token";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_id";
            readonly type: "uint256";
        }];
        readonly name: "getERC1155TokenBalance";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_token";
            readonly type: "address";
        }];
        readonly name: "getTokenBalance";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_token";
            readonly type: "address";
        }];
        readonly name: "getTransferLimitToken";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getTransferLimitVET";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getVETBalance";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getVOT3Balance";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getVTHOBalance";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_b3tr";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_vot3";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_timeLock";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_admin";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_proxyAdmin";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_pauser";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_transferLimitVET";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_transferLimitB3TR";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_transferLimitVOT3";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_transferLimitVTHO";
            readonly type: "uint256";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "onERC1155BatchReceived";
        readonly outputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "onERC1155Received";
        readonly outputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "onERC721Received";
        readonly outputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "callerConfirmation";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_token";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_transferLimit";
            readonly type: "uint256";
        }];
        readonly name: "setTransferLimitToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_transferLimitVET";
            readonly type: "uint256";
        }];
        readonly name: "setTransferLimitVET";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "transferB3TR";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_tokenAddress";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_id";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_data";
            readonly type: "bytes";
        }];
        readonly name: "transferERC1155Tokens";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_nft";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_tokenId";
            readonly type: "uint256";
        }];
        readonly name: "transferNFT";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_token";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "transferTokens";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "transferVET";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "transferVOT3";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "transferVTHO";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "unpause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "vot3Address";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    address: {
        mainnet: string;
        testnet: string;
    };
    interface: TreasuryInterface;
};
declare const VOT3: {
    abi: readonly [{
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "AccessControlBadConfirmation";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "neededRole";
            readonly type: "bytes32";
        }];
        readonly name: "AccessControlUnauthorizedAccount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "target";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CheckpointUnorderedInsertion";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ECDSAInvalidSignature";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "length";
            readonly type: "uint256";
        }];
        readonly name: "ECDSAInvalidSignatureLength";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "s";
            readonly type: "bytes32";
        }];
        readonly name: "ECDSAInvalidSignatureS";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "increasedSupply";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "cap";
            readonly type: "uint256";
        }];
        readonly name: "ERC20ExceededSafeSupply";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "allowance";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "needed";
            readonly type: "uint256";
        }];
        readonly name: "ERC20InsufficientAllowance";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "balance";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "needed";
            readonly type: "uint256";
        }];
        readonly name: "ERC20InsufficientBalance";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "approver";
            readonly type: "address";
        }];
        readonly name: "ERC20InvalidApprover";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }];
        readonly name: "ERC20InvalidReceiver";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "ERC20InvalidSender";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }];
        readonly name: "ERC20InvalidSpender";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "deadline";
            readonly type: "uint256";
        }];
        readonly name: "ERC2612ExpiredSignature";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signer";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }];
        readonly name: "ERC2612InvalidSigner";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "timepoint";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint48";
            readonly name: "clock";
            readonly type: "uint48";
        }];
        readonly name: "ERC5805FutureLookup";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ERC6372InconsistentClock";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EnforcedPause";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ExpectedPause";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "currentNonce";
            readonly type: "uint256";
        }];
        readonly name: "InvalidAccountNonce";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "bits";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "SafeCastOverflowedUintDowncast";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "slot";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly name: "VotesExpiredSignature";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "Approval";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "delegator";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "fromDelegate";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "toDelegate";
            readonly type: "address";
        }];
        readonly name: "DelegateChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "delegate";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "previousVotes";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "newVotes";
            readonly type: "uint256";
        }];
        readonly name: "DelegateVotesChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [];
        readonly name: "EIP712DomainChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "version";
            readonly type: "uint64";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Paused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "Transfer";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Unpaused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "Upgraded";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "CLOCK_MODE";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "DOMAIN_SEPARATOR";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "PAUSER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UPGRADER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }];
        readonly name: "allowance";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "approve";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "b3tr";
        readonly outputs: readonly [{
            readonly internalType: "contract IERC20";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "balanceOf";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "pos";
            readonly type: "uint32";
        }];
        readonly name: "checkpoints";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint48";
                readonly name: "_key";
                readonly type: "uint48";
            }, {
                readonly internalType: "uint208";
                readonly name: "_value";
                readonly type: "uint208";
            }];
            readonly internalType: "struct Checkpoints.Checkpoint208";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "clock";
        readonly outputs: readonly [{
            readonly internalType: "uint48";
            readonly name: "";
            readonly type: "uint48";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "convertToB3TR";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "convertToVOT3";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "convertedB3trOf";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "decimals";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "delegatee";
            readonly type: "address";
        }];
        readonly name: "delegate";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "delegatee";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "nonce";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint8";
            readonly name: "v";
            readonly type: "uint8";
        }, {
            readonly internalType: "bytes32";
            readonly name: "r";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "s";
            readonly type: "bytes32";
        }];
        readonly name: "delegateBySig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "delegates";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "eip712Domain";
        readonly outputs: readonly [{
            readonly internalType: "bytes1";
            readonly name: "fields";
            readonly type: "bytes1";
        }, {
            readonly internalType: "string";
            readonly name: "name";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "version";
            readonly type: "string";
        }, {
            readonly internalType: "uint256";
            readonly name: "chainId";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "verifyingContract";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "salt";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "extensions";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "timepoint";
            readonly type: "uint256";
        }];
        readonly name: "getPastQuadraticVotingPower";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "timepoint";
            readonly type: "uint256";
        }];
        readonly name: "getPastTotalSupply";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "timepoint";
            readonly type: "uint256";
        }];
        readonly name: "getPastVotes";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "getQuadraticVotingPower";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "getVotes";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_admin";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_upgrader";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_pauser";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_b3tr";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }];
        readonly name: "nonces";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "numCheckpoints";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "deadline";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint8";
            readonly name: "v";
            readonly type: "uint8";
        }, {
            readonly internalType: "bytes32";
            readonly name: "r";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "s";
            readonly type: "bytes32";
        }];
        readonly name: "permit";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "callerConfirmation";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "symbol";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "totalSupply";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "transfer";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "transferFrom";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "unpause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    address: {
        mainnet: string;
        testnet: string;
    };
    interface: VOT3Interface;
};
declare const VoterRewards: {
    abi: readonly [{
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "AccessControlBadConfirmation";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "neededRole";
            readonly type: "bytes32";
        }];
        readonly name: "AccessControlUnauthorizedAccount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "target";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CheckpointUnorderedInsertion";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ReentrancyGuardReentrantCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "bits";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "SafeCastOverflowedUintDowncast";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "slot";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newAddress";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "oldAddress";
            readonly type: "address";
        }];
        readonly name: "EmissionsAddressUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newAddress";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "oldAddress";
            readonly type: "address";
        }];
        readonly name: "GalaxyMemberAddressUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "version";
            readonly type: "uint64";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "level";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "multiplier";
            readonly type: "uint256";
        }];
        readonly name: "LevelToMultiplierSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bool";
            readonly name: "disabled";
            readonly type: "bool";
        }];
        readonly name: "QuadraticRewardingToggled";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "cycle";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "voter";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "reward";
            readonly type: "uint256";
        }];
        readonly name: "RewardClaimed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "Upgraded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "cycle";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "voter";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "votes";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "rewardWeightedVote";
            readonly type: "uint256";
        }];
        readonly name: "VoteRegistered";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "CONTRACTS_ADDRESS_MANAGER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "SCALING_FACTOR";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UPGRADER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "VOTE_REGISTRAR_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "b3tr";
        readonly outputs: readonly [{
            readonly internalType: "contract IB3TR";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "cycle";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "voter";
            readonly type: "address";
        }];
        readonly name: "claimReward";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "clock";
        readonly outputs: readonly [{
            readonly internalType: "uint48";
            readonly name: "";
            readonly type: "uint48";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "cycle";
            readonly type: "uint256";
        }];
        readonly name: "cycleToTotal";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "cycle";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "voter";
            readonly type: "address";
        }];
        readonly name: "cycleToVoterToTotal";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "emissions";
        readonly outputs: readonly [{
            readonly internalType: "contract IEmissions";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "galaxyMember";
        readonly outputs: readonly [{
            readonly internalType: "contract IGalaxyMember";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "proposalId";
            readonly type: "uint256";
        }];
        readonly name: "getMultiplier";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "cycle";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "voter";
            readonly type: "address";
        }];
        readonly name: "getReward";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nodeId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "proposalId";
            readonly type: "uint256";
        }];
        readonly name: "hasNodeVoted";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "proposalId";
            readonly type: "uint256";
        }];
        readonly name: "hasTokenVoted";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "admin";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "upgrader";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "contractsAddressManager";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_emissions";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_galaxyMember";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_b3tr";
            readonly type: "address";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "levels";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "multipliers";
            readonly type: "uint256[]";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint48";
            readonly name: "blockNumber";
            readonly type: "uint48";
        }];
        readonly name: "isQuadraticRewardingDisabledAtBlock";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "isQuadraticRewardingDisabledForCurrentCycle";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "level";
            readonly type: "uint256";
        }];
        readonly name: "levelToMultiplier";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "proposalId";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "voter";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "votes";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "votePower";
            readonly type: "uint256";
        }];
        readonly name: "registerVote";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "callerConfirmation";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_emissions";
            readonly type: "address";
        }];
        readonly name: "setEmissions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_galaxyMember";
            readonly type: "address";
        }];
        readonly name: "setGalaxyMember";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "level";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "multiplier";
            readonly type: "uint256";
        }];
        readonly name: "setLevelToMultiplier";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "toggleQuadraticRewarding";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    address: {
        mainnet: string;
        testnet: string;
    };
    interface: VoterRewardsInterface;
};
declare const X2EarnApps: {
    abi: readonly [{
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "AccessControlBadConfirmation";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "neededRole";
            readonly type: "bytes32";
        }];
        readonly name: "AccessControlUnauthorizedAccount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "target";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "timepoint";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint48";
            readonly name: "clock";
            readonly type: "uint48";
        }];
        readonly name: "ERC5805FutureLookup";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ERC6372InconsistentClock";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }];
        readonly name: "NodeManagementXAppAlreadyIncluded";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "bits";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "SafeCastOverflowedUintDowncast";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "slot";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "creator";
            readonly type: "address";
        }];
        readonly name: "X2EarnAlreadyCreator";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "X2EarnAlreadyEndorser";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }];
        readonly name: "X2EarnAppAlreadyEndorsed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }];
        readonly name: "X2EarnAppAlreadyExists";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }];
        readonly name: "X2EarnAppBlacklisted";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "addr";
            readonly type: "address";
        }];
        readonly name: "X2EarnInvalidAddress";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "percentage";
            readonly type: "uint256";
        }];
        readonly name: "X2EarnInvalidAllocationPercentage";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "X2EarnInvalidStartIndex";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "X2EarnInvalidStartIndex";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }];
        readonly name: "X2EarnMaxCreatorsReached";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }];
        readonly name: "X2EarnMaxManagersReached";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }];
        readonly name: "X2EarnMaxModeratorsReached";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }];
        readonly name: "X2EarnMaxRewardDistributorsReached";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "X2EarnNonEndorser";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "X2EarnNonNodeHolder";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }];
        readonly name: "X2EarnNonexistentApp";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "creator";
            readonly type: "address";
        }];
        readonly name: "X2EarnNonexistentCreator";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "moderator";
            readonly type: "address";
        }];
        readonly name: "X2EarnNonexistentModerator";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "distributorAddress";
            readonly type: "address";
        }];
        readonly name: "X2EarnNonexistentRewardDistributor";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "X2EarnUnauthorizedUser";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "creator";
            readonly type: "address";
        }];
        readonly name: "X2EarnUnverifiedCreator";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "id";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "addr";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "name";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "appAvailableForAllocationVoting";
            readonly type: "bool";
        }];
        readonly name: "AppAdded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldAdmin";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newAdmin";
            readonly type: "address";
        }];
        readonly name: "AppAdminUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "id";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "nodeId";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "endorsed";
            readonly type: "bool";
        }];
        readonly name: "AppEndorsed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "endorsed";
            readonly type: "bool";
        }];
        readonly name: "AppEndorsementStatusUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "oldMetadataURI";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "newMetadataURI";
            readonly type: "string";
        }];
        readonly name: "AppMetadataURIUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint48";
            readonly name: "startBlock";
            readonly type: "uint48";
        }, {
            readonly indexed: false;
            readonly internalType: "uint48";
            readonly name: "endBlock";
            readonly type: "uint48";
        }];
        readonly name: "AppUnendorsedGracePeriodStarted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "oldBaseURI";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "newBaseURI";
            readonly type: "string";
        }];
        readonly name: "BaseURIUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "isBlacklisted";
            readonly type: "bool";
        }];
        readonly name: "BlacklistUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "creatorAddress";
            readonly type: "address";
        }];
        readonly name: "CreatorAddedToApp";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "oldThreshold";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "newThreshold";
            readonly type: "uint256";
        }];
        readonly name: "EndorsementScoreThresholdUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "oldGracePeriod";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "newGracePeriod";
            readonly type: "uint256";
        }];
        readonly name: "GracePeriodUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "version";
            readonly type: "uint64";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "moderator";
            readonly type: "address";
        }];
        readonly name: "ModeratorAddedToApp";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "moderator";
            readonly type: "address";
        }];
        readonly name: "ModeratorRemovedFromApp";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "strength";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "thunder";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "mjolnir";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "veThorX";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "strengthX";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "thunderX";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "mjolnirX";
                readonly type: "uint256";
            }];
            readonly indexed: true;
            readonly internalType: "struct VechainNodesDataTypes.NodeStrengthScores";
            readonly name: "nodeStrengthScores";
            readonly type: "tuple";
        }];
        readonly name: "NodeStrengthScoresUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "distributorAddress";
            readonly type: "address";
        }];
        readonly name: "RewardDistributorAddedToApp";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "distributorAddress";
            readonly type: "address";
        }];
        readonly name: "RewardDistributorRemovedFromApp";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "oldPercentage";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "newPercentage";
            readonly type: "uint256";
        }];
        readonly name: "TeamAllocationPercentageUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldTeamWalletAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newTeamWalletAddress";
            readonly type: "address";
        }];
        readonly name: "TeamWalletAddressUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "Upgraded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "isAvailable";
            readonly type: "bool";
        }];
        readonly name: "VotingEligibilityUpdated";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "CLOCK_MODE";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "GOVERNANCE_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "MAX_CREATORS";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "MAX_MODERATORS";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "MAX_REWARD_DISTRIBUTORS";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UPGRADER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_appId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "_moderator";
            readonly type: "address";
        }];
        readonly name: "addAppModerator";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_appId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "_creator";
            readonly type: "address";
        }];
        readonly name: "addCreator";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_appId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "_distributor";
            readonly type: "address";
        }];
        readonly name: "addRewardDistributor";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "allEligibleApps";
        readonly outputs: readonly [{
            readonly internalType: "bytes32[]";
            readonly name: "";
            readonly type: "bytes32[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }];
        readonly name: "app";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "id";
                readonly type: "bytes32";
            }, {
                readonly internalType: "address";
                readonly name: "teamWalletAddress";
                readonly type: "address";
            }, {
                readonly internalType: "string";
                readonly name: "name";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "metadataURI";
                readonly type: "string";
            }, {
                readonly internalType: "uint256";
                readonly name: "createdAtTimestamp";
                readonly type: "uint256";
            }, {
                readonly internalType: "bool";
                readonly name: "appAvailableForAllocationVoting";
                readonly type: "bool";
            }];
            readonly internalType: "struct X2EarnAppsDataTypes.AppWithDetailsReturnType";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }];
        readonly name: "appAdmin";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }];
        readonly name: "appCreators";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }];
        readonly name: "appExists";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }];
        readonly name: "appModerators";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }];
        readonly name: "appURI";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "apps";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "id";
                readonly type: "bytes32";
            }, {
                readonly internalType: "address";
                readonly name: "teamWalletAddress";
                readonly type: "address";
            }, {
                readonly internalType: "string";
                readonly name: "name";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "metadataURI";
                readonly type: "string";
            }, {
                readonly internalType: "uint256";
                readonly name: "createdAtTimestamp";
                readonly type: "uint256";
            }, {
                readonly internalType: "bool";
                readonly name: "appAvailableForAllocationVoting";
                readonly type: "bool";
            }];
            readonly internalType: "struct X2EarnAppsDataTypes.AppWithDetailsReturnType[]";
            readonly name: "";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "appsCount";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "baseURI";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }];
        readonly name: "checkEndorsement";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "clock";
        readonly outputs: readonly [{
            readonly internalType: "uint48";
            readonly name: "";
            readonly type: "uint48";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "creator";
            readonly type: "address";
        }];
        readonly name: "creatorApps";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "nodeId";
            readonly type: "uint256";
        }];
        readonly name: "endorseApp";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "endorsementScoreThreshold";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }];
        readonly name: "getEndorsers";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nodeId";
            readonly type: "uint256";
        }];
        readonly name: "getNodeEndorsementScore";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getNodeManagementContract";
        readonly outputs: readonly [{
            readonly internalType: "contract INodeManagement";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "startIndex";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "count";
            readonly type: "uint256";
        }];
        readonly name: "getPaginatedApps";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "id";
                readonly type: "bytes32";
            }, {
                readonly internalType: "string";
                readonly name: "name";
                readonly type: "string";
            }, {
                readonly internalType: "uint256";
                readonly name: "createdAtTimestamp";
                readonly type: "uint256";
            }];
            readonly internalType: "struct X2EarnAppsDataTypes.App[]";
            readonly name: "";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }];
        readonly name: "getScore";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "getUsersEndorsementScore";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getVeBetterPassportContract";
        readonly outputs: readonly [{
            readonly internalType: "contract IVeBetterPassport";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "gracePeriod";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "appName";
            readonly type: "string";
        }];
        readonly name: "hashAppName";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint48";
            readonly name: "_gracePeriod";
            readonly type: "uint48";
        }, {
            readonly internalType: "address";
            readonly name: "_nodeManagementContract";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_veBetterPassportContract";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_x2EarnCreatorContract";
            readonly type: "address";
        }];
        readonly name: "initializeV2";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "isAppAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "isAppCreator";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "isAppModerator";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }];
        readonly name: "isAppUnendorsed";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }];
        readonly name: "isBlacklisted";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "timepoint";
            readonly type: "uint256";
        }];
        readonly name: "isEligible";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }];
        readonly name: "isEligibleNow";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "isRewardDistributor";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }];
        readonly name: "metadataURI";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "enum VechainNodesDataTypes.NodeStrengthLevel";
            readonly name: "nodeLevel";
            readonly type: "uint8";
        }];
        readonly name: "nodeLevelEndorsementScore";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nodeId";
            readonly type: "uint256";
        }];
        readonly name: "nodeToEndorsedApp";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_appId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "_creator";
            readonly type: "address";
        }];
        readonly name: "removeAppCreator";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_appId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "_moderator";
            readonly type: "address";
        }];
        readonly name: "removeAppModerator";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_appId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "_nodeId";
            readonly type: "uint256";
        }];
        readonly name: "removeNodeEndorsement";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_appId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "_distributor";
            readonly type: "address";
        }];
        readonly name: "removeRewardDistributor";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_appId";
            readonly type: "bytes32";
        }];
        readonly name: "removeXAppSubmission";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "callerConfirmation";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }];
        readonly name: "rewardDistributors";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_appId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "_newAdmin";
            readonly type: "address";
        }];
        readonly name: "setAppAdmin";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "_baseURI";
            readonly type: "string";
        }];
        readonly name: "setBaseURI";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_nodeManagementContract";
            readonly type: "address";
        }];
        readonly name: "setNodeManagementContract";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_appId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "_percentage";
            readonly type: "uint256";
        }];
        readonly name: "setTeamAllocationPercentage";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_veBetterPassportContract";
            readonly type: "address";
        }];
        readonly name: "setVeBetterPassportContract";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_appId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bool";
            readonly name: "_isEligible";
            readonly type: "bool";
        }];
        readonly name: "setVotingEligibility";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_x2EarnCreatorContract";
            readonly type: "address";
        }];
        readonly name: "setX2EarnCreatorContract";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_teamWalletAddress";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_admin";
            readonly type: "address";
        }, {
            readonly internalType: "string";
            readonly name: "_appName";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "_appMetadataURI";
            readonly type: "string";
        }];
        readonly name: "submitApp";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }];
        readonly name: "teamAllocationPercentage";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }];
        readonly name: "teamWalletAddress";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "nodeId";
            readonly type: "uint256";
        }];
        readonly name: "unendorseApp";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "unendorsedAppIds";
        readonly outputs: readonly [{
            readonly internalType: "bytes32[]";
            readonly name: "";
            readonly type: "bytes32[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "unendorsedApps";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "id";
                readonly type: "bytes32";
            }, {
                readonly internalType: "address";
                readonly name: "teamWalletAddress";
                readonly type: "address";
            }, {
                readonly internalType: "string";
                readonly name: "name";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "metadataURI";
                readonly type: "string";
            }, {
                readonly internalType: "uint256";
                readonly name: "createdAtTimestamp";
                readonly type: "uint256";
            }, {
                readonly internalType: "bool";
                readonly name: "appAvailableForAllocationVoting";
                readonly type: "bool";
            }];
            readonly internalType: "struct X2EarnAppsDataTypes.AppWithDetailsReturnType[]";
            readonly name: "";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_appId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "string";
            readonly name: "_newMetadataURI";
            readonly type: "string";
        }];
        readonly name: "updateAppMetadata";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_scoreThreshold";
            readonly type: "uint256";
        }];
        readonly name: "updateEndorsementScoreThreshold";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint48";
            readonly name: "_newGracePeriod";
            readonly type: "uint48";
        }];
        readonly name: "updateGracePeriod";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "strength";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "thunder";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "mjolnir";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "veThorX";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "strengthX";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "thunderX";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "mjolnirX";
                readonly type: "uint256";
            }];
            readonly internalType: "struct VechainNodesDataTypes.NodeStrengthScores";
            readonly name: "_nodeStrengthScores";
            readonly type: "tuple";
        }];
        readonly name: "updateNodeEndorsementScores";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_appId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "_newReceiverAddress";
            readonly type: "address";
        }];
        readonly name: "updateTeamWalletAddress";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "x2EarnCreatorContract";
        readonly outputs: readonly [{
            readonly internalType: "contract IX2EarnCreator";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    address: {
        mainnet: string;
        testnet: string;
    };
    interface: X2EarnAppsInterface;
};
declare const X2EarnRewardsPool: {
    abi: readonly [{
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "AccessControlBadConfirmation";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "neededRole";
            readonly type: "bytes32";
        }];
        readonly name: "AccessControlUnauthorizedAccount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "target";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ReentrancyGuardReentrantCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "slot";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "version";
            readonly type: "uint64";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "depositor";
            readonly type: "address";
        }];
        readonly name: "NewDeposit";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "reason";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "lowLevelData";
            readonly type: "bytes";
        }];
        readonly name: "RegisterActionFailed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "proof";
            readonly type: "string";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "distributor";
            readonly type: "address";
        }];
        readonly name: "RewardDistributed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "teamWallet";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "withdrawer";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "reason";
            readonly type: "string";
        }];
        readonly name: "TeamWithdrawal";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "Upgraded";
        readonly type: "event";
    }, {
        readonly stateMutability: "payable";
        readonly type: "fallback";
    }, {
        readonly inputs: readonly [];
        readonly name: "CONTRACTS_ADDRESS_MANAGER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "IMPACT_KEY_MANAGER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UPGRADER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "newKey";
            readonly type: "string";
        }];
        readonly name: "addImpactKey";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }];
        readonly name: "availableFunds";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "b3tr";
        readonly outputs: readonly [{
            readonly internalType: "contract IB3TR";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string[]";
            readonly name: "proofTypes";
            readonly type: "string[]";
        }, {
            readonly internalType: "string[]";
            readonly name: "proofValues";
            readonly type: "string[]";
        }, {
            readonly internalType: "string[]";
            readonly name: "impactCodes";
            readonly type: "string[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "impactValues";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "string";
            readonly name: "description";
            readonly type: "string";
        }];
        readonly name: "buildProof";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }];
        readonly name: "deposit";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly name: "distributeReward";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly internalType: "string";
            readonly name: "proof";
            readonly type: "string";
        }];
        readonly name: "distributeRewardDeprecated";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly internalType: "string[]";
            readonly name: "proofTypes";
            readonly type: "string[]";
        }, {
            readonly internalType: "string[]";
            readonly name: "proofValues";
            readonly type: "string[]";
        }, {
            readonly internalType: "string[]";
            readonly name: "impactCodes";
            readonly type: "string[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "impactValues";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "string";
            readonly name: "description";
            readonly type: "string";
        }];
        readonly name: "distributeRewardWithProof";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getAllowedImpactKeys";
        readonly outputs: readonly [{
            readonly internalType: "string[]";
            readonly name: "";
            readonly type: "string[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_admin";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_contractsManagerAdmin";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_upgrader";
            readonly type: "address";
        }, {
            readonly internalType: "contract IB3TR";
            readonly name: "_b3tr";
            readonly type: "address";
        }, {
            readonly internalType: "contract IX2EarnApps";
            readonly name: "_x2EarnApps";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_impactKeyManager";
            readonly type: "address";
        }, {
            readonly internalType: "string[]";
            readonly name: "_initialImpactKeys";
            readonly type: "string[]";
        }];
        readonly name: "initializeV2";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_veBetterPassport";
            readonly type: "address";
        }];
        readonly name: "initializeV3";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "onERC1155BatchReceived";
        readonly outputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "onERC1155Received";
        readonly outputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "onERC721Received";
        readonly outputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "keyToRemove";
            readonly type: "string";
        }];
        readonly name: "removeImpactKey";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "callerConfirmation";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IVeBetterPassport";
            readonly name: "_veBetterPassport";
            readonly type: "address";
        }];
        readonly name: "setVeBetterPassport";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IX2EarnApps";
            readonly name: "_x2EarnApps";
            readonly type: "address";
        }];
        readonly name: "setX2EarnApps";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "veBetterPassport";
        readonly outputs: readonly [{
            readonly internalType: "contract IVeBetterPassport";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "string";
            readonly name: "reason";
            readonly type: "string";
        }];
        readonly name: "withdraw";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "x2EarnApps";
        readonly outputs: readonly [{
            readonly internalType: "contract IX2EarnApps";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    address: {
        mainnet: string;
        testnet: string;
    };
    interface: X2EarnRewardsPoolInterface;
};
declare const XAllocationPool: {
    abi: readonly [{
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "AccessControlBadConfirmation";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "neededRole";
            readonly type: "bytes32";
        }];
        readonly name: "AccessControlUnauthorizedAccount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "target";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CheckpointUnorderedInsertion";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ReentrancyGuardReentrantCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "bits";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "SafeCastOverflowedUintDowncast";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "slot";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "totalAmount";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "recipient";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "unallocatedAmount";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "teamAllocationAmount";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "rewardsAllocationAmount";
            readonly type: "uint256";
        }];
        readonly name: "AllocationRewardsClaimed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldContractAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newContractAddress";
            readonly type: "address";
        }];
        readonly name: "EmissionsContractSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "version";
            readonly type: "uint64";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bool";
            readonly name: "isDisabled";
            readonly type: "bool";
        }];
        readonly name: "QuadraticFundingToggled";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldContractAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newContractAddress";
            readonly type: "address";
        }];
        readonly name: "TreasuryContractSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "Upgraded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldContractAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newContractAddress";
            readonly type: "address";
        }];
        readonly name: "X2EarnAppsContractSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldContractAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newContractAddress";
            readonly type: "address";
        }];
        readonly name: "XAllocationVotingSet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "CLOCK_MODE";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "CONTRACTS_ADDRESS_MANAGER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "PERCENTAGE_PRECISION_SCALING_FACTOR";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UPGRADER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "b3tr";
        readonly outputs: readonly [{
            readonly internalType: "contract IB3TR";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }];
        readonly name: "baseAllocationAmount";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }];
        readonly name: "claim";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }];
        readonly name: "claimableAmount";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "totalAmount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "unallocatedAmount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "teamAllocationAmount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "x2EarnRewardsPoolAmount";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }];
        readonly name: "claimed";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "clock";
        readonly outputs: readonly [{
            readonly internalType: "uint48";
            readonly name: "";
            readonly type: "uint48";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }];
        readonly name: "currentRoundEarnings";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "emissions";
        readonly outputs: readonly [{
            readonly internalType: "contract IEmissions";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }];
        readonly name: "getAppShares";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }];
        readonly name: "getMaxAppAllocation";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_admin";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "upgrader";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "contractsAddressManager";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_b3trAddress";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_treasury";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_x2EarnApps";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_x2EarnRewardsPool";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "isQuadraticFundingDisabledForCurrentRound";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }];
        readonly name: "isQuadraticFundingDisabledForRound";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "callerConfirmation";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }];
        readonly name: "roundEarnings";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "totalAmount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "unallocatedAmount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "teamAllocationAmount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "x2EarnRewardsPoolAmount";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }];
        readonly name: "scaledAppSharesCap";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "emissions_";
            readonly type: "address";
        }];
        readonly name: "setEmissionsAddress";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "treasury_";
            readonly type: "address";
        }];
        readonly name: "setTreasuryAddress";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "x2EarnApps_";
            readonly type: "address";
        }];
        readonly name: "setX2EarnAppsAddress";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "xAllocationVoting_";
            readonly type: "address";
        }];
        readonly name: "setXAllocationVotingAddress";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "toggleQuadraticFunding";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "treasury";
        readonly outputs: readonly [{
            readonly internalType: "contract ITreasury";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "x2EarnApps";
        readonly outputs: readonly [{
            readonly internalType: "contract IX2EarnApps";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "xAllocationVoting";
        readonly outputs: readonly [{
            readonly internalType: "contract IXAllocationVotingGovernor";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    address: {
        mainnet: string;
        testnet: string;
    };
    interface: XAllocationPoolInterface;
};
declare const XAllocationVoting: {
    abi: readonly [{
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "AccessControlBadConfirmation";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "neededRole";
            readonly type: "bytes32";
        }];
        readonly name: "AccessControlUnauthorizedAccount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "target";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "B3TRGovernorOnlyExecutor";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CheckpointUnorderedInsertion";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "voter";
            readonly type: "address";
        }];
        readonly name: "GovernorAlreadyCastVote";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }];
        readonly name: "GovernorAppNotAvailableForVoting";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "GovernorInsufficientVotingPower";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "quorumNumerator";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "quorumDenominator";
            readonly type: "uint256";
        }];
        readonly name: "GovernorInvalidQuorumFraction";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "votingPeriod";
            readonly type: "uint256";
        }];
        readonly name: "GovernorInvalidVotingPeriod";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }];
        readonly name: "GovernorNonexistentRound";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "person";
            readonly type: "address";
        }, {
            readonly internalType: "string";
            readonly name: "reason";
            readonly type: "string";
        }];
        readonly name: "GovernorPersonhoodVerificationFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }, {
            readonly internalType: "enum IXAllocationVotingGovernor.RoundState";
            readonly name: "current";
            readonly type: "uint8";
        }, {
            readonly internalType: "bytes32";
            readonly name: "expectedStates";
            readonly type: "bytes32";
        }];
        readonly name: "GovernorUnexpectedRoundState";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "threshold";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "votes";
            readonly type: "uint256";
        }];
        readonly name: "GovernorVotingThresholdNotMet";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "bits";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "SafeCastOverflowedUintDowncast";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "slot";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "person";
            readonly type: "address";
        }];
        readonly name: "XAllocationVotingPersonhoodVerificationFailed";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "voter";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32[]";
            readonly name: "appsIds";
            readonly type: "bytes32[]";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256[]";
            readonly name: "voteWeights";
            readonly type: "uint256[]";
        }];
        readonly name: "AllocationVoteCast";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldContractAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newContractAddress";
            readonly type: "address";
        }];
        readonly name: "EmissionsSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "version";
            readonly type: "uint64";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "oldQuorumNumerator";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "newQuorumNumerator";
            readonly type: "uint256";
        }];
        readonly name: "QuorumNumeratorUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "proposer";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "voteStart";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "voteEnd";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32[]";
            readonly name: "appsIds";
            readonly type: "bytes32[]";
        }];
        readonly name: "RoundCreated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "Upgraded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldContractAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newContractAddress";
            readonly type: "address";
        }];
        readonly name: "VeBetterPassportSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldContractAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newContractAddress";
            readonly type: "address";
        }];
        readonly name: "VoterRewardsSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "oldVotingPeriod";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "newVotingPeriod";
            readonly type: "uint256";
        }];
        readonly name: "VotingPeriodSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "oldVotingThreshold";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "newVotingThreshold";
            readonly type: "uint256";
        }];
        readonly name: "VotingThresholdSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldContractAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newContractAddress";
            readonly type: "address";
        }];
        readonly name: "X2EarnAppsSet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "CLOCK_MODE";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "CONTRACTS_ADDRESS_MANAGER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "COUNTING_MODE";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "GOVERNANCE_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "ROUND_STARTER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UPGRADER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "appSharesCap";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "baseAllocationPercentage";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32[]";
            readonly name: "appIds";
            readonly type: "bytes32[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "voteWeights";
            readonly type: "uint256[]";
        }];
        readonly name: "castVote";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "clock";
        readonly outputs: readonly [{
            readonly internalType: "uint48";
            readonly name: "";
            readonly type: "uint48";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "currentRoundDeadline";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "currentRoundId";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "currentRoundSnapshot";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "emissions";
        readonly outputs: readonly [{
            readonly internalType: "contract IEmissions";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }];
        readonly name: "finalizeRound";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }];
        readonly name: "getAppIdsOfRound";
        readonly outputs: readonly [{
            readonly internalType: "bytes32[]";
            readonly name: "";
            readonly type: "bytes32[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32";
            readonly name: "app";
            readonly type: "bytes32";
        }];
        readonly name: "getAppVotes";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32";
            readonly name: "app";
            readonly type: "bytes32";
        }];
        readonly name: "getAppVotesQF";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }];
        readonly name: "getAppsOfRound";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "id";
                readonly type: "bytes32";
            }, {
                readonly internalType: "address";
                readonly name: "teamWalletAddress";
                readonly type: "address";
            }, {
                readonly internalType: "string";
                readonly name: "name";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "metadataURI";
                readonly type: "string";
            }, {
                readonly internalType: "uint256";
                readonly name: "createdAtTimestamp";
                readonly type: "uint256";
            }, {
                readonly internalType: "bool";
                readonly name: "appAvailableForAllocationVoting";
                readonly type: "bool";
            }];
            readonly internalType: "struct X2EarnAppsDataTypes.AppWithDetailsReturnType[]";
            readonly name: "";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }];
        readonly name: "getRound";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "proposer";
                readonly type: "address";
            }, {
                readonly internalType: "uint48";
                readonly name: "voteStart";
                readonly type: "uint48";
            }, {
                readonly internalType: "uint32";
                readonly name: "voteDuration";
                readonly type: "uint32";
            }];
            readonly internalType: "struct RoundsStorageUpgradeable.RoundCore";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }];
        readonly name: "getRoundAppSharesCap";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }];
        readonly name: "getRoundBaseAllocationPercentage";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "timepoint";
            readonly type: "uint256";
        }];
        readonly name: "getVotes";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "hasVoted";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "hasVotedOnce";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "contract IVotes";
                readonly name: "vot3Token";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "quorumPercentage";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "initialVotingPeriod";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "timeLock";
                readonly type: "address";
            }, {
                readonly internalType: "contract IVoterRewards";
                readonly name: "voterRewards";
                readonly type: "address";
            }, {
                readonly internalType: "contract IEmissions";
                readonly name: "emissions";
                readonly type: "address";
            }, {
                readonly internalType: "address[]";
                readonly name: "admins";
                readonly type: "address[]";
            }, {
                readonly internalType: "address";
                readonly name: "upgrader";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "contractsAddressManager";
                readonly type: "address";
            }, {
                readonly internalType: "contract IX2EarnApps";
                readonly name: "x2EarnAppsAddress";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "baseAllocationPercentage";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "appSharesCap";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "votingThreshold";
                readonly type: "uint256";
            }];
            readonly internalType: "struct XAllocationVoting.InitializationData";
            readonly name: "data";
            readonly type: "tuple";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IVeBetterPassport";
            readonly name: "_veBetterPassport";
            readonly type: "address";
        }];
        readonly name: "initializeV2";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }];
        readonly name: "isActive";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }];
        readonly name: "isEligibleForVote";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }];
        readonly name: "isFinalized";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }];
        readonly name: "latestSucceededRoundId";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "blockNumber";
            readonly type: "uint256";
        }];
        readonly name: "quorum";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "quorumDenominator";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "timepoint";
            readonly type: "uint256";
        }];
        readonly name: "quorumNumerator";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "quorumNumerator";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }];
        readonly name: "quorumReached";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "callerConfirmation";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }];
        readonly name: "roundDeadline";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }];
        readonly name: "roundProposer";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }];
        readonly name: "roundQuorum";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }];
        readonly name: "roundSnapshot";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "appSharesCap_";
            readonly type: "uint256";
        }];
        readonly name: "setAppSharesCap";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "baseAllocationPercentage_";
            readonly type: "uint256";
        }];
        readonly name: "setBaseAllocationPercentage";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IEmissions";
            readonly name: "newEmissions";
            readonly type: "address";
        }];
        readonly name: "setEmissionsAddress";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IVeBetterPassport";
            readonly name: "newVeBetterPassport";
            readonly type: "address";
        }];
        readonly name: "setVeBetterPassport";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IVoterRewards";
            readonly name: "newVoterRewards";
            readonly type: "address";
        }];
        readonly name: "setVoterRewardsAddress";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "newVotingPeriod";
            readonly type: "uint32";
        }];
        readonly name: "setVotingPeriod";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "newVotingThreshold";
            readonly type: "uint256";
        }];
        readonly name: "setVotingThreshold";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IX2EarnApps";
            readonly name: "newX2EarnApps";
            readonly type: "address";
        }];
        readonly name: "setX2EarnAppsAddress";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "startNewRound";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }];
        readonly name: "state";
        readonly outputs: readonly [{
            readonly internalType: "enum IXAllocationVotingGovernor.RoundState";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "token";
        readonly outputs: readonly [{
            readonly internalType: "contract IERC5805";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }];
        readonly name: "totalVoters";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }];
        readonly name: "totalVotes";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }];
        readonly name: "totalVotesQF";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "newQuorumNumerator";
            readonly type: "uint256";
        }];
        readonly name: "updateQuorumNumerator";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "veBetterPassport";
        readonly outputs: readonly [{
            readonly internalType: "contract IVeBetterPassport";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "voterRewards";
        readonly outputs: readonly [{
            readonly internalType: "contract IVoterRewards";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "votingPeriod";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "votingThreshold";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "x2EarnApps";
        readonly outputs: readonly [{
            readonly internalType: "contract IX2EarnApps";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    address: {
        mainnet: string;
        testnet: string;
    };
    interface: XAllocationVotingInterface;
};
declare const NodeManagement: {
    abi: readonly [{
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "AccessControlBadConfirmation";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "neededRole";
            readonly type: "bytes32";
        }];
        readonly name: "AccessControlUnauthorizedAccount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "target";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nodeId";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "delegatee";
            readonly type: "address";
        }];
        readonly name: "NodeManagementNodeAlreadyDelegated";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NodeManagementNodeNotDelegated";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NodeManagementNonNodeHolder";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NodeManagementSelfDelegation";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NodeManagementZeroAddress";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "slot";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "version";
            readonly type: "uint64";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "nodeId";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "delegatee";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "delegated";
            readonly type: "bool";
        }];
        readonly name: "NodeDelegated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "Upgraded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldContractAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newContractAddress";
            readonly type: "address";
        }];
        readonly name: "VechainNodeContractSet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UPGRADER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "delegatee";
            readonly type: "address";
        }];
        readonly name: "delegateNode";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "getNodeIds";
        readonly outputs: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nodeId";
            readonly type: "uint256";
        }];
        readonly name: "getNodeLevel";
        readonly outputs: readonly [{
            readonly internalType: "enum VechainNodesDataTypes.NodeStrengthLevel";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nodeId";
            readonly type: "uint256";
        }];
        readonly name: "getNodeManager";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "getUsersNodeLevels";
        readonly outputs: readonly [{
            readonly internalType: "enum VechainNodesDataTypes.NodeStrengthLevel[]";
            readonly name: "";
            readonly type: "uint8[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getVechainNodesContract";
        readonly outputs: readonly [{
            readonly internalType: "contract ITokenAuction";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_vechainNodesContract";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_admin";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_upgrader";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "nodeId";
            readonly type: "uint256";
        }];
        readonly name: "isNodeManager";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "removeNodeDelegation";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "callerConfirmation";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "vechainNodesContract";
            readonly type: "address";
        }];
        readonly name: "setVechainNodesContract";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    address: {
        mainnet: string;
        testnet: string;
    };
    interface: NodeManagementInterface;
};
declare const X2EarnCreator: {
    abi: readonly [{
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "AccessControlBadConfirmation";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "neededRole";
            readonly type: "bytes32";
        }];
        readonly name: "AccessControlUnauthorizedAccount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "target";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }];
        readonly name: "AlreadyOwnsNFT";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ERC721EnumerableForbiddenBatchMint";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }];
        readonly name: "ERC721IncorrectOwner";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "operator";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "ERC721InsufficientApproval";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "approver";
            readonly type: "address";
        }];
        readonly name: "ERC721InvalidApprover";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "operator";
            readonly type: "address";
        }];
        readonly name: "ERC721InvalidOperator";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }];
        readonly name: "ERC721InvalidOwner";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }];
        readonly name: "ERC721InvalidReceiver";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "ERC721InvalidSender";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "ERC721NonexistentToken";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "index";
            readonly type: "uint256";
        }];
        readonly name: "ERC721OutOfBoundsIndex";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EnforcedPause";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ExpectedPause";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TransfersDisabled";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "slot";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "X2EarnCreatorUnauthorizedUser";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "approved";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "Approval";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "operator";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "approved";
            readonly type: "bool";
        }];
        readonly name: "ApprovalForAll";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "version";
            readonly type: "uint64";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Paused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "Transfer";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Unpaused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "Upgraded";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "BURNER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "MINTER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "PAUSER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UPGRADER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly name: "approve";
        readonly outputs: readonly [];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }];
        readonly name: "balanceOf";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "baseURI";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "burn";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "getApproved";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "baseURI";
            readonly type: "string";
        }, {
            readonly internalType: "address";
            readonly name: "defaultAdmin";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "operator";
            readonly type: "address";
        }];
        readonly name: "isApprovedForAll";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "ownerOf";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "callerConfirmation";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }];
        readonly name: "safeMint";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "safeTransferFrom";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "safeTransferFrom";
        readonly outputs: readonly [];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly name: "setApprovalForAll";
        readonly outputs: readonly [];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "newBaseURI";
            readonly type: "string";
        }];
        readonly name: "setBaseURI";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "symbol";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "index";
            readonly type: "uint256";
        }];
        readonly name: "tokenByIndex";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "index";
            readonly type: "uint256";
        }];
        readonly name: "tokenOfOwnerByIndex";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "tokenURI";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "totalSupply";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly name: "transferFrom";
        readonly outputs: readonly [];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "unpause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    address: {
        mainnet: string;
        testnet: string;
    };
    interface: X2EarnCreatorInterface;
};
declare const VeBetterPassport: {
    abi: readonly [{
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "AccessControlBadConfirmation";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "neededRole";
            readonly type: "bytes32";
        }];
        readonly name: "AccessControlUnauthorizedAccount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "target";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "entity";
            readonly type: "address";
        }];
        readonly name: "AlreadyDelegated";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "entity";
            readonly type: "address";
        }];
        readonly name: "AlreadyLinked";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "CannotDelegateToSelf";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "CannotLinkToSelf";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "entity";
            readonly type: "address";
        }];
        readonly name: "DelegatedEntity";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidSignature";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "MaxEntitiesPerPassportReached";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "NotDelegated";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "NotLinked";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyOneLinkAllowed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyOneUserAllowed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "PassportDelegationFromEntity";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "PassportDelegationToEntity";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "PassportDelegationUnauthorizedUser";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "bits";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "SafeCastOverflowedUintDowncast";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "SignatureExpired";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "slot";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "UnauthorizedUser";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "VeBetterPassportUnauthorizedUser";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "string";
            readonly name: "checkName";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "enabled";
            readonly type: "bool";
        }];
        readonly name: "CheckToggled";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "delegator";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "delegatee";
            readonly type: "address";
        }];
        readonly name: "DelegationCreated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "delegator";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "delegatee";
            readonly type: "address";
        }];
        readonly name: "DelegationPending";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "delegator";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "delegatee";
            readonly type: "address";
        }];
        readonly name: "DelegationRevoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "version";
            readonly type: "uint64";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "entity";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "passport";
            readonly type: "address";
        }];
        readonly name: "LinkCreated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "entity";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "passport";
            readonly type: "address";
        }];
        readonly name: "LinkPending";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "entity";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "passport";
            readonly type: "address";
        }];
        readonly name: "LinkRemoved";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "minimumGalaxyMemberLevel";
            readonly type: "uint256";
        }];
        readonly name: "MinimumGalaxyMemberLevelSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "passport";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "round";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "actionScore";
            readonly type: "uint256";
        }];
        readonly name: "RegisteredAction";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "removedBy";
            readonly type: "address";
        }];
        readonly name: "RemovedUserFromBlacklist";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "passport";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "removedBy";
            readonly type: "address";
        }];
        readonly name: "RemovedUserFromWhitelist";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "signaler";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "app";
            readonly type: "bytes32";
        }];
        readonly name: "SignalerAssignedToApp";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "signaler";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "app";
            readonly type: "bytes32";
        }];
        readonly name: "SignalerRemovedFromApp";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "Upgraded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "blacklistedBy";
            readonly type: "address";
        }];
        readonly name: "UserBlacklisted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "signaler";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "app";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "reason";
            readonly type: "string";
        }];
        readonly name: "UserSignaled";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "reason";
            readonly type: "string";
        }];
        readonly name: "UserSignalsReset";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "app";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "reason";
            readonly type: "string";
        }];
        readonly name: "UserSignalsResetForApp";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "whitelistedBy";
            readonly type: "address";
        }];
        readonly name: "UserWhitelisted";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "ACTION_REGISTRAR_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "ACTION_SCORE_MANAGER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "CLOCK_MODE";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "ROLE_GRANTER";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "SETTINGS_MANAGER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "SIGNALER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UPGRADER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "WHITELISTER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "delegator";
            readonly type: "address";
        }];
        readonly name: "acceptDelegation";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "entity";
            readonly type: "address";
        }];
        readonly name: "acceptEntityLink";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_signaler";
            readonly type: "address";
        }];
        readonly name: "appOfSignaler";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }];
        readonly name: "appSecurity";
        readonly outputs: readonly [{
            readonly internalType: "enum PassportTypes.APP_SECURITY";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_app";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "_user";
            readonly type: "address";
        }];
        readonly name: "appSignalsCounter";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_app";
            readonly type: "bytes32";
        }];
        readonly name: "appTotalSignalsCounter";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "app";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "assignSignalerToApp";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "app";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "assignSignalerToAppByAppAdmin";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_user";
            readonly type: "address";
        }];
        readonly name: "blacklist";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "blacklistThreshold";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "cancelOutgoingPendingDelegation";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "cancelOutgoingPendingEntityLink";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "clock";
        readonly outputs: readonly [{
            readonly internalType: "uint48";
            readonly name: "";
            readonly type: "uint48";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "decayRate";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "delegatee";
            readonly type: "address";
        }];
        readonly name: "delegatePassport";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "delegator";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "deadline";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "signature";
            readonly type: "bytes";
        }];
        readonly name: "delegateWithSignature";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "delegator";
            readonly type: "address";
        }];
        readonly name: "denyIncomingPendingDelegation";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "entity";
            readonly type: "address";
        }];
        readonly name: "denyIncomingPendingEntityLink";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "eip712Domain";
        readonly outputs: readonly [{
            readonly internalType: "bytes1";
            readonly name: "fields";
            readonly type: "bytes1";
        }, {
            readonly internalType: "string";
            readonly name: "name";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "signatureVersion";
            readonly type: "string";
        }, {
            readonly internalType: "uint256";
            readonly name: "chainId";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "verifyingContract";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "salt";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "extensions";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "lastRound";
            readonly type: "uint256";
        }];
        readonly name: "getCumulativeScoreWithDecay";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "delegator";
            readonly type: "address";
        }];
        readonly name: "getDelegatee";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "delegator";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "timepoint";
            readonly type: "uint256";
        }];
        readonly name: "getDelegateeInTimepoint";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "delegatee";
            readonly type: "address";
        }];
        readonly name: "getDelegator";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "delegatee";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "timepoint";
            readonly type: "uint256";
        }];
        readonly name: "getDelegatorInTimepoint";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "passport";
            readonly type: "address";
        }];
        readonly name: "getEntitiesLinkedToPassport";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getGalaxyMember";
        readonly outputs: readonly [{
            readonly internalType: "contract IGalaxyMember";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getMinimumGalaxyMemberLevel";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "entity";
            readonly type: "address";
        }];
        readonly name: "getPassportForEntity";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "entity";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "timepoint";
            readonly type: "uint256";
        }];
        readonly name: "getPassportForEntityAtTimepoint";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "getPendingDelegations";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "incoming";
            readonly type: "address[]";
        }, {
            readonly internalType: "address";
            readonly name: "outgoing";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "getPendingLinkings";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "incoming";
            readonly type: "address[]";
        }, {
            readonly internalType: "address";
            readonly name: "outgoing";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getX2EarnApps";
        readonly outputs: readonly [{
            readonly internalType: "contract IX2EarnApps";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getXAllocationVoting";
        readonly outputs: readonly [{
            readonly internalType: "contract IXAllocationVotingGovernor";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "contract IXAllocationVotingGovernor";
                readonly name: "xAllocationVoting";
                readonly type: "address";
            }, {
                readonly internalType: "contract IX2EarnApps";
                readonly name: "x2EarnApps";
                readonly type: "address";
            }, {
                readonly internalType: "contract IGalaxyMember";
                readonly name: "galaxyMember";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "signalingThreshold";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "roundsForCumulativeScore";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minimumGalaxyMemberLevel";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "blacklistThreshold";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "whitelistThreshold";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "maxEntitiesPerPassport";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "decayRate";
                readonly type: "uint256";
            }];
            readonly internalType: "struct PassportTypes.InitializationData";
            readonly name: "data";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "admin";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "botSignaler";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "upgrader";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "settingsManager";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "roleGranter";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "blacklister";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "whitelister";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "actionRegistrar";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "actionScoreManager";
                readonly type: "address";
            }];
            readonly internalType: "struct PassportTypes.InitializationRoleData";
            readonly name: "roles";
            readonly type: "tuple";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_user";
            readonly type: "address";
        }];
        readonly name: "isBlacklisted";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "enum PassportTypes.CheckType";
            readonly name: "check";
            readonly type: "uint8";
        }];
        readonly name: "isCheckEnabled";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "isDelegatee";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "timepoint";
            readonly type: "uint256";
        }];
        readonly name: "isDelegateeInTimepoint";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "isDelegator";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "timepoint";
            readonly type: "uint256";
        }];
        readonly name: "isDelegatorInTimepoint";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "isEntity";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "timepoint";
            readonly type: "uint256";
        }];
        readonly name: "isEntityInTimepoint";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "isPassport";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "passport";
            readonly type: "address";
        }];
        readonly name: "isPassportBlacklisted";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "timepoint";
            readonly type: "uint256";
        }];
        readonly name: "isPassportInTimepoint";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "passport";
            readonly type: "address";
        }];
        readonly name: "isPassportWhitelisted";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "isPerson";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "person";
            readonly type: "bool";
        }, {
            readonly internalType: "string";
            readonly name: "reason";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly internalType: "uint48";
            readonly name: "timepoint";
            readonly type: "uint48";
        }];
        readonly name: "isPersonAtTimepoint";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "person";
            readonly type: "bool";
        }, {
            readonly internalType: "string";
            readonly name: "reason";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_user";
            readonly type: "address";
        }];
        readonly name: "isWhitelisted";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "passport";
            readonly type: "address";
        }];
        readonly name: "linkEntityToPassport";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "entity";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "deadline";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "signature";
            readonly type: "bytes";
        }];
        readonly name: "linkEntityToPassportWithSignature";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "maxEntitiesPerPassport";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "minimumGalaxyMemberLevel";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }];
        readonly name: "registerAction";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "round";
            readonly type: "uint256";
        }];
        readonly name: "registerActionForRound";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "round";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "totalScore";
            readonly type: "uint256";
        }];
        readonly name: "registerAggregatedActionsForRound";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "entity";
            readonly type: "address";
        }];
        readonly name: "removeEntityLink";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_user";
            readonly type: "address";
        }];
        readonly name: "removeFromBlacklist";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_user";
            readonly type: "address";
        }];
        readonly name: "removeFromWhitelist";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "removeSignalerFromApp";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "removeSignalerFromAppByAppAdmin";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "callerConfirmation";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly internalType: "string";
            readonly name: "reason";
            readonly type: "string";
        }];
        readonly name: "resetUserSignalsByAppAdminWithReason";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly internalType: "string";
            readonly name: "reason";
            readonly type: "string";
        }];
        readonly name: "resetUserSignalsWithReason";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "revokeDelegation";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "roundsForCumulativeScore";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "enum PassportTypes.APP_SECURITY";
            readonly name: "security";
            readonly type: "uint8";
        }];
        readonly name: "securityMultiplier";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "enum PassportTypes.APP_SECURITY";
            readonly name: "security";
            readonly type: "uint8";
        }];
        readonly name: "setAppSecurity";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_threshold";
            readonly type: "uint256";
        }];
        readonly name: "setBlacklistThreshold";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_decayRate";
            readonly type: "uint256";
        }];
        readonly name: "setDecayRate";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IGalaxyMember";
            readonly name: "galaxyMember";
            readonly type: "address";
        }];
        readonly name: "setGalaxyMember";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "maxEntities";
            readonly type: "uint256";
        }];
        readonly name: "setMaxEntitiesPerPassport";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_minimumGalaxyMemberLevel";
            readonly type: "uint256";
        }];
        readonly name: "setMinimumGalaxyMemberLevel";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "rounds";
            readonly type: "uint256";
        }];
        readonly name: "setRoundsForCumulativeScore";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "enum PassportTypes.APP_SECURITY";
            readonly name: "security";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint256";
            readonly name: "multiplier";
            readonly type: "uint256";
        }];
        readonly name: "setSecurityMultiplier";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "threshold";
            readonly type: "uint256";
        }];
        readonly name: "setSignalingThreshold";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint208";
            readonly name: "threshold";
            readonly type: "uint208";
        }];
        readonly name: "setThresholdPoPScore";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_threshold";
            readonly type: "uint256";
        }];
        readonly name: "setWhitelistThreshold";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IX2EarnApps";
            readonly name: "_x2EarnApps";
            readonly type: "address";
        }];
        readonly name: "setX2EarnApps";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IXAllocationVotingGovernor";
            readonly name: "xAllocationVoting";
            readonly type: "address";
        }];
        readonly name: "setXAllocationVoting";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_user";
            readonly type: "address";
        }];
        readonly name: "signalUser";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_user";
            readonly type: "address";
        }, {
            readonly internalType: "string";
            readonly name: "reason";
            readonly type: "string";
        }];
        readonly name: "signalUserWithReason";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_user";
            readonly type: "address";
        }];
        readonly name: "signaledCounter";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "signalingThreshold";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "thresholdPoPScore";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint48";
            readonly name: "timepoint";
            readonly type: "uint48";
        }];
        readonly name: "thresholdPoPScoreAtTimepoint";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "enum PassportTypes.CheckType";
            readonly name: "check";
            readonly type: "uint8";
        }];
        readonly name: "toggleCheck";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }];
        readonly name: "userAppTotalScore";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "round";
            readonly type: "uint256";
        }];
        readonly name: "userRoundScore";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "round";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32";
            readonly name: "appId";
            readonly type: "bytes32";
        }];
        readonly name: "userRoundScoreApp";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "userTotalScore";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_user";
            readonly type: "address";
        }];
        readonly name: "whitelist";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "whitelistThreshold";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    address: {
        mainnet: string;
        testnet: string;
    };
    interface: VeBetterPassportInterface;
};

export { B3TR, B3TRGovernor, Emissions, GalaxyMember, NodeManagement, TimeLock, Treasury, VOT3, VeBetterPassport, VoterRewards, X2EarnApps, X2EarnCreator, X2EarnRewardsPool, XAllocationPool, XAllocationVoting };
