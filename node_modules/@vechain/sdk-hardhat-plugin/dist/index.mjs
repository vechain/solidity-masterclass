import { HexUInt, Secp256k1, Address } from '@vechain/sdk-core';
import { VechainSDKError, JSONRPCInternalError } from '@vechain/sdk-errors';
import { HardhatVeChainProvider, ProviderInternalBaseWallet, DelegationHandler, ProviderInternalHDWallet } from '@vechain/sdk-network';
import { extendEnvironment } from 'hardhat/config';
import { HardhatPluginError, lazyObject } from 'hardhat/plugins';
import { deployContract, getContractFactory, getContractFactoryFromArtifact, getContractAtFromArtifact, getContractAt, getSigner, getSigners } from '@nomicfoundation/hardhat-ethers/internal/helpers';
import { VeChainSDKLogger } from '@vechain/sdk-logging';
import { ethers } from 'ethers';
import 'hardhat/types/config';
import 'hardhat/types/runtime';
import { HardhatEthersProvider } from '@nomicfoundation/hardhat-ethers/internal/hardhat-ethers-provider';
import { contractAdapter, factoryAdapter } from '@vechain/sdk-ethers-adapter';

var p=t=>{let e=t.accounts;if(e===void 0)return new ProviderInternalBaseWallet([],{});if(e==="remote")throw new JSONRPCInternalError("createWalletFromHardhatNetworkConfig()","Remote accounts are not supported in hardhat network configuration.",{accountFromConfig:e,networkConfig:t});return Array.isArray(e)?new ProviderInternalBaseWallet(e.map(r=>{let a=HexUInt.of(r.startsWith("0x")?r.slice(2):r).bytes;return {privateKey:a,publicKey:Secp256k1.derivePublicKey(a),address:Address.ofPrivateKey(a).toString()}}),{delegator:DelegationHandler(t.delegator).delegatorOrUndefined()}):new ProviderInternalHDWallet(e.mnemonic.split(" "),e.count,e.initialIndex,e.path,{delegator:DelegationHandler(t.delegator).delegatorOrUndefined()})};extendEnvironment(t=>{let e=t.network.name,r=t.config.networks[e],a=r.debug!==void 0&&r.debug,f=r.enableDelegation!==void 0&&r.enableDelegation,d=r.rpcConfiguration,h=d?.ethGetTransactionCountMustReturn0!==void 0?d?.ethGetTransactionCountMustReturn0:!1;if(!e.includes("vechain")){VeChainSDKLogger("warning").log({title:"You are operating on a non-vechain network",messages:["Ensure your hardhat config file has a network that:","	1. Is a VeChain valid network (set url and optionally delegator parameter)",'	2. Has the name of the network containing "vechain" (e.g. "vechain_mainnet", "vechain_testnet", "vechain_solo", ...)',"","This is required to use the VeChain provider and its functions.","Note that this is only a warning and you can use hardhat without a VeChain network.","BUT it's possible that some functionalities will not be available."]});return}console.log("networkConfig",r.rpcConfiguration);let o=new HardhatVeChainProvider(p(r),r.url,(c,n)=>new HardhatPluginError("@vechain/sdk-hardhat-plugin",c,n),a,f,{ethGetTransactionCountMustReturn0:h});t.VeChainProvider=lazyObject(()=>o),t.network.provider=o,t.ethers=lazyObject(()=>{let c=new HardhatEthersProvider(o,t.network.name);return {...ethers,deployContract:async(...n)=>await deployContract.bind(null,t)(...n).then(i=>contractAdapter(i,o)),getContractFactory:async(...n)=>await getContractFactory.bind(null,t)(...n).then(i=>factoryAdapter(i,o)),getContractFactoryFromArtifact:async(n,s)=>await getContractFactoryFromArtifact.bind(null,t)(n,s).then(C=>factoryAdapter(C,o)),getImpersonatedSigner:n=>{throw new VechainSDKError("getImpersonatedSigner()","Method not implemented.",{functionName:"getImpersonatedSigner"})},getContractAtFromArtifact:getContractAtFromArtifact.bind(null,t),getContractAt:getContractAt.bind(null,t),getSigner:async n=>await getSigner(t,n),getSigners:async()=>await getSigners(t),provider:c}});});
