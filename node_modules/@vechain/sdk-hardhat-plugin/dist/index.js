'use strict';

var sdkCore = require('@vechain/sdk-core');
var sdkErrors = require('@vechain/sdk-errors');
var sdkNetwork = require('@vechain/sdk-network');
var config = require('hardhat/config');
var plugins = require('hardhat/plugins');
var helpers = require('@nomicfoundation/hardhat-ethers/internal/helpers');
var sdkLogging = require('@vechain/sdk-logging');
var ethers = require('ethers');
require('hardhat/types/config');
require('hardhat/types/runtime');
var hardhatEthersProvider = require('@nomicfoundation/hardhat-ethers/internal/hardhat-ethers-provider');
var sdkEthersAdapter = require('@vechain/sdk-ethers-adapter');

var p=t=>{let e=t.accounts;if(e===void 0)return new sdkNetwork.ProviderInternalBaseWallet([],{});if(e==="remote")throw new sdkErrors.JSONRPCInternalError("createWalletFromHardhatNetworkConfig()","Remote accounts are not supported in hardhat network configuration.",{accountFromConfig:e,networkConfig:t});return Array.isArray(e)?new sdkNetwork.ProviderInternalBaseWallet(e.map(r=>{let a=sdkCore.HexUInt.of(r.startsWith("0x")?r.slice(2):r).bytes;return {privateKey:a,publicKey:sdkCore.Secp256k1.derivePublicKey(a),address:sdkCore.Address.ofPrivateKey(a).toString()}}),{delegator:sdkNetwork.DelegationHandler(t.delegator).delegatorOrUndefined()}):new sdkNetwork.ProviderInternalHDWallet(e.mnemonic.split(" "),e.count,e.initialIndex,e.path,{delegator:sdkNetwork.DelegationHandler(t.delegator).delegatorOrUndefined()})};config.extendEnvironment(t=>{let e=t.network.name,r=t.config.networks[e],a=r.debug!==void 0&&r.debug,f=r.enableDelegation!==void 0&&r.enableDelegation,d=r.rpcConfiguration,h=d?.ethGetTransactionCountMustReturn0!==void 0?d?.ethGetTransactionCountMustReturn0:!1;if(!e.includes("vechain")){sdkLogging.VeChainSDKLogger("warning").log({title:"You are operating on a non-vechain network",messages:["Ensure your hardhat config file has a network that:","	1. Is a VeChain valid network (set url and optionally delegator parameter)",'	2. Has the name of the network containing "vechain" (e.g. "vechain_mainnet", "vechain_testnet", "vechain_solo", ...)',"","This is required to use the VeChain provider and its functions.","Note that this is only a warning and you can use hardhat without a VeChain network.","BUT it's possible that some functionalities will not be available."]});return}console.log("networkConfig",r.rpcConfiguration);let o=new sdkNetwork.HardhatVeChainProvider(p(r),r.url,(c,n)=>new plugins.HardhatPluginError("@vechain/sdk-hardhat-plugin",c,n),a,f,{ethGetTransactionCountMustReturn0:h});t.VeChainProvider=plugins.lazyObject(()=>o),t.network.provider=o,t.ethers=plugins.lazyObject(()=>{let c=new hardhatEthersProvider.HardhatEthersProvider(o,t.network.name);return {...ethers.ethers,deployContract:async(...n)=>await helpers.deployContract.bind(null,t)(...n).then(i=>sdkEthersAdapter.contractAdapter(i,o)),getContractFactory:async(...n)=>await helpers.getContractFactory.bind(null,t)(...n).then(i=>sdkEthersAdapter.factoryAdapter(i,o)),getContractFactoryFromArtifact:async(n,s)=>await helpers.getContractFactoryFromArtifact.bind(null,t)(n,s).then(C=>sdkEthersAdapter.factoryAdapter(C,o)),getImpersonatedSigner:n=>{throw new sdkErrors.VechainSDKError("getImpersonatedSigner()","Method not implemented.",{functionName:"getImpersonatedSigner"})},getContractAtFromArtifact:helpers.getContractAtFromArtifact.bind(null,t),getContractAt:helpers.getContractAt.bind(null,t),getSigner:async n=>await helpers.getSigner(t,n),getSigners:async()=>await helpers.getSigners(t),provider:c}});});
