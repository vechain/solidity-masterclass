/// <reference types="@vechain/connex-types" />
import { FilterOpts, Wallet, TxObj } from './types';
import { Subscription } from './eip1193';
import { Provider } from './provider';
export declare const toSubscription: (ret: any, id: string) => Subscription;
/**
 * Convert the input into either block id or block number compatible with connex.thor.block()
 * @param {hex | 'earliest' | 'latest' } input
 * @returns {string | number | null | undefined} Return null not recognized and undefined if input === 'latest'
 */
export declare function parseBlockNumber(input: string): string | number | undefined | null;
export declare function toBytes32(hex: string): string;
export declare function hexToNumber(hex: string): number;
export declare function toHex(value: number | string): string;
export declare function randAddr(): string;
export declare function isHexStrict(hex: string): boolean;
export declare function toFilterCriteria(args: FilterOpts): Connex.Thor.Filter.Criteria<"event">[];
export declare const wait: (ms: number) => Promise<unknown>;
export declare const signTransaction: (ethTx: TxObj, key: Wallet.Key, provider: Provider) => Promise<string>;
export declare function decodeRevertReason(data: string): string | null;
export declare function getErrMsg(err: any): string;
