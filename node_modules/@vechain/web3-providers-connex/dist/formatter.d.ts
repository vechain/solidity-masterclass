/// <reference types="@vechain/connex-types" />
/// <reference types="@vechain/connex-types" />
/// <reference types="@vechain/connex-types" />
/// <reference types="@vechain/connex-types" />
/// <reference types="@vechain/connex-types" />
/// <reference types="@vechain/connex-types" />
/// <reference types="@vechain/connex-types" />
/// <reference types="@vechain/connex-types" />
import { RetLog, RetReceipt, RetBlock, RetTransaction, RetHeader } from './types';
export declare class Formatter {
    private readonly _connex;
    private readonly _inputFormatters;
    private readonly _ifSetNet;
    constructor(connex: Connex, ifSetNet: boolean);
    formatInput: (method: string, params?: any[]) => any[];
    private _getBlockByNumber;
    private _getBlockByHash;
    private _getBalance;
    private _getCode;
    private _getStorageAt;
    private _sendTransaction;
    private _call;
    private _estimateGas;
    private _getLogs;
    private _traceCall;
    private _subscribe;
    private _sendRawTransaction;
    outputReceiptFormatter: (receipt: Connex.Thor.Transaction.Receipt & {
        transactionIndex: string;
        logInds: string[];
        from: string;
        to: string | null;
    }) => RetReceipt;
    outputBlockFormatter: (b: Connex.Thor.Block) => RetBlock;
    outputTransactionFormatter: (tx: Connex.Thor.Transaction & {
        transactionIndex: string;
    }) => RetTransaction;
    outputLogsFormatter: (ret: {
        logs: Connex.Thor.Filter.Row<'event'>[];
        txInds: string[];
        logInds: string[];
    }) => RetLog[];
    outputHeaderFormatter: (b: Connex.Thor.Block) => RetHeader;
}
