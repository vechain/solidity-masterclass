"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("hardhat/config");
require("./type-extensions");
const task_names_1 = require("hardhat/builtin-tasks/task-names");
let classifier;
(0, config_1.extendConfig)((config, userConfig) => {
    let warnings = userConfig.warnings ?? {};
    if (typeof warnings !== 'object') {
        warnings = { '*': warnings };
    }
    config.warnings = warnings;
});
(0, config_1.task)(task_names_1.TASK_COMPILE_SOLIDITY_COMPILE_SOLC, async (args, hre, runSuper) => {
    const { WarningClassifier } = await Promise.resolve().then(() => __importStar(require('.')));
    classifier ?? (classifier = new WarningClassifier(hre.config.warnings));
    for (const [file, { content }] of Object.entries(args.input.sources)) {
        classifier.reprocessFile(file, content);
    }
    return runSuper(args);
});
(0, config_1.task)(task_names_1.TASK_COMPILE_SOLIDITY_CHECK_ERRORS, async ({ output, ...params }, hre, runSuper) => {
    const { WarningClassifier } = await Promise.resolve().then(() => __importStar(require('.')));
    classifier ?? (classifier = new WarningClassifier(hre.config.warnings));
    output = {
        ...output,
        errors: output.errors?.flatMap((e) => {
            // Make sure not to filter out errors
            if (e.severity !== 'warning' || !e.sourceLocation) {
                return [e];
            }
            const rule = classifier.getWarningRule(parseInteger(e.errorCode), e.sourceLocation);
            if (rule === 'off') {
                return [];
            }
            else if (rule === 'error') {
                return [{ ...e, severity: 'error' }];
            }
            else {
                return [e];
            }
        }),
    };
    return runSuper({ output, ...params });
});
function parseInteger(n) {
    if (n === undefined) {
        return undefined;
    }
    else if (/^\d+$/.test(n)) {
        return Number(n);
    }
    else {
        throw new Error(`Expected integer but got '${n}'`);
    }
}
//# sourceMappingURL=plugin.js.map